(function (e) {
  function t(n) {
    if (a[n]) return a[n].exports;
    var o = (a[n] = { i: n, l: !1, exports: {} });
    return e[n].call(o.exports, o, o.exports, t), (o.l = !0), o.exports;
  }
  var a = {};
  return (
    (t.m = e),
    (t.c = a),
    (t.d = function (e, a, n) {
      t.o(e, a) ||
        Object.defineProperty(e, a, {
          configurable: !1,
          enumerable: !0,
          get: n,
        });
    }),
    (t.n = function (e) {
      var a =
        e && e.__esModule
          ? function () {
              return e['default'];
            }
          : function () {
              return e;
            };
      return t.d(a, 'a', a), a;
    }),
    (t.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }),
    (t.p = '/fe/lol-parties/'),
    t((t.s = 120))
  );
})([
  function (e, t, a) {
    function n() {
      return o
        ? o
        : (l(
            'The `provider` object has not been set, please do so by calling the `init` method.',
          ),
          null);
    }
    let o;
    const i = a(3),
      s = i('provider-proxy:warn'),
      l = i('provider-proxy:error');
    i.enable('provider-proxy:*');
    e.exports = {
      init: function (e, t) {
        return (o = e), this.add(t);
      },
      _getValue: function (e, t) {
        let a;
        return (
          'function' == typeof t
            ? ((a = t(o)),
              !a &&
                s('The function for key ' + e + ' returned a falsy value: ', a))
            : 'string' == typeof t
            ? ((a = o.get(t)),
              !a &&
                s(
                  'The provider `get` invocation for the key ' +
                    e +
                    ' returned a falsy value: ',
                  a,
                ))
            : 'object' == typeof t && (a = t),
          a
        );
      },
      add: function (e) {
        e = e || {};
        const t = [],
          a = this;
        return (
          Object.keys(e).forEach(function (n) {
            const o = e[n],
              i = a._getValue(n, o);
            i && i.then
              ? (i.then(function (e) {
                  e ||
                    s(
                      'The promise for the key ' +
                        n +
                        ' resolved with a falsy value: ',
                      e,
                    ),
                    a._addValue(n, e);
                }),
                t.push(i))
              : a._addValue(n, i);
          }),
          Promise.all(t)
        );
      },
      _addValue: function (e, t) {
        this[e] = t;
      },
      provider: function () {
        return (
          l(
            'The function `provider` has been deprecated, please use `getProvider`',
            new Error().stack,
          ),
          n()
        );
      },
      getProvider: function () {
        return n();
      },
    };
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    const o = { SOUND: 'sfx-ui', MUSIC: 'music-ambience' };
    e.exports = n.Ember.Mixin.create({
      getMapSoundUrl: function (e) {
        const t = this.get('assets').getMap(
          this.get('mapId'),
          this.get('gameMode'),
          this.get('assetMutator'),
        );
        if (!t || !t.assets || !t.assets[e]) return !1;
        const a = t.assets[e];
        return `/${a}`;
      },
      playSound: function (e) {
        if (!1 !== e) {
          const t = n.Audio.getChannel(o.SOUND).createSound(e);
          t.play();
        }
      },
      hoverSoundLocked: !1,
      attachHoverSoundWithDisabledCheck: function (e, t) {
        e.addEventListener('mouseenter', () => {
          this.get('hoverSoundDisabled') ||
            this.get('hoverSoundLocked') ||
            (this.playSound(t), this.set('hoverSoundLocked', !0));
        }),
          e.addEventListener('mouseleave', () => {
            this.set('hoverSoundLocked', !1);
          });
      },
      addHoverClickSound: function (e, t, a) {
        this.$(e)
          .on('mouseover', () => {
            this.playSound(t);
          })
          .on('click', () => {
            this.playSound(a);
          });
      },
    });
  },
  function (e, t, a) {
    e.exports = { default: a(157), __esModule: !0 };
  },
  function (e, t, a) {
    const n = a(121),
      o = /[&?]DEBUG(?:=([^&?#]*))?/,
      i = a(124),
      s = n.enable;
    n.enable = function (e) {
      if ('' === e) return s('');
      const t = n.load();
      return t && -1 < t.indexOf(e) ? void 0 : t ? s(t + ',' + e) : s(e);
    };
    const l = n.enabled;
    n.enabled = function (e) {
      return !!/:(error|warn)$/.test(e) || l(e);
    };
    const r = function (e) {
      return function () {
        return 'undefined' != typeof window && window.riot
          ? console[e](i.format.apply(i, arguments))
          : console[e].apply(console, arguments);
      };
    };
    if ('undefined' != typeof window) {
      const e = o.exec(window.location.href);
      e &&
        (n.disable('*'),
        n.enable(e[1]),
        n('riotclient-debug:internal')('Enabling DEBUG=' + e[1])),
        window.riot &&
          ((n.log = r('log')),
          (n.useColors = function () {
            return !1;
          }));
    }
    (e.exports = n), (e.exports.consoleWrap = r);
  },
  function (e) {
    var t = (e.exports = { version: '2.6.5' });
    'number' == typeof __e && (__e = t);
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    e.exports = n.Ember.Mixin.create({
      ModalManager: n.UIKit.getModalManager(),
      ToastManager: n.UIKit.getToastManager(),
      TemplateHelper: n.UIKit.getTemplateHelper(),
      showInviteModal: function () {
        const e = n.ComponentFactory.create('LobbyInviteDialog'),
          t = e.domNode,
          a = this.get('ModalManager').add({
            type: 'DialogConfirm',
            data: {
              contents: t,
              acceptText: this.get('tra.invite_dialog_send_invites_button'),
              closeButton: !0,
            },
          });
        return (
          t.addEventListener('disableacceptbutton', (e) => {
            a.disableAcceptButton(), e.stopPropagation();
          }),
          t.addEventListener('enableacceptbutton', (e) => {
            a.enableAcceptButton(), e.stopPropagation();
          }),
          a.acceptPromise
            .then(
              () => {
                t.querySelector('.lobby-invite-dialog').dispatchEvent(
                  new Event('sendInvitesClicked'),
                );
              },
              () => {
                t.querySelector('.lobby-invite-dialog').dispatchEvent(
                  new Event('closeModalClicked'),
                );
              },
            )
            .catch(() => {}),
          a
        );
      },
      showGameSelectErrorModal: function (e, t, a) {
        const n = this.get('tra.parties_game_select_error_modal_ok'),
          o = this.get('ModalManager').add({
            type: 'DialogAlert',
            data: { contents: e, okText: n },
          });
        return (
          o && o.domNode && a && o.domNode.classList.add(a),
          t &&
            o.okPromise.then(() => {
              t();
            }),
          o
        );
      },
      showModal: function (e) {
        const t = this.get('ModalManager').add(e);
        return (
          n.Ember.get(t, 'data.onOk') && t.okPromise
            ? t.okPromise.then(t.data.onOk)
            : t.acceptPromise &&
              t.acceptPromise
                .then(() => {
                  n.Ember.get(t, 'data.onAccept') && t.data.onAccept();
                })
                .catch(() => {
                  n.Ember.get(t, 'data.onDecline') && t.data.onDecline();
                }),
          t
        );
      },
      removeModal: function (e) {
        this.get('ModalManager').remove(e);
      },
      showToast: function (e, t) {
        const a = this.get('TemplateHelper').contentBlockNotification(e);
        return (
          t && a.classList.add(t),
          this.get('ToastManager').add({
            type: 'DialogToast',
            data: { contents: a },
          })
        );
      },
    });
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(197),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    const i = o.default.create();
    t.default = i;
  },
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    const a = { PVP: 'PvP', VERSUSAI: 'VersusAi', TRAINING: 'Training' },
      n = {
        primary: [a.PVP, a.VERSUSAI, a.TRAINING],
        secondary: ['CreateCustom', 'JoinCustom'],
      };
    (t.PICK_TYPES = {
      SimulPickStrategy: 'blind',
      DraftModeSinglePickStrategy: 'draft',
      TeamBuilderDraftPickStrategy: 'draft',
      AllRandomPickStrategy: 'random',
      TournamentPickStrategy: 'tournament',
      OneTeamVotePickStrategy: 'vote',
    }),
      (t.DEFAULT_QUEUE_ID = 31),
      (t.DEFAULT_TFT_QUEUE_ID = 1090),
      (t.INVALID_QUEUE_ID = -1),
      (t.GAME_MODES = { TFT: 'TFT' }),
      (t.TFT_CUSTOM_QUEUE_IDS = { 100: 3e3, 101: 3010 }),
      (t.QUEUE_AVAILABILITY = {
        enabled: 'Available',
        disabled: 'PlatformDisabled',
      }),
      (t.CATEGORIES_DISPLAY_ORDER = n),
      (t.TUTORIAL_GAME_TYPES = [
        {
          mapId: 11,
          gameMode: 'TUTORIAL_FLOW',
          requiresCustomGameSubCategory: !1,
          queues: [],
        },
        {
          mapId: 11,
          gameMode: 'PRACTICETOOL',
          requiresCustomGameSubCategory: !0,
          queues: [],
        },
      ]),
      (t.TUTORIAL_TYPE_MAPS = {
        BASIC_TUTORIAL: 12,
        BATTLE_TRAINING: 11,
        TUTORIAL_FLOW: 11,
        PRACTICETOOL: 11,
        CLASSIC: 11,
      }),
      (t.TRAINING_TYPES = {
        PRACTICE_TOOL: 'PRACTICETOOL',
        TUTORIAL: 'TUTORIAL_FLOW',
      }),
      (t.DISABLED_RGM_GAME_TYPE = {
        mapId: 11,
        gameMode: 'LCURGMDISABLED',
        requiresCustomGameSubCategory: !1,
        queues: [],
      }),
      (t.CATEGORY_NAMES = a),
      (t.MISSING_TOKEN_ERRORS = [
        'BanInfoNotAvailable',
        'MinorInfoNotAvailable',
        'LeaguesInfoNotAvailable',
        'SummonerInfoNotAvailable',
        'InventoryChampsInfoNotAvailable',
        'InventoryQueuesInfoNotAvailable',
      ]),
      (t.TENCENT_MINOR_RESTRICTIONS = [
        'PlayerMinorRestriction',
        'PlayerTimePlayedRestriction',
      ]),
      (t.TUTORIAL_QUEUE_IDS = [2e3, 2010, 2020]),
      (t.NPE_FIRST_TOUCH_QUEUE_SELECT_ID = {
        TFT: 'teamfight',
        SR: 'summonersrift',
      }),
      (t.QUEUE_TYPE = {
        RANKED_FLEX_SR: 'RANKED_FLEX_SR',
        RANKED_SOLO_5x5: 'RANKED_SOLO_5x5',
      }),
      (t.PAIRS_QUEUE_IDS = [1140, 1141, 1142, 1143, 1150, 1151, 1152]);
  },
  function (e) {
    function t(e, t) {
      var n = e[1] || '',
        o = e[3];
      if (!o) return n;
      if (t && 'function' == typeof btoa) {
        var i = a(o),
          s = o.sources.map(function (e) {
            return '/*# sourceURL=' + o.sourceRoot + e + ' */';
          });
        return [n].concat(s).concat([i]).join('\n');
      }
      return [n].join('\n');
    }
    function a(e) {
      var t = btoa(unescape(encodeURIComponent(JSON.stringify(e))));
      return (
        '/*# ' +
        ('sourceMappingURL=data:application/json;charset=utf-8;base64,' + t) +
        ' */'
      );
    }
    e.exports = function (e) {
      var a = [];
      return (
        (a.toString = function () {
          return this.map(function (a) {
            var n = t(a, e);
            return a[2] ? '@media ' + a[2] + '{' + n + '}' : n;
          }).join('');
        }),
        (a.i = function (e, t) {
          'string' == typeof e && (e = [[null, e, '']]);
          for (var n = {}, o = 0, i; o < this.length; o++)
            (i = this[o][0]), 'number' == typeof i && (n[i] = !0);
          for (o = 0; o < e.length; o++) {
            var s = e[o];
            ('number' == typeof s[0] && n[s[0]]) ||
              (t && !s[2]
                ? (s[2] = t)
                : t && (s[2] = '(' + s[2] + ') and (' + t + ')'),
              a.push(s));
          }
        }),
        a
      );
    };
  },
  function (e) {
    var t = (e.exports =
      'undefined' != typeof window && window.Math == Math
        ? window
        : 'undefined' != typeof self && self.Math == Math
        ? self
        : Function('return this')());
    'number' == typeof __g && (__g = t);
  },
  function (e, t, a) {
    var n = a(85)('wks'),
      o = a(62),
      i = a(9).Symbol,
      s = 'function' == typeof i,
      l = (e.exports = function (e) {
        return n[e] || (n[e] = (s && i[e]) || (s ? i : o)('Symbol.' + e));
      });
    l.store = n;
  },
  function (e, t, a) {
    var n = a(9),
      o = a(4),
      i = a(19),
      s = a(23),
      l = a(33),
      r = 'prototype',
      c = function (e, t, a) {
        var m = e & c.F,
          d = e & c.G,
          p = e & c.S,
          u = e & c.P,
          g = e & c.B,
          b = e & c.W,
          h = d ? o : o[t] || (o[t] = {}),
          f = h[r],
          y = d ? n : p ? n[t] : (n[t] || {})[r],
          _,
          v,
          S;
        for (_ in (d && (a = t), a))
          (v = !m && y && void 0 !== y[_]),
            (v && l(h, _)) ||
              ((S = v ? y[_] : a[_]),
              (h[_] =
                d && 'function' != typeof y[_]
                  ? a[_]
                  : g && v
                  ? i(S, n)
                  : b && y[_] == S
                  ? (function (e) {
                      var t = function (t, a, n) {
                        if (this instanceof e) {
                          switch (arguments.length) {
                            case 0:
                              return new e();
                            case 1:
                              return new e(t);
                            case 2:
                              return new e(t, a);
                          }
                          return new e(t, a, n);
                        }
                        return e.apply(this, arguments);
                      };
                      return (t[r] = e[r]), t;
                    })(S)
                  : u && 'function' == typeof S
                  ? i(Function.call, S)
                  : S),
              u &&
                (((h.virtual || (h.virtual = {}))[_] = S),
                e & c.R && f && !f[_] && s(f, _, S)));
      };
    (c.F = 1),
      (c.G = 2),
      (c.S = 4),
      (c.P = 8),
      (c.B = 16),
      (c.W = 32),
      (c.U = 64),
      (c.R = 128),
      (e.exports = c);
  },
  function (e) {
    'use strict';
    e.exports = {
      POSITIONS: {
        MIDDLE: 'MIDDLE',
        BOTTOM: 'BOTTOM',
        JUNGLE: 'JUNGLE',
        TOP: 'TOP',
        UTILITY: 'UTILITY',
        FILL: 'FILL',
        NONE: 'NONE',
        UNSELECTED: 'UNSELECTED',
      },
      MAP21_MAPPINGS: {
        TOP: 'JUNGLE',
        JUNGLE: 'JUNGLE',
        MIDDLE: 'BOTTOM',
        BOTTOM: 'BOTTOM',
        UTILITY: 'BOTTOM',
      },
      POSITION_ROLES: { PRIMARY: 'PRIMARY', SECONDARY: 'SECONDARY' },
    };
  },
  function (e) {
    'use strict';
    e.exports = {
      SFX_CHANNEL: 'sfx-ui',
      SFX_URLS: {
        SFX_UIKIT_CLICK_AND_SLIDE:
          '/fe/lol-uikit/sfx-uikit-click-and-slide.ogg',
        SFX_SOC_UI_CLICK_GENERIC:
          '/fe/lol-parties/sfx-soc-ui-click-generic.ogg',
        SFX_COMPANION_PICKER_HOVER: '/fe/lol-parties/sfx-uikit-grid-hover.ogg',
        SFX_COMPANION_PICKER_CLICK: '/fe/lol-parties/sfx-uikit-grid-click.ogg',
        SFX_LOADOUT_RARITY_CLICK:
          '/fe/lol-static-assets/sounds/sfx-loadout-rarity-button-click.ogg',
        SFX_STAR_SHARDS_PURCHASE:
          '/fe/lol-parties/sfx-starshards-button-release.ogg',
        SFX_STAR_SHARDS_SUCCESS: '/fe/lol-parties/sfx-starshards-success.ogg',
        SFX_STAR_SHARDS_CELEBRATION:
          '/fe/lol-parties/sfx-celebrate-upgrade-littlelegend.ogg',
        SFX_RADIALMENU_OPEN: '/fe/lol-parties/sfx-radialmenu-open.ogg',
        SFX_RADIALMENU_ROLE_SELECT:
          '/fe/lol-parties/sfx-radialmenu-role-select.ogg',
        SFX_RADIALMENU_ROLE_HOVER:
          '/fe/lol-parties/sfx-radialmenu-role-hover.ogg',
        SFX_FIND_MATCH_CLICK:
          '/fe/lol-parties/sfx-lobby-button-find-match-click.ogg',
        SFX_FIND_MATCH_HOVER:
          '/fe/lol-parties/sfx-lobby-button-find-match-hover.ogg',
        SFX_LOBBY_QUIT_CLICK: '/fe/lol-parties/sfx-lobby-button-quit-click.ogg',
        SFX_LOBBY_QUIT_HOVER: '/fe/lol-parties/sfx-lobby-button-quit-hover.ogg',
        SFX_GOLD_HOVER: '/fe/lol-uikit/sfx-uikit-button-gold-hover.ogg',
        SFX_GOLD_CLICK: '/fe/lol-uikit/sfx-uikit-button-gold-click.ogg',
      },
    };
  },
  function (e) {
    e.exports = function (e) {
      return 'object' == typeof e ? null !== e : 'function' == typeof e;
    };
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(220),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    const i = o.default.create();
    t.default = i;
  },
  function (e) {
    e.exports = function (e) {
      return 'string' == typeof e
        ? (/^['"].*['"]$/.test(e) && (e = e.slice(1, -1)),
          /["'() \t\n]/.test(e)
            ? '"' + e.replace(/"/g, '\\"').replace(/\n/g, '\\n') + '"'
            : e)
        : e;
    };
  },
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    (t.GAME_AVAILABILITY_TYPES = {
      Available: 'available',
      PlatformDisabled: 'disabled',
      DoesntMeetRequirements: 'requirements',
      ClientUnsupported: 'unsupported',
    }),
      (t.CUSTOM_GAME_MUTATOR_NAMES = {
        GAME_CFG_DRAFT_TOURNAMENT: 'tournament_draft',
        GAME_CFG_PICK_RANDOM: 'random',
        GAME_CFG_DRAFT_STD: 'draft',
        GAME_CFG_PICK_BLIND: 'blind',
        GAME_CFG_TEAM_BUILDER_BLIND: 'blind',
        GAME_CFG_TEAM_BUILDER_DRAFT: 'draft',
        GAME_CFG_COUNTER_PICK: 'counter',
        GAME_CFG_PICK_SIMUL_TD: 'simultaneous',
        GAME_CFG_PICK_SIMUL: 'simultaneous',
        GAME_CFG_BLIND_DUPE: 'all_for_one',
        GAME_CFG_BLIND_DRAFT_ST: 'blind_draft',
        NORMAL_TFT: 'tft',
        RANKED_TFT_TURBO: 'hyper_roll',
        GAME_MUTATOR_OVERRIDE_SHOWDOWN: 'showdown',
      }),
      (t.CUSTOM_GAME_SPECTATOR_TYPES = {
        AllAllowed: 'all',
        NotAllowed: 'none',
        LobbyAllowed: 'lobby',
        FriendsAllowed: 'dropin',
      }),
      (t.CUSTOM_GAME_SPECTATOR_VALUES = {
        AllAllowed: 'AllAllowed',
        NotAllowed: 'NotAllowed',
        LobbyAllowed: 'LobbyAllowed',
        FriendsAllowed: 'FriendsAllowed',
      }),
      (t.CUSTOM_GAME_ERROR_CODES = {
        401: 'UserBannedException',
        403: 'IncorrectPasswordException',
        404: 'GameNotFoundException',
        409: 'GameNameNotUniqueException',
        423: 'GameflowLocked',
        430: 'PlayerAlreadyInGameException',
        431: 'TeamFullException',
        432: 'GameFullException',
        433: 'NotEnoughPlayersException',
        434: 'TooManyPlayersException',
        435: 'GameModeNotSupportedException',
        437: 'InvalidCustomGameNameException',
        500: 'UnknownException',
        530: 'InvalidGameStateException',
        531: 'StaleGameVersionException',
        532: 'GameStartUnbalancedTeamsException',
        533: 'GameNotDraftModeTurnException',
      }),
      (t.CUSTOM_GAME_NORMAL_MUTATORS = [1, 2, 4, 6, 100, 101]),
      (t.CUSTOM_GAME_MAP_MUTATOR_OVERRIDES = { 12: [7] });
  },
  function (e, t) {
    'use strict';
    function a(e) {
      return o[e];
    }
    function n(e) {
      for (var t = 1; t < arguments.length; t++)
        for (var a in arguments[t])
          Object.prototype.hasOwnProperty.call(arguments[t], a) &&
            (e[a] = arguments[t][a]);
      return e;
    }
    (t.__esModule = !0),
      (t.extend = n),
      (t.indexOf = function (e, t) {
        for (var a = 0, n = e.length; a < n; a++) if (e[a] === t) return a;
        return -1;
      }),
      (t.escapeExpression = function (e) {
        if ('string' != typeof e) {
          if (e && e.toHTML) return e.toHTML();
          if (null == e) return '';
          if (!e) return e + '';
          e = '' + e;
        }
        return s.test(e) ? e.replace(i, a) : e;
      }),
      (t.isEmpty = function (e) {
        return !(e || 0 === e) || !!(c(e) && 0 === e.length);
      }),
      (t.createFrame = function (e) {
        var t = n({}, e);
        return (t._parent = e), t;
      }),
      (t.blockParams = function (e, t) {
        return (e.path = t), e;
      }),
      (t.appendContextPath = function (e, t) {
        return (e ? e + '.' : '') + t;
      });
    var o = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;',
        '=': '&#x3D;',
      },
      i = /[&<>"'`=]/g,
      s = /[&<>"'`=]/,
      l = Object.prototype.toString;
    t.toString = l;
    var r = function (e) {
      return 'function' == typeof e;
    };
    r(/x/) &&
      (t.isFunction = r =
        function (e) {
          return 'function' == typeof e && '[object Function]' === l.call(e);
        }),
      (t.isFunction = r);
    var c =
      Array.isArray ||
      function (e) {
        return !!(e && 'object' == typeof e) && '[object Array]' === l.call(e);
      };
    t.isArray = c;
  },
  function (e, t, a) {
    var n = a(32);
    e.exports = function (e, t, a) {
      return (n(e), void 0 === t)
        ? e
        : 1 === a
        ? function (n) {
            return e.call(t, n);
          }
        : 2 === a
        ? function (n, a) {
            return e.call(t, n, a);
          }
        : 3 === a
        ? function (n, a, o) {
            return e.call(t, n, a, o);
          }
        : function () {
            return e.apply(t, arguments);
          };
    };
  },
  function (e, t, a) {
    var n = a(21),
      o = a(137),
      i = a(138),
      s = Object.defineProperty;
    t.f = a(24)
      ? Object.defineProperty
      : function (e, t, a) {
          if ((n(e), (t = i(t, !0)), n(a), o))
            try {
              return s(e, t, a);
            } catch (t) {}
          if ('get' in a || 'set' in a)
            throw TypeError('Accessors not supported!');
          return 'value' in a && (e[t] = a.value), e;
        };
  },
  function (e, t, a) {
    var n = a(14);
    e.exports = function (e) {
      if (!n(e)) throw TypeError(e + ' is not an object!');
      return e;
    };
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(200),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    const i = o.default.create();
    t.default = i;
  },
  function (e, t, a) {
    var n = a(20),
      o = a(58);
    e.exports = a(24)
      ? function (e, t, a) {
          return n.f(e, t, o(1, a));
        }
      : function (e, t, a) {
          return (e[t] = a), e;
        };
  },
  function (e, t, a) {
    e.exports = !a(29)(function () {
      return (
        7 !=
        Object.defineProperty({}, 'a', {
          get: function () {
            return 7;
          },
        }).a
      );
    });
  },
  function (e, t, a) {
    e.exports = { default: a(232), __esModule: !0 };
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    e.exports = n.Ember.Mixin.create({
      translate: function (e, t) {
        const a = this.get('tra.formatString');
        return a(e, t);
      },
    });
  },
  function (e, t, a) {
    e.exports = { default: a(134), __esModule: !0 };
  },
  function (e) {
    e.exports = {};
  },
  function (e) {
    e.exports = function (e) {
      try {
        return !!e();
      } catch (t) {
        return !0;
      }
    };
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(194),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    const i = o.default.create();
    t.default = i;
  },
  function (e) {
    var t = {}.toString;
    e.exports = function (e) {
      return t.call(e).slice(8, -1);
    };
  },
  function (e) {
    e.exports = function (e) {
      if ('function' != typeof e) throw TypeError(e + ' is not a function!');
      return e;
    };
  },
  function (e) {
    var t = {}.hasOwnProperty;
    e.exports = function (e, a) {
      return t.call(e, a);
    };
  },
  function (e, t, a) {
    var n = a(54);
    e.exports = function (e) {
      return Object(n(e));
    };
  },
  function (e, t, a) {
    'use strict';
    var n = a(146)(!0);
    a(55)(
      String,
      'String',
      function (e) {
        (this._t = e + ''), (this._i = 0);
      },
      function () {
        var e = this._t,
          t = this._i,
          a;
        return t >= e.length
          ? { value: void 0, done: !0 }
          : ((a = n(e, t)), (this._i += a.length), { value: a, done: !1 });
      },
    );
  },
  function (e, t, a) {
    var n = a(19),
      o = a(90),
      i = a(91),
      s = a(21),
      l = a(42),
      r = a(63),
      c = {},
      m = {},
      t = (e.exports = function (e, t, a, d, p) {
        var u = p
            ? function () {
                return e;
              }
            : r(e),
          g = n(a, d, t ? 2 : 1),
          b = 0,
          h,
          f,
          y,
          _;
        if ('function' != typeof u) throw TypeError(e + ' is not iterable!');
        if (i(u)) {
          for (h = l(e.length); h > b; b++)
            if (
              ((_ = t ? g(s((f = e[b]))[0], f[1]) : g(e[b])),
              _ === c || _ === m)
            )
              return _;
        } else
          for (y = u.call(e); !(f = y.next()).done; )
            if (((_ = o(y, g, f.value, t)), _ === c || _ === m)) return _;
      });
    (t.BREAK = c), (t.RETURN = m);
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(0),
      o = a(30),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o),
      s = a(102);
    t.default = {
      isGameInviteAcceptable: function (e, t, a, n, o) {
        if (e && e.gameConfig && n) {
          const n = !!a && 'dnd' !== a.availability,
            i = !!t && t.bypassEligibilityCheck;
          return (
            o && n && 'Pending' === e.state && (i || e.canAcceptInvitation)
          );
        }
        return !1;
      },
      isReadyForGame: function (e) {
        const t = e || {},
          a = 'Patching' === t.action || 'Repairing' === t.action,
          n = !t.isUpToDate && 'CheckingForUpdates' === t.action;
        return !a && !n;
      },
      gameType: function (e) {
        if (e) {
          const t = i.default.getMapModeInfo(e.mapId, e.gameMode);
          if (t && t.isRGM) return n.tra.get('parties_game_type_featured');
          if (-1 < s.CUSTOM_GAME_TYPES.indexOf(e.inviteGameType))
            return n.tra.get('parties_game_type_practice');
          const a = i.default.getQueueById(e.queueId);
          return a
            ? a.category === s.BOT_GAME_TYPE
              ? n.tra.get('parties_game_type_coop_vs_ai')
              : a.description
            : '';
        }
      },
      mapKey: function (e) {
        if (e) {
          const t = i.default.getMapModeInfo(e.mapId, e.gameMode);
          return t && t.isRGM
            ? 'game_map_rotating_game_mode'
            : s.MAP_TO_I18N_KEY[e.mapId];
        }
      },
    };
  },
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    (t.SEARCH_ERROR_TYPES = {
      QUEUE_DODGER: 'QUEUE_DODGER',
      LEAVER_BUSTER_QUEUE_DELAY: 'LEAVER_BUSTED',
      LEAVER_BUSTER_QUEUE_LOCKOUT: 'LEAVER_BUSTER_QUEUE_LOCKOUT',
      LEAVER_BUSTER_TAINTED_WARNING: 'LEAVER_BUSTER_TAINTED_WARNING',
      RANKED_MIN_LEVEL: 'RANKED_MIN_LEVEL',
      PREREQUISITE_QUEUES_NOT_PLAYED: 'PREREQUISITE_QUEUES_NOT_PLAYED',
    }),
      (t.MATCHMAKING_STATES = { SEARCHING: 'Searching', FOUND: 'Found' }),
      (t.LOW_PRIORITY_REASONS = {
        LEAVER_BUSTED: 'LEAVER_BUSTED',
        QUEUE_DELAY: 'QUEUE_DELAY',
      });
  },
  function (e, t) {
    'use strict';
    function a(e, t) {
      var o = t && t.loc,
        i,
        s;
      o &&
        ((i = o.start.line), (s = o.start.column), (e += ' - ' + i + ':' + s));
      for (
        var l = Error.prototype.constructor.call(this, e), r = 0;
        r < n.length;
        r++
      )
        this[n[r]] = l[n[r]];
      Error.captureStackTrace && Error.captureStackTrace(this, a);
      try {
        o &&
          ((this.lineNumber = i),
          Object.defineProperty
            ? Object.defineProperty(this, 'column', {
                value: s,
                enumerable: !0,
              })
            : (this.column = s));
      } catch (e) {}
    }
    t.__esModule = !0;
    var n = [
      'description',
      'fileName',
      'lineNumber',
      'message',
      'name',
      'number',
      'stack',
    ];
    (a.prototype = new Error()), (t['default'] = a), (e.exports = t['default']);
  },
  function (e) {
    'use strict';
    e.exports = {
      INVITED_ROLES: {
        PENDING: 'Pending',
        ACCEPTED: 'Accepted',
        JOINED: 'Joined',
        DECLINED: 'Declined',
        KICKED: 'Kicked',
        ERROR: 'Error',
      },
      SUGGESTED_TYPES: {
        FRIEND: 'OnlineFriend',
        PREMADE: 'PreviousPremade',
        FRIEND_OF_FRIEND: 'FriendOfFriend',
        HONORED: 'HonoredPlayer',
        VICTORIOUS: 'VictoriousComrade',
        LEGACY: 'LegacyPlayAgain',
      },
      PARTY_TYPES: { OPEN: 'open', CLOSED: 'closed' },
      TFT_MAX_PARTY_SIZE: 8,
      NORMAL_MAX_PARTY_SIZE: 5,
    };
  },
  function (e, t, a) {
    a(135);
    for (
      var n = a(9),
        o = a(23),
        s = a(28),
        l = a(10)('toStringTag'),
        r =
          'CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList'.split(
            ',',
          ),
        c = 0;
      c < r.length;
      c++
    ) {
      var i = r[c],
        m = n[i],
        d = m && m.prototype;
      d && !d[l] && o(d, l, i), (s[i] = s.Array);
    }
  },
  function (e, t, a) {
    var n = a(60),
      o = Math.min;
    e.exports = function (e) {
      return 0 < e ? o(n(e), 9007199254740991) : 0;
    };
  },
  function (e, t, a) {
    var n = a(20).f,
      o = a(33),
      i = a(10)('toStringTag');
    e.exports = function (e, t, a) {
      e &&
        !o((e = a ? e : e.prototype), i) &&
        n(e, i, { configurable: !0, value: t });
    };
  },
  function (e, t, a) {
    var n = a(31),
      o = a(10)('toStringTag'),
      i =
        'Arguments' ==
        n(
          (function () {
            return arguments;
          })(),
        ),
      s = function (e, t) {
        try {
          return e[t];
        } catch (t) {}
      };
    e.exports = function (e) {
      var t, a, l;
      return e === void 0
        ? 'Undefined'
        : null === e
        ? 'Null'
        : 'string' == typeof (a = s((t = Object(e)), o))
        ? a
        : i
        ? n(t)
        : 'Object' == (l = n(t)) && 'function' == typeof t.callee
        ? 'Arguments'
        : l;
    };
  },
  function (e, t, a) {
    e.exports = a.p + 'icon_warning_mask.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'common_plating_hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'epic_plating_hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'legendary_plating_hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'mythic_plating_hover.png';
  },
  function (e, t, a) {
    'use strict';
    var n = Math.floor,
      o = a(0);
    e.exports = {
      formatSeconds: function (e) {
        return this.formatMilliseconds(1e3 * e);
      },
      formatMilliseconds: function (e) {
        e = e || 0;
        const t = n(e / 60 / 60 / 1e3).toString();
        let a = n((e / 60 / 1e3) % 60).toString();
        const o = ('0' + n((e / 1e3) % 60).toString()).slice(-2);
        return (
          0 < t && (a = ('0' + a).slice(-2)),
          (0 < t ? t + ':' : '') + a + ':' + o
        );
      },
      formatThreeLargestUnits: function (e) {
        e = e || 0;
        const t = n(e / 60 / 60 / 24 / 7);
        let a = n((e / 60 / 60 / 24) % 7),
          i = n((e / 60 / 60) % 24);
        const s = n((e / 60) % 60),
          l = ('0' + (n(e) % 60).toString()).slice(-2);
        return 1 < t
          ? 0 < a
            ? 0 < i
              ? o.tra.formatString('queue_penalty_timer_wdh', {
                  weeks: t,
                  days: a,
                  hours: i,
                })
              : o.tra.formatString('queue_penalty_timer_wd', {
                  weeks: t,
                  days: a,
                })
            : 0 < i
            ? o.tra.formatString('queue_penalty_timer_wh', {
                weeks: t,
                hours: i,
              })
            : o.tra.formatString('queue_penalty_timer_w', { weeks: t })
          : ((a += 7 * t), 2 < a)
          ? 0 < i
            ? o.tra.formatString('queue_penalty_timer_dhms', {
                days: a,
                hours: i,
                minutes: s,
                seconds: l,
              })
            : o.tra.formatString('queue_penalty_timer_dms', {
                days: a,
                minutes: s,
                seconds: l,
              })
          : ((i += 24 * a),
            0 < i
              ? o.tra.formatString('queue_penalty_timer_hms', {
                  hours: i,
                  minutes: s,
                  seconds: l,
                })
              : o.tra.formatString('queue_penalty_timer_ms', {
                  minutes: s,
                  seconds: l,
                }));
      },
    };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(15),
      r = n(l);
    e.exports = s.Ember.Mixin.create({
      leaveParty: function () {
        return this.hideOurselves().then(() =>
          this.get('lobbiesService').leaveParty(),
        );
      },
      hideOurselves: function () {
        if (
          (this.set('selected.isUpdatingSelection', !1),
          this.get('showingState.isInViewport'))
        ) {
          const e = s.Viewport.main().getScreenRoot(
            r.default.get('viewportApiKey'),
            'rcp-fe-lol-parties',
          );
          return s.Navigation.showHome().then(() =>
            e.release().then(() => {
              this.get('showingState').set('isInViewport', !1);
            }),
          );
        }
        return i.default.resolve();
      },
    });
  },
  function (e, t, a) {
    var n = a(53),
      o = a(54);
    e.exports = function (e) {
      return n(o(e));
    };
  },
  function (e, t, a) {
    var n = a(31);
    e.exports = Object('z').propertyIsEnumerable(0)
      ? Object
      : function (e) {
          return 'String' == n(e) ? e.split('') : Object(e);
        };
  },
  function (e) {
    e.exports = function (e) {
      if (e == void 0) throw TypeError("Can't call method on  " + e);
      return e;
    };
  },
  function (e, t, a) {
    'use strict';
    var n = a(56),
      o = a(11),
      i = a(139),
      s = a(23),
      l = a(28),
      r = a(140),
      c = a(43),
      m = a(145),
      d = a(10)('iterator'),
      p = !([].keys && 'next' in [].keys()),
      u = 'keys',
      g = 'values',
      b = function () {
        return this;
      };
    e.exports = function (e, t, a, h, f, y, _) {
      r(a, t, h);
      var v = function (e) {
          return !p && e in k
            ? k[e]
            : e === u
            ? function () {
                return new a(this, e);
              }
            : e === g
            ? function () {
                return new a(this, e);
              }
            : function () {
                return new a(this, e);
              };
        },
        S = t + ' Iterator',
        x = f == g,
        E = !1,
        k = e.prototype,
        C = k[d] || k['@@iterator'] || (f && k[f]),
        I = C || v(f),
        P = f ? (x ? v('entries') : I) : void 0,
        T = 'Array' == t ? k.entries || C : C,
        w,
        R,
        L;
      if (
        (T &&
          ((L = m(T.call(new e()))),
          L !== Object.prototype &&
            L.next &&
            (c(L, S, !0), !n && 'function' != typeof L[d] && s(L, d, b))),
        x &&
          C &&
          C.name !== g &&
          ((E = !0),
          (I = function () {
            return C.call(this);
          })),
        (!n || _) && (p || E || !k[d]) && s(k, d, I),
        (l[t] = I),
        (l[S] = b),
        f)
      )
        if (((w = { values: x ? I : v(g), keys: y ? I : v(u), entries: P }), _))
          for (R in w) R in k || i(k, R, w[R]);
        else o(o.P + o.F * (p || E), t, w);
      return w;
    };
  },
  function (e) {
    e.exports = !0;
  },
  function (e, t, a) {
    var n = a(14),
      o = a(9).document,
      i = n(o) && n(o.createElement);
    e.exports = function (e) {
      return i ? o.createElement(e) : {};
    };
  },
  function (e) {
    e.exports = function (e, t) {
      return {
        enumerable: !(1 & e),
        configurable: !(2 & e),
        writable: !(4 & e),
        value: t,
      };
    };
  },
  function (e, t, a) {
    var n = a(142),
      o = a(86);
    e.exports =
      Object.keys ||
      function (e) {
        return n(e, o);
      };
  },
  function (e) {
    var t = Math.ceil,
      a = Math.floor;
    e.exports = function (e) {
      return isNaN((e = +e)) ? 0 : (0 < e ? a : t)(e);
    };
  },
  function (e, t, a) {
    var n = a(85)('keys'),
      o = a(62);
    e.exports = function (e) {
      return n[e] || (n[e] = o(e));
    };
  },
  function (e) {
    var t = 0,
      a = Math.random();
    e.exports = function (e) {
      return 'Symbol('.concat(
        e === void 0 ? '' : e,
        ')_',
        (++t + a).toString(36),
      );
    };
  },
  function (e, t, a) {
    var n = a(44),
      o = a(10)('iterator'),
      i = a(28);
    e.exports = a(4).getIteratorMethod = function (e) {
      if (e != void 0) return e[o] || e['@@iterator'] || i[n(e)];
    };
  },
  function (e, t, a) {
    e.exports = { default: a(149), __esModule: !0 };
  },
  function (e) {
    e.exports = function (e, t, a, n) {
      if (!(e instanceof t) || (n !== void 0 && n in e))
        throw TypeError(a + ': incorrect invocation!');
      return e;
    };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      var t, a;
      (this.promise = new e(function (e, n) {
        if (t !== void 0 || a !== void 0)
          throw TypeError('Bad Promise constructor');
        (t = e), (a = n);
      })),
        (this.resolve = o(t)),
        (this.reject = o(a));
    }
    var o = a(32);
    e.exports.f = function (e) {
      return new n(e);
    };
  },
  function (e, t, a) {
    var n = a(23);
    e.exports = function (e, t, a) {
      for (var o in t) a && e[o] ? (e[o] = t[o]) : n(e, o, t[o]);
      return e;
    };
  },
  function (e, t, a) {
    e.exports = { default: a(198), __esModule: !0 };
  },
  function (e, t, a) {
    var n = a(62)('meta'),
      o = a(14),
      i = a(33),
      s = a(20).f,
      l = 0,
      r =
        Object.isExtensible ||
        function () {
          return !0;
        },
      c = !a(29)(function () {
        return r(Object.preventExtensions({}));
      }),
      m = function (e) {
        s(e, n, { value: { i: 'O' + ++l, w: {} } });
      },
      d = (e.exports = {
        KEY: n,
        NEED: !1,
        fastKey: function (e, t) {
          if (!o(e))
            return 'symbol' == typeof e
              ? e
              : ('string' == typeof e ? 'S' : 'P') + e;
          if (!i(e, n)) {
            if (!r(e)) return 'F';
            if (!t) return 'E';
            m(e);
          }
          return e[n].i;
        },
        getWeak: function (e, t) {
          if (!i(e, n)) {
            if (!r(e)) return !0;
            if (!t) return !1;
            m(e);
          }
          return e[n].w;
        },
        onFreeze: function (e) {
          return c && d.NEED && r(e) && !i(e, n) && m(e), e;
        },
      });
  },
  function (e, t, a) {
    e.exports = { default: a(201), __esModule: !0 };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(64),
      i = n(o),
      s = a(0),
      l = n(s);
    const r = new (class {
      constructor() {
        const e = l.default.getProvider(),
          t = e.getSocket();
        (this._telemetryBinding = (0, s.dataBinding)('/telemetry', t)),
          (this._startSessionTime = !1);
      }
      beginSession() {
        this._startSessionTime = new Date();
      }
      sendTelemetryEvent(e, t) {
        const a = this._startSessionTime
            ? new Date() - this._startSessionTime
            : -1,
          n = (0, i.default)(t, {
            plugin: 'rcp-fe-lol-parties',
            sessionTime: a.toString(),
          });
        this._logDradisEvent(e, n);
      }
      _sendDetailedEvent(e, t, a, n, o) {
        (o = o || {}),
          (o.eventContext = e),
          (o.eventType = t),
          (o.eventAction = a),
          this._logDradisEvent(n, o);
      }
      _logDradisEvent(e, t) {
        this._telemetryBinding.post(`/v1/events/${e}`, t);
      }
      logError(e, t, a) {
        return this._sendDetailedEvent(
          'app',
          'general',
          'error',
          'social_panel',
          { action: e, errorDescription: t, errorData: a },
        );
      }
      gameInviteAccept() {
        this._sendDetailedEvent(
          'gamePanel',
          'gameInvite',
          'accept',
          'social_panel',
        );
      }
      gameInviteDecline() {
        this._sendDetailedEvent(
          'gamePanel',
          'gameInvite',
          'decline',
          'social_panel',
        );
      }
    })();
    t.default = r;
  },
  function (e, t, a) {
    e.exports = a.p + 'map_ha.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'map_sr.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'map_tt.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'map_rgm.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'map_21.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'map_tft.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'x_mask.png';
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    const o = (0, n.emberDataBinding)({
      Ember: n.Ember,
      websocket: (0, n.getProvider)().getSocket(),
      basePaths: { platformConfig: '/lol-platform-config', chat: '/lol-chat' },
      boundProperties: {
        isSocialLeaderboardEnabled: {
          api: 'platformConfig',
          path: '/v1/namespaces/SocialLeaderboard/IsSocialLeaderboardEnabled',
          default: !0,
        },
        minFriendCount: {
          api: 'platformConfig',
          path: '/v1/namespaces/SocialLeaderboard/MinFriendCount',
          default: 3,
        },
        friendsList: { api: 'chat', path: '/v1/friends', default: [] },
      },
    });
    e.exports = o;
  },
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    (t.SEASON_YEAR_BASE = 2010),
      (t.COUNTDOWN_INTERVAL_MS = 1e3),
      (t.OTHER_TIERS = { UNRANKED: 'UNRANKED', NONE: 'NONE' }),
      (t.LEAGUE_DIVISION_NA = 'NA'),
      (t.SOCIAL_LEADERBOARD_ROW_HEIGHT = 36.8),
      (t.NUM_OF_ROWS_TO_CENTER = 3.4);
  },
  function (e) {
    function t() {
      throw new Error('setTimeout has not been defined');
    }
    function a() {
      throw new Error('clearTimeout has not been defined');
    }
    function n(e) {
      if (m === setTimeout) return setTimeout(e, 0);
      if ((m === t || !m) && setTimeout)
        return (m = setTimeout), setTimeout(e, 0);
      try {
        return m(e, 0);
      } catch (t) {
        try {
          return m.call(null, e, 0);
        } catch (t) {
          return m.call(this, e, 0);
        }
      }
    }
    function o(e) {
      if (d === clearTimeout) return clearTimeout(e);
      if ((d === a || !d) && clearTimeout)
        return (d = clearTimeout), clearTimeout(e);
      try {
        return d(e);
      } catch (t) {
        try {
          return d.call(null, e);
        } catch (t) {
          return d.call(this, e);
        }
      }
    }
    function i() {
      u &&
        b &&
        ((u = !1), b.length ? (p = b.concat(p)) : (g = -1), p.length && s());
    }
    function s() {
      if (!u) {
        var e = n(i);
        u = !0;
        for (var t = p.length; t; ) {
          for (b = p, p = []; ++g < t; ) b && b[g].run();
          (g = -1), (t = p.length);
        }
        (b = null), (u = !1), o(e);
      }
    }
    function l(e, t) {
      (this.fun = e), (this.array = t);
    }
    function r() {}
    var c = (e.exports = {}),
      m,
      d;
    (function () {
      try {
        m = 'function' == typeof setTimeout ? setTimeout : t;
      } catch (a) {
        m = t;
      }
      try {
        d = 'function' == typeof clearTimeout ? clearTimeout : a;
      } catch (t) {
        d = a;
      }
    })();
    var p = [],
      u = !1,
      g = -1,
      b;
    (c.nextTick = function (e) {
      var t = Array(arguments.length - 1);
      if (1 < arguments.length)
        for (var a = 1; a < arguments.length; a++) t[a - 1] = arguments[a];
      p.push(new l(e, t)), 1 !== p.length || u || n(s);
    }),
      (l.prototype.run = function () {
        this.fun.apply(null, this.array);
      }),
      (c.title = 'browser'),
      (c.browser = !0),
      (c.env = {}),
      (c.argv = []),
      (c.version = ''),
      (c.versions = {}),
      (c.on = r),
      (c.addListener = r),
      (c.once = r),
      (c.off = r),
      (c.removeListener = r),
      (c.removeAllListeners = r),
      (c.emit = r),
      (c.prependListener = r),
      (c.prependOnceListener = r),
      (c.listeners = function () {
        return [];
      }),
      (c.binding = function () {
        throw new Error('process.binding is not supported');
      }),
      (c.cwd = function () {
        return '/';
      }),
      (c.chdir = function () {
        throw new Error('process.chdir is not supported');
      }),
      (c.umask = function () {
        return 0;
      });
  },
  function (e, t, a) {
    e.exports = a.p + 'companion_icon.svg';
  },
  function (e) {
    e.exports = function (e, t) {
      return { value: t, done: !!e };
    };
  },
  function (e, t, a) {
    var n = a(21),
      o = a(141),
      s = a(86),
      i = a(61)('IE_PROTO'),
      l = function () {},
      r = 'prototype',
      c = function () {
        var e = a(57)('iframe'),
          t = s.length,
          n = '<',
          o = '>',
          i;
        for (
          e.style.display = 'none',
            a(87).appendChild(e),
            e.src = 'javascript:',
            i = e.contentWindow.document,
            i.open(),
            i.write(n + 'script' + o + 'document.F=Object' + n + '/script' + o),
            i.close(),
            c = i.F;
          t--;

        )
          delete c[r][s[t]];
        return c();
      };
    e.exports =
      Object.create ||
      function (e, t) {
        var a;
        return (
          null === e
            ? (a = c())
            : ((l[r] = n(e)), (a = new l()), (l[r] = null), (a[i] = e)),
          void 0 === t ? a : o(a, t)
        );
      };
  },
  function (e, t, a) {
    var n = a(4),
      o = a(9),
      i = '__core-js_shared__',
      s = o[i] || (o[i] = {});
    (e.exports = function (e, t) {
      return s[e] || (s[e] = t === void 0 ? {} : t);
    })('versions', []).push({
      version: n.version,
      mode: a(56) ? 'pure' : 'global',
      copyright: '\xA9 2019 Denis Pushkarev (zloirock.ru)',
    });
  },
  function (e) {
    e.exports = [
      'constructor',
      'hasOwnProperty',
      'isPrototypeOf',
      'propertyIsEnumerable',
      'toLocaleString',
      'toString',
      'valueOf',
    ];
  },
  function (e, t, a) {
    var n = a(9).document;
    e.exports = n && n.documentElement;
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-player-position">\r\n  <div class="positionSelectorBackground" data-position="">\r\n    <div class="positionSelectorContents">\r\n      <div class="positionIcon">\r\n      </div>\r\n      <div class="positionSelectorVideos"></div>\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n';
  },
  function (e, t, a) {
    e.exports = { default: a(154), __esModule: !0 };
  },
  function (e, t, a) {
    var n = a(21);
    e.exports = function (t, e, a, o) {
      try {
        return o ? e(n(a)[0], a[1]) : e(a);
      } catch (a) {
        var i = t['return'];
        throw (void 0 !== i && n(i.call(t)), a);
      }
    };
  },
  function (e, t, a) {
    var n = a(28),
      o = a(10)('iterator'),
      i = Array.prototype;
    e.exports = function (e) {
      return e !== void 0 && (n.Array === e || i[o] === e);
    };
  },
  function (e, t, a) {
    var n = a(10)('iterator'),
      o = !1;
    try {
      var i = [7][n]();
      (i['return'] = function () {
        o = !0;
      }),
        Array.from(i, function () {
          throw 2;
        });
    } catch (t) {}
    e.exports = function (e, t) {
      if (!t && !o) return !1;
      var a = !1;
      try {
        var i = [7],
          s = i[n]();
        (s.next = function () {
          return { done: (a = !0) };
        }),
          (i[n] = function () {
            return s;
          }),
          e(i);
      } catch (t) {}
      return a;
    };
  },
  function () {},
  function (e, t, a) {
    var n = a(21),
      o = a(32),
      i = a(10)('species');
    e.exports = function (e, t) {
      var a = n(e).constructor,
        s;
      return a === void 0 || (s = n(a)[i]) == void 0 ? t : o(s);
    };
  },
  function (e, t, a) {
    var n = a(19),
      o = a(159),
      i = a(87),
      s = a(57),
      l = a(9),
      r = l.process,
      c = l.setImmediate,
      m = l.clearImmediate,
      d = l.MessageChannel,
      p = l.Dispatch,
      u = 0,
      g = {},
      b = 'onreadystatechange',
      h = function () {
        var e = +this;
        if (g.hasOwnProperty(e)) {
          var t = g[e];
          delete g[e], t();
        }
      },
      f = function (e) {
        h.call(e.data);
      },
      y,
      _,
      v;
    (c && m) ||
      ((c = function (e) {
        for (var t = [], a = 1; arguments.length > a; ) t.push(arguments[a++]);
        return (
          (g[++u] = function () {
            o('function' == typeof e ? e : Function(e), t);
          }),
          y(u),
          u
        );
      }),
      (m = function (e) {
        delete g[e];
      }),
      'process' == a(31)(r)
        ? (y = function (e) {
            r.nextTick(n(h, e, 1));
          })
        : p && p.now
        ? (y = function (e) {
            p.now(n(h, e, 1));
          })
        : d
        ? ((_ = new d()),
          (v = _.port2),
          (_.port1.onmessage = f),
          (y = n(v.postMessage, v, 1)))
        : l.addEventListener &&
          'function' == typeof postMessage &&
          !l.importScripts
        ? ((y = function (e) {
            l.postMessage(e + '', '*');
          }),
          l.addEventListener('message', f, !1))
        : b in s('script')
        ? (y = function (e) {
            i.appendChild(s('script'))[b] = function () {
              i.removeChild(this), h.call(e);
            };
          })
        : (y = function (e) {
            setTimeout(n(h, e, 1), 0);
          })),
      (e.exports = { set: c, clear: m });
  },
  function (e) {
    e.exports = function (e) {
      try {
        return { e: !1, v: e() };
      } catch (t) {
        return { e: !0, v: t };
      }
    };
  },
  function (e, t, a) {
    var n = a(21),
      o = a(14),
      i = a(66);
    e.exports = function (e, t) {
      if ((n(e), o(t) && t.constructor === e)) return t;
      var a = i.f(e),
        s = a.resolve;
      return s(t), a.promise;
    };
  },
  function (e, t, a) {
    'use strict';
    var n = a(9),
      o = a(4),
      i = a(20),
      s = a(24),
      l = a(10)('species');
    e.exports = function (e) {
      var t = 'function' == typeof o[e] ? o[e] : n[e];
      s &&
        t &&
        !t[l] &&
        i.f(t, l, {
          configurable: !0,
          get: function () {
            return this;
          },
        });
    };
  },
  function (e, t, a) {
    e.exports = { default: a(195), __esModule: !0 };
  },
  function (e, t, a) {
    var n = a(11),
      o = a(4),
      i = a(29);
    e.exports = function (e, t) {
      var a = (o.Object || {})[e] || Object[e],
        s = {};
      (s[e] = t(a)),
        n(
          n.S +
            n.F *
              i(function () {
                a(1);
              }),
          'Object',
          s,
        );
    };
  },
  function (e, t, a) {
    var n = a(14);
    e.exports = function (e, t) {
      if (!n(e) || e._t !== t)
        throw TypeError('Incompatible receiver, ' + t + ' required!');
      return e;
    };
  },
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    (t.MAP_TO_I18N_KEY = {
      8: 'game_map_crystal_scar',
      10: 'game_map_twisted_treeline',
      11: 'game_map_summoners_rift',
      12: 'game_map_howling_abyss',
      16: 'game_map_cosmic_ruins',
      21: 'game_map_21',
      22: 'game_map_22',
    }),
      (t.CUSTOM_GAME_TYPES = ['PRACTICE_GAME', 'CUSTOM_GAME']),
      (t.BOT_GAME_TYPE = 'VersusAi');
  },
  function (e, t, a) {
    e.exports = a.p + 'social-panel-bg-loop.webm';
  },
  function (e, t, a) {
    e.exports = a.p + 'party_panel_header_icon.png';
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    e.exports = {
      getBaseLayoutItem: function (e, t) {
        if (!e) return;
        if (
          e &&
          (e.itemId === t.defaultItemId ||
            (e.upgrades && 0 < e.upgrades.length))
        )
          return e;
        const a = n.lodash.find(t.groups, { groupId: e.groupId });
        if (!a) return e;
        let o;
        return (
          n.lodash.forEach(a.items, (t) =>
            t.itemId === e.itemId
              ? ((o = t), !1)
              : n.lodash.find(t.upgrades, { itemId: e.itemId })
              ? ((o = t), !1)
              : void 0,
          ),
          o ? o : e
        );
      },
      getLayoutItemById: function (e, t) {
        let a;
        return (
          n.lodash.forEach(
            t.groups,
            (t) =>
              !a &&
              void n.lodash.forEach(t.items, (t) =>
                t.itemId === e
                  ? ((a = t), !1)
                  : ((a = n.lodash.find(t.upgrades, { itemId: e })), !a) &&
                    void 0,
              ),
          ),
          a
        );
      },
    };
  },
  function (e, t, a) {
    e.exports = a.p + 'lock.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'lock_hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'tier_star.svg';
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(277),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    const i = o.default.create();
    t.default = i;
  },
  function (e, t, a) {
    'use strict';
    var n = a(2),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    e.exports = {
      _canInvitePlayerCallback: null,
      _inviteCallback: null,
      _registerCanInviteCallback: function (e) {
        this._canInvitePlayerCallback = e;
      },
      _registerInviteCallback: function (e) {
        this._inviteCallback = e;
      },
      canInvitePlayer(e) {
        return (
          !!this._canInvitePlayerCallback && this._canInvitePlayerCallback(e)
        );
      },
      invitePlayer(e, t) {
        return this._inviteCallback
          ? this._inviteCallback(e, t)
          : o.default.reject(new Error('APPLICATION_NOT_INITIALIZED'));
      },
    };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function o(e, t, a) {
      (this.helpers = e || {}),
        (this.partials = t || {}),
        (this.decorators = a || {}),
        r.registerDefaultHelpers(this),
        c.registerDefaultDecorators(this);
    }
    (t.__esModule = !0), (t.HandlebarsEnvironment = o);
    var i = a(18),
      s = a(39),
      l = n(s),
      r = a(289),
      c = a(297),
      m = a(299),
      d = n(m);
    t.VERSION = '4.1.2';
    t.COMPILER_REVISION = 7;
    t.REVISION_CHANGES = {
      1: '<= 1.0.rc.2',
      2: '== 1.0.0-rc.3',
      3: '== 1.0.0-rc.4',
      4: '== 1.x.x',
      5: '== 2.0.0-alpha.x',
      6: '>= 2.0.0-beta.1',
      7: '>= 4.0.0',
    };
    var p = '[object Object]';
    o.prototype = {
      constructor: o,
      logger: d['default'],
      log: d['default'].log,
      registerHelper: function (e, t) {
        if (i.toString.call(e) === p) {
          if (t)
            throw new l['default']('Arg not supported with multiple helpers');
          i.extend(this.helpers, e);
        } else this.helpers[e] = t;
      },
      unregisterHelper: function (e) {
        delete this.helpers[e];
      },
      registerPartial: function (e, t) {
        if (i.toString.call(e) === p) i.extend(this.partials, e);
        else {
          if ('undefined' == typeof t)
            throw new l['default'](
              'Attempting to register a partial called "' +
                e +
                '" as undefined',
            );
          this.partials[e] = t;
        }
      },
      unregisterPartial: function (e) {
        delete this.partials[e];
      },
      registerDecorator: function (e, t) {
        if (i.toString.call(e) === p) {
          if (t)
            throw new l['default'](
              'Arg not supported with multiple decorators',
            );
          i.extend(this.decorators, e);
        } else this.decorators[e] = t;
      },
      unregisterDecorator: function (e) {
        delete this.decorators[e];
      },
    };
    var u = d['default'].log;
    (t.log = u), (t.createFrame = i.createFrame), (t.logger = d['default']);
  },
  function (e, t, a) {
    'use strict';
    t.__esModule = !0;
    var n = a(64),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    t.default =
      o.default ||
      function (e) {
        for (var t = 1, a; t < arguments.length; t++)
          for (var n in ((a = arguments[t]), a))
            Object.prototype.hasOwnProperty.call(a, n) && (e[n] = a[n]);
        return e;
      };
  },
  function (e) {
    'use strict';
    e.exports = {
      TUTORIAL_ASSETS: {
        BASIC_TUTORIAL: {
          'game-select-icon-active-video':
            '/fe/lol-parties/tutorial-active-video.webm',
          'game-select-icon-intro-video':
            '/fe/lol-parties/tutorial-intro-video.webm',
          'game-select-icon-disabled': '/fe/lol-parties/tutorial-disabled.png',
          'game-select-icon-hover': '/fe/lol-parties/tutorial-hover.png',
          'game-select-icon-default': '/fe/lol-parties/tutorial-default.png',
          'game-select-icon-active': '/fe/lol-parties/tutorial-active.png',
          'icon-victory': '/fe/lol-parties/tutorial-icon-victory.png',
        },
        BATTLE_TRAINING: {
          'game-select-icon-active-video':
            '/fe/lol-parties/battletraining-active-video.webm',
          'game-select-icon-intro-video':
            '/fe/lol-parties/battletraining-intro-video.webm',
          'game-select-icon-disabled':
            '/fe/lol-parties/battletraining-disabled.png',
          'game-select-icon-hover': '/fe/lol-parties/battletraining-hover.png',
          'game-select-icon-default':
            '/fe/lol-parties/battletraining-default.png',
          'game-select-icon-active':
            '/fe/lol-parties/battletraining-active.png',
          'icon-victory': '/fe/lol-parties/battletraining-icon-victory.png',
        },
        TUTORIAL_FLOW: {
          'game-select-icon-active-video':
            '/fe/lol-parties/battletraining-active-video.webm',
          'game-select-icon-intro-video':
            '/fe/lol-parties/battletraining-intro-video.webm',
          'game-select-icon-disabled':
            '/fe/lol-parties/battletraining-disabled.png',
          'game-select-icon-hover': '/fe/lol-parties/battletraining-hover.png',
          'game-select-icon-default':
            '/fe/lol-parties/battletraining-default.png',
          'game-select-icon-active':
            '/fe/lol-parties/battletraining-active.png',
          'icon-victory': '/fe/lol-parties/battletraining-icon-victory.png',
        },
        PRACTICETOOL: {
          'game-select-icon-active-video':
            '/fe/lol-parties/practicetool-active-video.webm',
          'game-select-icon-intro-video':
            '/fe/lol-parties/practicetool-intro-video.webm',
          'game-select-icon-disabled':
            '/fe/lol-parties/practicetool-disabled.png',
          'game-select-icon-hover': '/fe/lol-parties/practicetool-hover.png',
          'game-select-icon-default':
            '/fe/lol-parties/practicetool-default.png',
          'game-select-icon-active': '/fe/lol-parties/practicetool-active.png',
          'icon-victory': '/fe/lol-parties/practicetool-icon-victory.png',
        },
      },
      SIDEBAR_BACKGROUND_COLORS: {
        DEFAULT: '#010a13',
        ASCENSION: { 8: '#452B13' },
        ODIN: { 8: '#452B13' },
        ARAM: { 12: '#072237' },
        CLASSIC: { 10: '#21172A', 11: '#10242F' },
        KINGPORO: { 12: '#072237' },
        SIEGE: { 11: '#10242F' },
        ASSASSINATE: { 11: '#490916' },
        URF: { 11: '#4B231B' },
        ARSR: { 11: '#10242F' },
      },
    };
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(0);
    const o = ['chat', 'away'],
      i = n.Ember.Object.extend({
        id: null,
        summonerId: null,
        name: null,
        gameName: null,
        gameTag: null,
        availability: null,
        checked: !1,
        checkboxId: n.Ember.computed('summonerId', function () {
          const e = this.get('summonerId');
          return `invite-dialog-checkbox-${e}`;
        }),
        canBeInvited: n.Ember.computed('availability', function () {
          const e = this.get('availability');
          return -1 !== o.indexOf(e);
        }),
        canBeInvitedBy(e) {
          const t = this.get('canBeInvited'),
            a = this.get('platformId'),
            n = this.get('product');
          return t && e && a === e.platformId && n === e.product;
        },
      });
    t.default = i;
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(2),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n),
      i = a(0);
    t.default = {
      promptPasswordModal: function () {
        const e = document.createElement('lol-uikit-flat-input'),
          t = document.createElement('lol-uikit-content-block');
        (e.innerHTML = `<input type="password" id="custom-game-join-password-input"></input>`),
          t.setAttribute('type', 'dialog-small'),
          (t.innerHTML = `<h4>${i.tra.get(
            'custom_game_list_required_password_header',
          )}</h4>
       <p>${i.tra.get('custom_game_list_required_password_text')}</p>
       <hr class="heading-spacer">`),
          t.appendChild(e);
        const a = i.UIKit.getModalManager().add({
            type: 'DialogConfirm',
            data: {
              contents: t,
              acceptText: i.tra.get('custom_game_list_required_password_join'),
              declineText: i.tra.get(
                'custom_game_list_required_password_cancel',
              ),
              closeButton: !1,
            },
          }),
          n = a.domNode.querySelector('#custom-game-join-password-input');
        return (
          n && n.focus(),
          a.acceptPromise.then(function () {
            const t = e.querySelector(
              'input[id=custom-game-join-password-input]',
            ).value;
            return o.default.resolve(t);
          })
        );
      },
      promptJoinErrorModal: function (e) {
        const t = i.tra.get('custom_game_list_error_title'),
          a = i.tra.get('custom_game_list_error_ok_button'),
          n = i.UIKit.getTemplateHelper().contentBlockDialog(
            t,
            e,
            'dialog-medium',
            'rcp-fe-lol-lobby-join-custom-game-error',
          ),
          o = i.UIKit.getModalManager().add({
            type: 'DialogAlert',
            data: { contents: n, okText: a },
          });
        return o;
      },
    };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(1),
      r = n(l),
      c = a(5),
      m = n(c),
      d = a(12);
    a(355);
    const p = d.POSITIONS.UNSELECTED,
      u = d.POSITIONS.FILL;
    e.exports = s.Ember.Component.extend(r.default, m.default, {
      ModalManager: s.UIKit.getModalManager(),
      layout: a(356),
      classNames: ['parties-root'],
      classNameBindings: ['isShowingParty:parties-show:parties-hide'],
      lobbiesService: s.Ember.inject.service('lobbies'),
      partySettings: s.Ember.inject.service('partySettings'),
      matchmakingService: s.Ember.inject.service('matchmaking'),
      summonerService: s.Ember.inject.service('summoner'),
      queueEligibilityService: s.Ember.inject.service('queue-eligibility'),
      chatService: s.Ember.inject.service('chat'),
      restrictions: s.Ember.computed('lobbiesService.queueId', function () {
        const e = this.get('lobbiesService.queueId');
        return this.get('queueEligibilityService').restrictionsForQueue(e);
      }),
      inParty: s.Ember.computed.and('lobbiesService.inLobby', 'isShowingParty'),
      isShowingParty: s.Ember.computed.alias('showingState.isShowingParty'),
      currentTeamIsFull: s.Ember.computed.alias(
        'lobbiesService.currentTeamIsFull',
      ),
      maxTeamSize: s.Ember.computed.alias('lobbiesService.maxTeamSize'),
      buttonsDisabled: s.Ember.computed.or(
        'matchmakingService.isSearching',
        'matchmakingService.isMatchFound',
      ),
      buttonsEnabled: s.Ember.computed.not('buttonsDisabled'),
      currentPlayer: s.Ember.computed.alias('lobbiesService.currentPlayer'),
      currentPartyMembers: s.Ember.computed.alias(
        'lobbiesService.currentPartyMembers',
      ),
      isCurrentPlayerPartyLeader: s.Ember.computed.alias(
        'lobbiesService.isCurrentPlayerPartyLeader',
      ),
      currentPartyLeader: s.Ember.computed.alias(
        'lobbiesService.currentPartyLeader',
      ),
      currentPlayerCanInvite: s.Ember.computed.alias(
        'lobbiesService.currentPlayerCanInvite',
      ),
      currentPlayerHasInvitePrivileges: s.Ember.computed.alias(
        'currentPlayer.allowedInviteOthers',
      ),
      partyInvitesAllowed: s.Ember.computed(
        'currentPlayerCanInvite',
        'currentPartyIsFull',
        'buttonsEnabled',
        function () {
          const e = this.get('buttonsEnabled'),
            t = this.get('currentPlayerCanInvite'),
            a = this.get('currentPartyIsFull');
          return e && t && !a;
        },
      ),
      _previousPartyLeaderId: null,
      _previousCanInvite: null,
      _showingAutofillModal: !1,
      backButtonShown: s.Ember.computed.alias('isCurrentPlayerPartyLeader'),
      backButtonContainerClass: s.Ember.computed(
        'backButtonShown',
        function () {
          const e = this.get('backButtonShown');
          return e ? 'back-button-shown' : 'back-button-hidden';
        },
      ),
      backButtonDisabled: s.Ember.computed.alias('buttonsDisabled'),
      playerPlaceholders: s.Ember.computed(
        'currentPartyMembers.[]',
        'otherPartyMembers.[]',
        'maxTeamSize',
        'lobbiesService.isTFT',
        'lobbiesService.maxLobbySize',
        function () {
          const e = this.get('currentPartyMembers.length') || 0;
          if (0 === e) return s.Ember.A();
          let t = this.get('lobbiesService.isTFT')
            ? this.get('lobbiesService.maxLobbySize')
            : this.get('maxTeamSize');
          t || (t = 0);
          const a = this.get('otherPartyMembers.length') || 0,
            n = Math.max(t - a - 1, 0),
            o = [];
          for (let e = 0; e < n; e++)
            o.push(s.Ember.Object.create({ isPlaceholder: !0 }));
          return s.Ember.A(o);
        },
      ),
      otherPartyMembers: s.Ember.computed.alias(
        'lobbiesService.otherCurrentPartyMembers',
      ),
      observeInvitePrivilegesChange: s.Ember.observer(
        'currentPlayerHasInvitePrivileges',
        function () {
          s.Ember.run.once(this, this._handleInviteGrantedRevoked);
        },
      ),
      _handleInviteGrantedRevoked: function () {
        const e = this.get('currentPlayerHasInvitePrivileges'),
          t = this.get('_previousCanInvite'),
          a = this.get('isCurrentPlayerPartyLeader');
        t !== e &&
          null !== t &&
          (!e || this.get('_hasPlayedInviteGranted') || a
            ? !e &&
              this.get('_hasPlayedInviteGranted') &&
              !a &&
              (this.get('chatService').sendChatMessage(
                this.get(
                  'tra.parties_invite_privileges_chat_notification_revoked',
                ),
                this.get('chatConversationId'),
              ),
              this.playSound('/fe/lol-parties/sfx-lobby-notif-revoke.ogg'),
              this.set('_hasPlayedInviteGranted', !1))
            : (this.playSound(
                '/fe/lol-parties/sfx-lobby-notif-invite-granted.ogg',
              ),
              this.get('chatService').sendChatMessage(
                this.get(
                  'tra.parties_invite_privileges_chat_notification_granted',
                ),
                this.get('chatConversationId'),
              ),
              this.set('_hasPlayedInviteGranted', !0))),
          this.set('_previousCanInvite', e);
      },
      observePartyLeaderChange: s.Ember.observer(
        'isCurrentPlayerPartyLeader',
        function () {
          s.Ember.run.once(this, this._handlePartyLeaderGranted);
        },
      ),
      _handlePartyLeaderGranted: function () {
        const e = this.get('currentPartyLeader.summonerId'),
          t = this.get('currentPlayer.summonerId'),
          a = this.get('isCurrentPlayerPartyLeader'),
          n = this.get('_previousPartyLeaderId');
        a && n !== t && !!n && !this.get('_hasPlayedLeaderSound')
          ? (this.get('chatService').sendChatMessage(
              this.get('tra.parties_promoted_to_leader_chat_notification'),
              this.get('chatConversationId'),
            ),
            this.playSound(
              '/fe/lol-parties/sfx-lobby-notif-captain-granted.ogg',
            ),
            this.set('_hasPlayedLeaderSound', !0))
          : !a && this.set('_hasPlayedLeaderSound', !1),
          this.set('_previousPartyLeaderId', e);
      },
      initializeObservedObjects: s.Ember.on('didInsertElement', function () {
        this.get('matchmakingService.isSearching'),
          this.get('matchmakingService.isLowPriorityQueue'),
          this.get('matchmakingService.hasLowPriorityPenaltyTimeRemaining'),
          this.autoFillEligibleObserver();
      }),
      autoFillEligibleObserver: s.Ember.observer(
        'autoFillEligible',
        function () {
          s.Ember.run.once(this, function () {
            !this.get('_showingAutofillModal') &&
              this.get('autoFillEligible') &&
              (this.set('_showingAutofillModal', !0),
              this.get('partySettings')
                .shouldHideAutofillModal()
                .then((e) => {
                  e
                    ? this.set('_showingAutofillModal', !1)
                    : this.showAutoFillSettingModal();
                }));
          });
        },
      ),
      showAutoFillSettingModal: function () {
        const e = s.ComponentFactory.create('AutofillSettingComponent', {
            partySettings: this.get('partySettings'),
          }),
          t = e.domNode,
          a = this.get('ModalManager').add({
            type: 'DialogAlert',
            data: {
              contents: t,
              okText: this.get('tra.parties_autofill_settings_dialog_confirm'),
            },
          });
        return (
          a.domNode.classList.add('parties-autofill-eligible-modal'),
          a.okPromise.then(() => {
            this.get('partySettings').set('sessionHideAutofillModal', !0),
              this.set('_showingAutofillModal', !1);
          }),
          a
        );
      },
      lowPriorityNotificationObserver: s.Ember.observer(
        'matchmakingService.isSearching',
        function () {
          const e = this.get('selfLowPriorityModal');
          this.get('matchmakingService.isSearching') &&
          this.get('matchmakingService.isLowPriorityQueue')
            ? this.showLowPriorityNotification()
            : e &&
              (this.removeModal(e), this.set('selfLowPriorityModal', void 0));
        },
      ),
      lowPriorityNotificationRemovalObserver: s.Ember.observer(
        'matchmakingService.hasLowPriorityPenaltyTimeRemaining',
        function () {
          const e = this.get('selfLowPriorityModal'),
            t = this.get(
              'matchmakingService.hasLowPriorityPenaltyTimeRemaining',
            );
          e && !t && this.removeModal(e);
        },
      ),
      showLowPriorityNotification: function () {
        this.get('matchmakingService.isQueueDelay') &&
        this.get('isCurrentPlayerPartyLeader')
          ? this.showQueueDelayToast()
          : this.get('matchmakingService.isSelfInLowPriorityQueue')
          ? !this.get('selfLowPriorityModal') && this.showSelfLowPriorityModal()
          : 0 <
              this.get(
                'matchmakingService.lowPriorityData.penaltyTimeRemaining',
              ) && this.showLowPriorityToast();
      },
      showLowPriorityToast: function () {
        const e = this.get(
          'matchmakingService.lowPriorityData.penalizedSummonerIds',
        );
        if (e && !(1 > e.length)) {
          const t = e.map((e) => this.get('summonerService').getSummoner(e));
          i.default.all(t).then((e) => {
            const t = s.ComponentFactory.create(
              'LowPriorityQueueToastComponent',
              { penalizedPlayerNames: s.lodash.map(e, 'displayName') },
            );
            this.get('ToastManager').add({
              type: 'DialogToast',
              data: { contents: t.domNode },
              onRemove: () => t.onRemove(),
            });
          });
        }
      },
      showSelfLowPriorityModal: function () {
        const e = s.ComponentFactory.create('LowPriorityQueueModalComponent'),
          t = this.showModal({
            type: 'DialogAlert',
            data: {
              contents: e.domNode,
              okText: this.get('tra.low_priority_queue_modal_leave_queue'),
              onOk: () => {
                this.get('lobbiesService').cancelMatchmakingSearch(),
                  this.set('selfLowPriorityModal', void 0),
                  e.onRemove();
              },
            },
          });
        this.set('selfLowPriorityModal', t);
      },
      showQueueDelayToast: function () {
        const e = s.UIKit.getTemplateHelper(),
          t = e.contentBlockTooltip(
            this.get('tra.low_priority_queue_delay_warning_header'),
            this.get('tra.low_priority_queue_delay_warning_body'),
            'notification',
          );
        this.get('ToastManager').add({
          type: 'DialogToast',
          data: { contents: t },
        });
      },
      actions: {
        backButtonClick: function () {
          this.get('backButtonDisabled') || this.sendAction('showGameSelect');
        },
        showInviteModal: function () {
          this.sendAction('showInviteModal');
        },
      },
      showPositionSelector: s.Ember.computed.alias(
        'lobbiesService.showPositionSelector',
      ),
      autoFillEligible: s.Ember.computed.alias(
        'currentPlayer.autoFillEligible',
      ),
      autoFillProtectedForStreaking: s.Ember.computed.alias(
        'currentPlayer.autoFillProtectedForStreaking',
      ),
      autoFillProtectedForPromos: s.Ember.computed.alias(
        'currentPlayer.autoFillProtectedForPromos',
      ),
      autoFillProtectedForSoloing: s.Ember.computed.alias(
        'currentPlayer.autoFillProtectedForSoloing',
      ),
      chatConversationId: s.Ember.computed.alias(
        'lobbiesService.chatConversationId',
      ),
      autoFillProtected: s.Ember.computed.or(
        'autoFillProtectedForPromos',
        'autoFillProtectedForSoloing',
        'autoFillProtectedForStreaking',
      ),
      canStartMatchmaking: s.Ember.computed.alias(
        'lobbiesService.canStartMatchmaking',
      ),
      premadeSizeAllowed: s.Ember.computed.alias(
        'lobbiesService.premadeSizeAllowed',
      ),
      allowablePremadeSizes: s.Ember.computed.alias(
        'lobbiesService.allowablePremadeSizes',
      ),
      currentPartySize: s.Ember.computed.alias(
        'lobbiesService.currentPartySize',
      ),
      allMembersHaveSelectedPositions: s.Ember.computed(
        'currentTeamIsFull',
        'currentPartyMembers.@each.firstPositionPreference',
        'currentPartyMembers.@each.secondPositionPreference',
        function () {
          const e = this.get('currentPartyMembers') || [],
            t = this.get('currentTeamIsFull'),
            a = !e.some(function (e) {
              const a = e.get('firstPositionPreference');
              let n = !1;
              if (!t && a !== u) {
                const t = e.get('secondPositionPreference');
                n = !t || t === p;
              }
              return !a || a === p || n;
            });
          return a;
        },
      ),
      notDraftPick: s.Ember.computed.not('showPositionSelector'),
      hidePositionWarning: s.Ember.computed.or(
        'matchmakingService.isInQueue',
        'currentTeamIsFull',
        'notDraftPick',
      ),
      positionWarning: s.Ember.computed(
        'autoFillEligible',
        'autoFillProtected',
        'hidePositionWarning',
        'tra.ready',
        'tra.parties_autofill_activated',
        'tra.parties_autofill_protected',
        function () {
          if (!this.get('hidePositionWarning'))
            return this.get('autoFillEligible')
              ? this.get('tra.parties_autofill_activated')
              : this.get('autoFillProtected')
              ? this.get('tra.parties_autofill_protected')
              : void 0;
        },
      ),
      notInParty: s.Ember.computed.not('inParty'),
      hideReadyWarning: s.Ember.computed.or(
        'notInParty',
        'canStartMatchmaking',
        'matchmakingService.isInQueue',
      ),
      readyWarningTooltip: s.Ember.computed(
        'currentPartyMembers.[]',
        'currentPartyMembers.@each.ready',
        'hideReadyWarning',
        'tra.ready',
        'tra.parties_ready_warning_tooltip',
        function () {
          if (!this.get('hideReadyWarning')) {
            const e = [],
              t = this.get('currentPartyMembers');
            for (let a = 0; a < t.length; a++) {
              const n = t[a];
              n.ready || e.push(n.summonerName);
            }
            if (!s.lodash.isEmpty(e)) {
              const t = this.get('tra.formatString');
              return t('parties_ready_warning_tooltip', {
                notReadyMemberNames: e.join(', '),
              });
            }
          }
        },
      ),
      readyWarning: s.Ember.computed(
        'readyWarningTooltip',
        'tra.ready',
        'tra.parties_ready_warning',
        function () {
          const e = this.get('readyWarningTooltip');
          if (e && 0 < e.length) return this.get('tra.parties_ready_warning');
        },
      ),
      positionError: s.Ember.computed(
        'matchmakingService.isInQueue',
        'canStartMatchmaking',
        'showPositionSelector',
        'tra.ready',
        'tra.game_select_queue_restriction_party_canStartMatchmaking',
        'allMembersHaveSelectedPositions',
        function () {
          return this.get('showPositionSelector') &&
            !this.get('matchmakingService.isInQueue') &&
            !this.get('canStartMatchmaking') &&
            this.get('allMembersHaveSelectedPositions')
            ? this.get(
                'tra.game_select_queue_restriction_party_canStartMatchmaking',
              )
            : '';
        },
      ),
    });
  },
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    (t.BANNER_TYPES = {
      CURRENT_PLAYER: 'current-player',
      OTHER_PLAYER: 'other-player',
      INVITED_PLACEHOLDER: 'invited-placeholder',
      EMPTY_PLACEHOLDER: 'empty-placeholder',
    }),
      (t.BANNER_VIDEO_STATES = {
        INTRO: 'intro',
        IDLE: 'idle',
        INVITED: 'invited',
        OWNER_INTRO: 'ownerIntro',
        EMPTY: 'empty',
        LEFT: 'left',
      });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(27),
      i = n(o),
      s = a(439),
      l = n(s),
      r = a(0);
    e.exports = r.Ember.Mixin.create({
      chatParticipants: r.Ember.computed.alias(
        'lobbiesService.chatParticipantsObserver',
      ),
      myChatParticipant: r.Ember.computed(
        'chatParticipants.[]',
        'chatParticipants.@each.id',
        'chatParticipants.@each.availability',
        'chatParticipants.@each.icon',
        'chatParticipants.@each.lol.companionId',
        function () {
          const e = this.get('chatParticipants');
          return e
            ? e.findBy('summonerId', this.get('member.summonerId'))
            : null;
        },
      ),
      _chatIcon: r.Ember.computed.alias('myChatParticipant.icon'),
      _chatAvailability: r.Ember.computed.alias(
        'myChatParticipant.availability',
      ),
      profileIconId: r.Ember.computed(
        'member.summonerIconId',
        '_chatIcon',
        function () {
          const e = this.get('_chatIcon');
          return (0, l.default)(e) ? e : this.get('member.summonerIconId');
        },
      ),
      companionIconId: r.Ember.computed(
        'chatParticipants',
        'lobbiesService.me.lol.companionId',
        'myChatParticipant.lol.companionId',
        function () {
          const e = this.get('chatParticipants');
          return e
            ? +this.get('myChatParticipant.lol.companionId')
            : +this.get('lobbiesService.me.lol.companionId');
        },
      ),
      mapSkinIconId: r.Ember.computed(
        'chatParticipants',
        'lobbiesService.me.lol.mapSkinId',
        'myChatParticipant.lol.mapSkinId',
        function () {
          const e = this.get('chatParticipants');
          return e
            ? +this.get('myChatParticipant.lol.mapSkinId')
            : +this.get('lobbiesService.me.lol.mapSkinId');
        },
      ),
      damageSkinIconId: r.Ember.computed(
        'chatParticipants',
        'lobbiesService.me.lol.damageSkinId',
        'myChatParticipant.lol.damageSkinId',
        function () {
          const e = this.get('chatParticipants');
          return e
            ? +this.get('myChatParticipant.lol.damageSkinId')
            : +this.get('lobbiesService.me.lol.damageSkinId');
        },
      ),
      chatIconOverride: r.Ember.computed(
        'myChatParticipant.lol.iconOverride',
        function () {
          return this.get('myChatParticipant.lol.iconOverride');
        },
      ),
      profileIconUrl: r.Ember.computed(
        'profileIconId',
        '_profileIcons',
        function () {
          const e = 'src/images/lobby/player-object-ring-obfuscated.png',
            t = this.get('_profileIcons'),
            a = this.get('profileIconId');
          if (!t || !(0, l.default)(a)) return e;
          var n = !0,
            o = !1,
            s = void 0;
          try {
            for (
              var r = (0, i.default)(t), c;
              !(n = (c = r.next()).done);
              n = !0
            ) {
              const e = c.value;
              if (e.id === a) return e.imagePath;
            }
          } catch (e) {
            (o = !0), (s = e);
          } finally {
            try {
              !n && r.return && r.return();
            } finally {
              if (o) throw s;
            }
          }
          return e;
        },
      ),
    });
  },
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    t.friendsWithSummonerNamesCount = (e) => {
      const t = e.filter((e) => !!(e && '' !== e.name));
      return t.length;
    };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = n(o),
      s = a(127),
      l = n(s);
    (function () {
      const e = document.currentScript.ownerDocument,
        t = window.getPluginAnnounceEventName('rcp-fe-lol-parties');
      e.addEventListener(
        t,
        function (t) {
          const n = t.registrationHandler;
          l.default.set(e),
            n((t) =>
              i.default
                .init(t, {
                  Ember: (e) => e.get('rcp-fe-ember-libs').getEmber(),
                  emberDataBinding: (e) =>
                    e
                      .get('rcp-fe-ember-libs')
                      .getEmberDataBinding('rcp-fe-lol-parties'),
                  bluebird: (e) => e.get('rcp-fe-common-libs').getBluebird(3),
                  ComponentFactory: (e) =>
                    e.get('rcp-fe-common-libs').getComponentFactory('1'),
                  lodash: (e) => e.get('rcp-fe-common-libs').getLodash(4),
                  dataBinding: (e) =>
                    e
                      .get('rcp-fe-common-libs')
                      .getDataBinding('rcp-fe-lol-parties'),
                  Telemetry: (e) => e.get('rcp-fe-common-libs').getTelemetry(1),
                  debug: (e) => e.get('rcp-fe-common-libs').getDebug(1),
                  Audio: (e) => e.get('rcp-fe-audio'),
                  UIKit: (e) => e.get('rcp-fe-lol-uikit'),
                  SharedComponents: (e) =>
                    e.get('rcp-fe-lol-shared-components'),
                  SharedEmberComponents: (e) =>
                    e
                      .get('rcp-fe-lol-shared-components')
                      .getSharedEmberComponents(),
                  Viewport: (e) =>
                    e.get('rcp-fe-lol-shared-components').getApi_Viewport(),
                  Navigation: (e) => e.get('rcp-fe-lol-navigation'),
                  HomeRegistry: (e) =>
                    e.get('rcp-fe-lol-shared-components').getApi_HomeRegistry(),
                  UXSettings: (e) =>
                    e.get('rcp-fe-lol-shared-components').getApi_UXSettings(),
                  LeagueTierNames: (e) =>
                    e
                      .get('rcp-fe-lol-shared-components')
                      .getApi_LeagueTierNames(),
                  lottie: (e) => e.get('rcp-fe-common-libs').getLottie('1'),
                  webComponents: (t) =>
                    t.get('rcp-fe-common-libs').getWebComponents(e),
                  FlyoutManager: (e) =>
                    e.get('rcp-fe-lol-uikit').getFlyoutManager(),
                  moment: (e) => e.get('rcp-fe-lol-l10n').moment(),
                  Router: (e) =>
                    e.get('rcp-fe-lol-shared-components').getApi_Router(),
                  gsap: (e) => e.get('rcp-fe-common-libs').getGsap('1'),
                  tra: (e) =>
                    e
                      .get('rcp-fe-lol-l10n')
                      .tra()
                      .overlay('/fe/lol-l10n/trans.json')
                      .overlay('/fe/lol-parties/trans.json')
                      .overlay('/fe/lol-social/trans.json')
                      .overlay(
                        '/fe/lol-shared-components/trans-challenges.json',
                      ),
                })
                .then(() => {
                  const e = i.default.debug,
                    t = e('rcp-fe-lol-parties:warn'),
                    a = e('rcp-fe-lol-parties:error');
                  return i.default.add({
                    EmberApplicationFactory: (e) =>
                      e.get('rcp-fe-ember-libs').getEmberApplicationFactory(),
                    EmberAddons: (e) =>
                      e
                        .get('rcp-fe-lol-shared-components')
                        .getSharedEmberAddons(),
                    logWarning: () => t,
                    logError: () => a,
                  });
                })
                .then(() => {
                  const e = a(128);
                  e();
                  const t = a(271),
                    n = new t();
                  i.default.add({ PartyAPI: n });
                  const o = i.default.HomeRegistry;
                  return o.resolvePartiesHandler(() => n.show()), n;
                }),
            );
        },
        { once: !0 },
      );
    })();
  },
  function (e, t, a) {
    (function (n) {
      function o(e) {
        var a = this.useColors;
        if (
          ((e[0] =
            (a ? '%c' : '') +
            this.namespace +
            (a ? ' %c' : ' ') +
            e[0] +
            (a ? '%c ' : ' ') +
            '+' +
            t.humanize(this.diff)),
          !!a)
        ) {
          var n = 'color: ' + this.color;
          e.splice(1, 0, n, 'color: inherit');
          var o = 0,
            i = 0;
          e[0].replace(/%[a-zA-Z%]/g, function (e) {
            '%%' === e || (o++, '%c' === e && (i = o));
          }),
            e.splice(i, 0, n);
        }
      }
      function i(e) {
        try {
          null == e ? t.storage.removeItem('debug') : (t.storage.debug = e);
        } catch (t) {}
      }
      function s() {
        var e;
        try {
          e = t.storage.debug;
        } catch (t) {}
        return (
          !e && 'undefined' != typeof n && 'env' in n && (e = n.env.DEBUG), e
        );
      }
      (t = e.exports = a(122)),
        (t.log = function () {
          return (
            'object' == typeof console &&
            console.log &&
            Function.prototype.apply.call(console.log, console, arguments)
          );
        }),
        (t.formatArgs = o),
        (t.save = i),
        (t.load = s),
        (t.useColors = function () {
          return (
            !!(
              'undefined' != typeof window &&
              window.process &&
              'renderer' === window.process.type
            ) ||
            ('undefined' != typeof document &&
              document.documentElement &&
              document.documentElement.style &&
              document.documentElement.style.WebkitAppearance) ||
            ('undefined' != typeof window &&
              window.console &&
              (window.console.firebug ||
                (window.console.exception && window.console.table))) ||
            ('undefined' != typeof navigator &&
              navigator.userAgent &&
              navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
              31 <= parseInt(RegExp.$1, 10)) ||
            ('undefined' != typeof navigator &&
              navigator.userAgent &&
              navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
          );
        }),
        (t.storage =
          'undefined' != typeof chrome && 'undefined' != typeof chrome.storage
            ? chrome.storage.local
            : (function () {
                try {
                  return window.localStorage;
                } catch (t) {}
              })()),
        (t.colors = [
          'lightseagreen',
          'forestgreen',
          'goldenrod',
          'dodgerblue',
          'darkorchid',
          'crimson',
        ]),
        (t.formatters.j = function (e) {
          try {
            return JSON.stringify(e);
          } catch (e) {
            return '[UnexpectedJSONParseError]: ' + e.message;
          }
        }),
        t.enable(s());
    }.call(t, a(81)));
  },
  function (e, t, a) {
    function n(e) {
      var a = 0,
        n;
      for (n in e) (a = (a << 5) - a + e.charCodeAt(n)), (a |= 0);
      return t.colors[Math.abs(a) % t.colors.length];
    }
    function o(e) {
      function a() {
        if (a.enabled) {
          var e = a,
            n = +new Date(),
            o = n - (r || n);
          (e.diff = o), (e.prev = r), (e.curr = n), (r = n);
          for (var s = Array(arguments.length), l = 0; l < s.length; l++)
            s[l] = arguments[l];
          (s[0] = t.coerce(s[0])), 'string' != typeof s[0] && s.unshift('%O');
          var i = 0;
          (s[0] = s[0].replace(/%([a-zA-Z%])/g, function (a, n) {
            if ('%%' === a) return a;
            i++;
            var o = t.formatters[n];
            if ('function' == typeof o) {
              var l = s[i];
              (a = o.call(e, l)), s.splice(i, 1), i--;
            }
            return a;
          })),
            t.formatArgs.call(e, s);
          var c = a.log || t.log || console.log.bind(console);
          c.apply(e, s);
        }
      }
      return (
        (a.namespace = e),
        (a.enabled = t.enabled(e)),
        (a.useColors = t.useColors()),
        (a.color = n(e)),
        'function' == typeof t.init && t.init(a),
        a
      );
    }
    function i(e) {
      t.save(e), (t.names = []), (t.skips = []);
      for (
        var a = ('string' == typeof e ? e : '').split(/[\s,]+/),
          n = a.length,
          o = 0;
        o < n;
        o++
      )
        a[o] &&
          ((e = a[o].replace(/\*/g, '.*?')),
          '-' === e[0]
            ? t.skips.push(new RegExp('^' + e.substr(1) + '$'))
            : t.names.push(new RegExp('^' + e + '$')));
    }
    function s() {
      t.enable('');
    }
    function l(e) {
      var a, n;
      for (a = 0, n = t.skips.length; a < n; a++)
        if (t.skips[a].test(e)) return !1;
      for (a = 0, n = t.names.length; a < n; a++)
        if (t.names[a].test(e)) return !0;
      return !1;
    }
    (t = e.exports = o.debug = o['default'] = o),
      (t.coerce = function (e) {
        return e instanceof Error ? e.stack || e.message : e;
      }),
      (t.disable = s),
      (t.enable = i),
      (t.enabled = l),
      (t.humanize = a(123)),
      (t.names = []),
      (t.skips = []),
      (t.formatters = {});
    var r;
  },
  function (e) {
    function t(e) {
      if (((e += ''), !(100 < e.length))) {
        var t =
          /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
            e,
          );
        if (t) {
          var a = parseFloat(t[1]),
            n = (t[2] || 'ms').toLowerCase();
          return 'years' === n ||
            'year' === n ||
            'yrs' === n ||
            'yr' === n ||
            'y' === n
            ? a * p
            : 'weeks' === n || 'week' === n || 'w' === n
            ? a * d
            : 'days' === n || 'day' === n || 'd' === n
            ? a * m
            : 'hours' === n ||
              'hour' === n ||
              'hrs' === n ||
              'hr' === n ||
              'h' === n
            ? a * c
            : 'minutes' === n ||
              'minute' === n ||
              'mins' === n ||
              'min' === n ||
              'm' === n
            ? a * s
            : 'seconds' === n ||
              'second' === n ||
              'secs' === n ||
              'sec' === n ||
              's' === n
            ? a * r
            : 'milliseconds' === n ||
              'millisecond' === n ||
              'msecs' === n ||
              'msec' === n ||
              'ms' === n
            ? a
            : void 0;
        }
      }
    }
    function a(e) {
      var t = l(e);
      return t >= m
        ? i(e / m) + 'd'
        : t >= c
        ? i(e / c) + 'h'
        : t >= s
        ? i(e / s) + 'm'
        : t >= r
        ? i(e / r) + 's'
        : e + 'ms';
    }
    function n(e) {
      var t = l(e);
      return t >= m
        ? o(e, t, m, 'day')
        : t >= c
        ? o(e, t, c, 'hour')
        : t >= s
        ? o(e, t, s, 'minute')
        : t >= r
        ? o(e, t, r, 'second')
        : e + ' ms';
    }
    function o(e, t, a, n) {
      return i(e / a) + ' ' + n + (t >= 1.5 * a ? 's' : '');
    }
    var i = Math.round,
      l = Math.abs,
      r = 1e3,
      s = 60 * r,
      c = 60 * s,
      m = 24 * c,
      d = 7 * m,
      p = 365.25 * m;
    e.exports = function (e, o) {
      o = o || {};
      var i = typeof e;
      if ('string' == i && 0 < e.length) return t(e);
      if ('number' == i && !1 === isNaN(e)) return o.long ? n(e) : a(e);
      throw new Error(
        'val is not a non-empty string or a valid number. val=' +
          JSON.stringify(e),
      );
    };
  },
  function (e, t, a) {
    (function (e) {
      function n(e, a) {
        var n = { seen: [], stylize: i };
        return (
          3 <= arguments.length && (n.depth = arguments[2]),
          4 <= arguments.length && (n.colors = arguments[3]),
          g(a) ? (n.showHidden = a) : a && t._extend(n, a),
          f(n.showHidden) && (n.showHidden = !1),
          f(n.depth) && (n.depth = 2),
          f(n.colors) && (n.colors = !1),
          f(n.customInspect) && (n.customInspect = !0),
          n.colors && (n.stylize = o),
          l(n, e, n.depth)
        );
      }
      function o(e, t) {
        var a = n.styles[t];
        return a
          ? '\x1B[' + n.colors[a][0] + 'm' + e + '\x1B[' + n.colors[a][1] + 'm'
          : e;
      }
      function i(e) {
        return e;
      }
      function s(e) {
        var t = {};
        return (
          e.forEach(function (e) {
            t[e] = !0;
          }),
          t
        );
      }
      function l(e, a, o) {
        if (
          e.customInspect &&
          a &&
          E(a.inspect) &&
          a.inspect !== t.inspect &&
          !(a.constructor && a.constructor.prototype === a)
        ) {
          var i = a.inspect(o, e);
          return y(i) || (i = l(e, i, o)), i;
        }
        var g = r(e, a);
        if (g) return g;
        var b = Object.keys(a),
          h = s(b);
        if (
          (e.showHidden && (b = Object.getOwnPropertyNames(a)),
          x(a) && (0 <= b.indexOf('message') || 0 <= b.indexOf('description')))
        )
          return c(a);
        if (0 === b.length) {
          if (E(a)) {
            var f = a.name ? ': ' + a.name : '';
            return e.stylize('[Function' + f + ']', 'special');
          }
          if (_(a))
            return e.stylize(RegExp.prototype.toString.call(a), 'regexp');
          if (S(a)) return e.stylize(Date.prototype.toString.call(a), 'date');
          if (x(a)) return c(a);
        }
        var v = '',
          k = !1,
          C = ['{', '}'];
        if ((u(a) && ((k = !0), (C = ['[', ']'])), E(a))) {
          var I = a.name ? ': ' + a.name : '';
          v = ' [Function' + I + ']';
        }
        if (
          (_(a) && (v = ' ' + RegExp.prototype.toString.call(a)),
          S(a) && (v = ' ' + Date.prototype.toUTCString.call(a)),
          x(a) && (v = ' ' + c(a)),
          0 === b.length && (!k || 0 == a.length))
        )
          return C[0] + v + C[1];
        if (0 > o)
          return _(a)
            ? e.stylize(RegExp.prototype.toString.call(a), 'regexp')
            : e.stylize('[Object]', 'special');
        e.seen.push(a);
        var n;
        return (
          (n = k
            ? m(e, a, o, h, b)
            : b.map(function (t) {
                return d(e, a, o, h, t, k);
              })),
          e.seen.pop(),
          p(n, v, C)
        );
      }
      function r(e, t) {
        if (f(t)) return e.stylize('undefined', 'undefined');
        if (y(t)) {
          var a =
            "'" +
            JSON.stringify(t)
              .replace(/^"|"$/g, '')
              .replace(/'/g, "\\'")
              .replace(/\\"/g, '"') +
            "'";
          return e.stylize(a, 'string');
        }
        return h(t)
          ? e.stylize('' + t, 'number')
          : g(t)
          ? e.stylize('' + t, 'boolean')
          : b(t)
          ? e.stylize('null', 'null')
          : void 0;
      }
      function c(e) {
        return '[' + Error.prototype.toString.call(e) + ']';
      }
      function m(e, t, a, n, o) {
        for (var s = [], r = 0, i = t.length; r < i; ++r)
          P(t, r + '') ? s.push(d(e, t, a, n, r + '', !0)) : s.push('');
        return (
          o.forEach(function (o) {
            o.match(/^\d+$/) || s.push(d(e, t, a, n, o, !0));
          }),
          s
        );
      }
      function d(e, t, a, n, o, i) {
        var s, r, c;
        if (
          ((c = Object.getOwnPropertyDescriptor(t, o) || { value: t[o] }),
          c.get
            ? c.set
              ? (r = e.stylize('[Getter/Setter]', 'special'))
              : (r = e.stylize('[Getter]', 'special'))
            : c.set && (r = e.stylize('[Setter]', 'special')),
          P(n, o) || (s = '[' + o + ']'),
          r ||
            (0 > e.seen.indexOf(c.value)
              ? ((r = b(a) ? l(e, c.value, null) : l(e, c.value, a - 1)),
                -1 < r.indexOf('\n') &&
                  (i
                    ? (r = r
                        .split('\n')
                        .map(function (e) {
                          return '  ' + e;
                        })
                        .join('\n')
                        .substr(2))
                    : (r =
                        '\n' +
                        r
                          .split('\n')
                          .map(function (e) {
                            return '   ' + e;
                          })
                          .join('\n'))))
              : (r = e.stylize('[Circular]', 'special'))),
          f(s))
        ) {
          if (i && o.match(/^\d+$/)) return r;
          (s = JSON.stringify('' + o)),
            s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)
              ? ((s = s.substr(1, s.length - 2)), (s = e.stylize(s, 'name')))
              : ((s = s
                  .replace(/'/g, "\\'")
                  .replace(/\\"/g, '"')
                  .replace(/(^"|"$)/g, "'")),
                (s = e.stylize(s, 'string')));
        }
        return s + ': ' + r;
      }
      function p(e, t, a) {
        var n = 0,
          o = e.reduce(function (e, t) {
            return (
              n++,
              0 <= t.indexOf('\n') && n++,
              e + t.replace(/\u001b\[\d\d?m/g, '').length + 1
            );
          }, 0);
        return 60 < o
          ? a[0] +
              ('' === t ? '' : t + '\n ') +
              ' ' +
              e.join(',\n  ') +
              ' ' +
              a[1]
          : a[0] + t + ' ' + e.join(', ') + ' ' + a[1];
      }
      function u(e) {
        return Array.isArray(e);
      }
      function g(e) {
        return 'boolean' == typeof e;
      }
      function b(e) {
        return null === e;
      }
      function h(e) {
        return 'number' == typeof e;
      }
      function y(e) {
        return 'string' == typeof e;
      }
      function f(e) {
        return void 0 === e;
      }
      function _(e) {
        return v(e) && '[object RegExp]' === k(e);
      }
      function v(e) {
        return 'object' == typeof e && null !== e;
      }
      function S(e) {
        return v(e) && '[object Date]' === k(e);
      }
      function x(t) {
        return v(t) && ('[object Error]' === k(t) || t instanceof Error);
      }
      function E(e) {
        return 'function' == typeof e;
      }
      function k(e) {
        return Object.prototype.toString.call(e);
      }
      function C(e) {
        return 10 > e ? '0' + e.toString(10) : e.toString(10);
      }
      function I() {
        var e = new Date(),
          t = [C(e.getHours()), C(e.getMinutes()), C(e.getSeconds())].join(':');
        return [e.getDate(), A[e.getMonth()], t].join(' ');
      }
      function P(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }
      function T(e, t) {
        if (!e) {
          var a = new Error('Promise was rejected with a falsy value');
          (a.reason = e), (e = a);
        }
        return t(e);
      }
      var w =
          Object.getOwnPropertyDescriptors ||
          function (e) {
            for (var t = Object.keys(e), a = {}, n = 0; n < t.length; n++)
              a[t[n]] = Object.getOwnPropertyDescriptor(e, t[n]);
            return a;
          },
        R = /%[sdj%]/g;
      (t.format = function (e) {
        if (!y(e)) {
          for (var t = [], a = 0; a < arguments.length; a++)
            t.push(n(arguments[a]));
          return t.join(' ');
        }
        for (
          var a = 1,
            o = arguments,
            i = o.length,
            s = (e + '').replace(R, function (e) {
              if ('%%' === e) return '%';
              if (a >= i) return e;
              switch (e) {
                case '%s':
                  return o[a++] + '';
                case '%d':
                  return +o[a++];
                case '%j':
                  try {
                    return JSON.stringify(o[a++]);
                  } catch (e) {
                    return '[Circular]';
                  }
                default:
                  return e;
              }
            }),
            l = o[a];
          a < i;
          l = o[++a]
        )
          s += b(l) || !v(l) ? ' ' + l : ' ' + n(l);
        return s;
      }),
        (t.deprecate = function (a, n) {
          function o() {
            if (!i) {
              if (e.throwDeprecation) throw new Error(n);
              else e.traceDeprecation ? console.trace(n) : console.error(n);
              i = !0;
            }
            return a.apply(this, arguments);
          }
          if ('undefined' != typeof e && !0 === e.noDeprecation) return a;
          if ('undefined' == typeof e)
            return function () {
              return t.deprecate(a, n).apply(this, arguments);
            };
          var i = !1;
          return o;
        });
      var L = {},
        M;
      (t.debuglog = function (a) {
        if (
          (f(M) && (M = e.env.NODE_DEBUG || ''), (a = a.toUpperCase()), !L[a])
        )
          if (new RegExp('\\b' + a + '\\b', 'i').test(M)) {
            var n = e.pid;
            L[a] = function () {
              var e = t.format.apply(t, arguments);
              console.error('%s %d: %s', a, n, e);
            };
          } else L[a] = function () {};
        return L[a];
      }),
        (t.inspect = n),
        (n.colors = {
          bold: [1, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          white: [37, 39],
          grey: [90, 39],
          black: [30, 39],
          blue: [34, 39],
          cyan: [36, 39],
          green: [32, 39],
          magenta: [35, 39],
          red: [31, 39],
          yellow: [33, 39],
        }),
        (n.styles = {
          special: 'cyan',
          number: 'yellow',
          boolean: 'yellow',
          undefined: 'grey',
          null: 'bold',
          string: 'green',
          date: 'magenta',
          regexp: 'red',
        }),
        (t.isArray = u),
        (t.isBoolean = g),
        (t.isNull = b),
        (t.isNullOrUndefined = function (e) {
          return null == e;
        }),
        (t.isNumber = h),
        (t.isString = y),
        (t.isSymbol = function (e) {
          return 'symbol' == typeof e;
        }),
        (t.isUndefined = f),
        (t.isRegExp = _),
        (t.isObject = v),
        (t.isDate = S),
        (t.isError = x),
        (t.isFunction = E),
        (t.isPrimitive = function (e) {
          return (
            null === e ||
            'boolean' == typeof e ||
            'number' == typeof e ||
            'string' == typeof e ||
            'symbol' == typeof e ||
            'undefined' == typeof e
          );
        }),
        (t.isBuffer = a(125));
      var A = [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec',
      ];
      (t.log = function () {
        console.log('%s - %s', I(), t.format.apply(t, arguments));
      }),
        (t.inherits = a(126)),
        (t._extend = function (e, t) {
          if (!t || !v(t)) return e;
          for (var a = Object.keys(t), n = a.length; n--; ) e[a[n]] = t[a[n]];
          return e;
        });
      var D =
        'undefined' == typeof Symbol ? void 0 : Symbol('util.promisify.custom');
      (t.promisify = function (e) {
        function t() {
          for (
            var a = new Promise(function (e, t) {
                (i = e), (s = t);
              }),
              n = [],
              o = 0,
              i,
              s;
            o < arguments.length;
            o++
          )
            n.push(arguments[o]);
          n.push(function (e, t) {
            e ? s(e) : i(t);
          });
          try {
            e.apply(this, n);
          } catch (e) {
            s(e);
          }
          return a;
        }
        if ('function' != typeof e)
          throw new TypeError(
            'The "original" argument must be of type Function',
          );
        if (D && e[D]) {
          var t = e[D];
          if ('function' != typeof t)
            throw new TypeError(
              'The "util.promisify.custom" argument must be of type Function',
            );
          return (
            Object.defineProperty(t, D, {
              value: t,
              enumerable: !1,
              writable: !1,
              configurable: !0,
            }),
            t
          );
        }
        return (
          Object.setPrototypeOf(t, Object.getPrototypeOf(e)),
          D &&
            Object.defineProperty(t, D, {
              value: t,
              enumerable: !1,
              writable: !1,
              configurable: !0,
            }),
          Object.defineProperties(t, w(e))
        );
      }),
        (t.promisify.custom = D),
        (t.callbackify = function (t) {
          function a() {
            for (var a = [], n = 0; n < arguments.length; n++)
              a.push(arguments[n]);
            var o = a.pop();
            if ('function' != typeof o)
              throw new TypeError('The last argument must be of type Function');
            var i = this,
              s = function () {
                return o.apply(i, arguments);
              };
            t.apply(this, a).then(
              function (t) {
                e.nextTick(s, null, t);
              },
              function (t) {
                e.nextTick(T, t, s);
              },
            );
          }
          if ('function' != typeof t)
            throw new TypeError(
              'The "original" argument must be of type Function',
            );
          return (
            Object.setPrototypeOf(a, Object.getPrototypeOf(t)),
            Object.defineProperties(a, w(t)),
            a
          );
        });
    }.call(t, a(81)));
  },
  function (e) {
    e.exports = function (e) {
      return (
        e &&
        'object' == typeof e &&
        'function' == typeof e.copy &&
        'function' == typeof e.fill &&
        'function' == typeof e.readUInt8
      );
    };
  },
  function (e) {
    e.exports =
      'function' == typeof Object.create
        ? function (e, t) {
            (e.super_ = t),
              (e.prototype = Object.create(t.prototype, {
                constructor: {
                  value: e,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0,
                },
              }));
          }
        : function (e, t) {
            e.super_ = t;
            var a = function () {};
            (a.prototype = t.prototype),
              (e.prototype = new a()),
              (e.prototype.constructor = e);
          };
  },
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    t.default = new (class {
      constructor() {
        this.subDoc = document;
      }
      set(e) {
        this.subDoc = e;
      }
      get() {
        return this.subDoc;
      }
    })();
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(129),
      i = n(o),
      s = a(132),
      l = n(s),
      r = a(193),
      c = n(r),
      m = a(219),
      d = n(m),
      p = a(224),
      u = n(p),
      g = a(231),
      b = n(g),
      h = a(235),
      f = n(h),
      y = a(241),
      _ = n(y),
      v = a(245),
      S = n(v),
      x = a(248),
      E = n(x),
      k = a(256),
      C = n(k),
      I = a(265),
      P = n(I),
      T = a(268),
      w = n(T),
      R = a(0),
      L = a(3),
      M = n(L);
    (0, M.default)('plugin:parties:register-custom-elements:warn');
    e.exports = function (e = document) {
      if (!e.partiesElementsRegistered) {
        const t = R.webComponents.registerCustomElementV1;
        t(i.default),
          t(u.default),
          t(l.default),
          t(d.default),
          t(c.default),
          t(b.default),
          t(f.default),
          t(_.default),
          t(S.default),
          t(E.default),
          t(C.default),
          t(P.default),
          t(w.default),
          (e.partiesElementsRegistered = !0);
      }
    };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(0),
      i = n(o),
      s = a(13),
      l = n(s);
    const r = i.default.getProvider(),
      c = r.getSocket(),
      m = ['default', 'tft'],
      d = 'companions',
      p = 'tft_map_skins',
      u = 'tft_damage_skins',
      g = [d, p, u],
      b = ['right', 'left', 'top'],
      h = { default: [d], tft: [d, p, u] },
      f = {
        companions: {
          default: '/v1/inventories/default/companions',
          tft: '/v1/inventories/tft/companions',
        },
        tft_map_skins: { tft: '/v1/inventories/tft/map-skins' },
        tft_damage_skins: { tft: '/v1/inventories/tft/damage-skins' },
      },
      y = {
        companions: '/v1/selection/companion',
        tft_map_skins: '/v1/selection/tft-map-skin',
        tft_damage_skins: '/v1/selection/tft-damage-skin',
      },
      _ = o.UIKit.getModalManager();
    class v extends o.webComponents.ShadowElement {
      templateMarkup() {
        return a(130);
      }
      stylesheetMarkup() {
        return a(131);
      }
      constructor() {
        super(),
          (this._dataBinding = (0, o.dataBinding)('/lol-cosmetics', c)),
          (this._type = null),
          (this._setName = 'default'),
          (this._subscriber = null),
          (this._showNoneOption = null),
          (this._mouseOverHandler = this._handleMouseOver.bind(this)),
          (this._iconClickHandler = this._handleIconClick.bind(this)),
          (this._orientation = 'left'),
          (this._selectedItemId = null),
          (this._modal = null);
      }
      connectedCallback() {
        super.connectedCallback(),
          this.addEventListener('click', this._iconClickHandler),
          this.addEventListener('mouseover', this._mouseOverHandler),
          this._refreshInventoryBinding();
      }
      disconnectedCallback() {
        super.disconnectedCallback(),
          this.removeEventListener('click', this._iconClickHandler),
          this.removeEventListener('mouseover', this._mouseOverHandler),
          this._dataBinding.unobserve(this);
      }
      static get observedAttributes() {
        return ['type', 'orientation', 'set-name', 'show-none'];
      }
      attributeChangedCallback(e, t, a) {
        'type' === e
          ? this._handleTypeChange(a)
          : 'orientation' === e
          ? this._handleOrientationChange(a)
          : 'set-name' === e
          ? this._handleSetNameChange(a)
          : 'show-none' === e
          ? this._handleShowNoneChange()
          : void 0;
      }
      _handleOrientationChange(e) {
        0 > b.indexOf(e) || e === this._orientation || (this._orientation = e);
      }
      _handleTypeChange(e) {
        0 > g.indexOf(e) ||
          e === this._type ||
          ((this._type = e), this._refreshInventoryBinding());
      }
      _handleSetNameChange(e) {
        0 > m.indexOf(e) ||
          e === this._setName ||
          ((this._setName = e), this._refreshInventoryBinding());
      }
      _refreshInventoryBinding() {
        this._dataBinding.unobserve(this),
          this._dataBinding.observe(
            f[this._type][this._setName],
            this,
            this._handleInventoryChanged,
          );
      }
      _handleShowNoneChange() {
        (this._showNoneOption = this.hasAttribute('show-none')),
          this._updateModalShowNone(this._modal);
      }
      _updateModalShowNone(e) {
        e &&
          (this._showNoneOption
            ? e.setAttribute('show-none', '')
            : e.removeAttribute('show-none'));
      }
      _handleInventoryChanged(e) {
        (this._inventory = e),
          this._inventory &&
            this._inventory.selectedLoadoutItem &&
            this._inventory.selectedLoadoutItem !== this._selectedItemId &&
            this._updateSelectedCompanion(this._inventory.selectedLoadoutItem);
      }
      _updateSelectedCompanion(e) {
        this._selectedItemId = e.itemId;
        const t = this._getIcon();
        if (0 === e.itemId) {
          const e = a(82);
          (t.style.backgroundImage = 'url(' + e + ')'),
            t.classList.add('none-icon');
        } else
          (t.style.backgroundImage = 'url(' + e.loadoutsIcon + ')'),
            t.classList.remove('none-icon');
      }
      _handleMouseOver() {
        this._playSound(l.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER);
      }
      _handleIconClick() {
        this._initModal(),
          this._playSound(l.default.SFX_URLS.SFX_COMPANION_PICKER_CLICK);
      }
      _playSound(e) {
        o.Audio.getChannel(l.default.SFX_CHANNEL).playSound(e);
      }
      _selectCompanion(e) {
        this._updateSelectedCompanion(e),
          0 === e.itemId || e.itemId === this._inventory.defaultItemId
            ? this._dataBinding.delete(y[this._type], e.itemId)
            : this._dataBinding.put(y[this._type], e.itemId);
      }
      _getIcon() {
        return this.shadowRoot.querySelector('div.loadouts-icon');
      }
      _showRenderer() {
        this._modal ||
          (this._modal = document.createElement('lol-parties-loadouts-modal')),
          this._refreshInventoryBinding(),
          this._modal.setAttribute('set-name', this._setName),
          this._modal.setAttribute('types', h[this._setName]),
          this._modal.setAttribute('active-type', this._type),
          this._updateModalShowNone(this._modal),
          (this._modalRoot = _.add({
            type: 'DialogAlert',
            data: {
              contents: this._modal,
              dismissible: !0,
              dismissibleType: 'inside',
            },
          }));
      }
      _initModal() {
        this._showRenderer();
      }
    }
    (v.tagName = 'lol-parties-cosmetics-picker'), (t.default = v);
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-cosmetics-picker">\r\n  <div class="loadouts-icon"></div>\r\n</template>\r\n';
  },
  function (e, t, a) {
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host {\n  --rcp-fe-lol-parties-cosmetics-picker-border-width: 2px;\n}\n:host {\n  display: block;\n}\n:host .loadouts-icon {\n  box-sizing: border-box;\n  border-width: var(--rcp-fe-lol-parties-cosmetics-picker-border-width);\n  border-style: solid;\n  border-color: #f0e6d2;\n  width: 100%;\n  height: 100%;\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  cursor: pointer;\n  box-shadow: inset 0 0 0 1px rgba(0,0,0,0.5);\n  border-image: linear-gradient(to bottom, #c89b3c, #785a28) 2;\n}\n:host .loadouts-icon.none-icon {\n  background-size: 50%;\n}\n:host .loadouts-icon:hover {\n  -webkit-filter: brightness(110%);\n  border-image: linear-gradient(to bottom, #f0e6d2, #c89b3c) 1;\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(133),
      i = n(o),
      s = a(12),
      l = a(148),
      r = a(164),
      c = n(r);
    class m extends i.default {
      templateMarkup() {
        return a(88);
      }
      stylesheetMarkup() {
        return a(168);
      }
      constructor() {
        super(),
          (this._animationsEnabled = !1),
          (this._disabled = !1),
          (this._currentPlayer = !1),
          (this._position = s.POSITIONS.UNSELECTED),
          (this._videosAttached = !1),
          (this._currentPlayerVideosAttached = !1),
          (this._listeners._playListener = this.playVideo.bind(this));
      }
      connectedCallback() {
        this._renderVideos(),
          this.addEventListener('play-intro', this._listeners._playListener);
      }
      disconnectedCallback() {
        super.disconnectedCallback(),
          this._setIsNotAnimating(),
          this.removeEventListener('play-intro', this._listeners._playListener);
      }
      static get observedAttributes() {
        return ['animations', 'current-player', 'disabled', 'position'];
      }
      attributeChangedCallback(e, t, a) {
        'animations' === e
          ? this._handleAnimationsChanged(a)
          : 'current-player' === e
          ? this._handleCurrentPlayer(a)
          : 'disabled' === e
          ? this._handleDisabled(a)
          : 'position' === e
          ? this._handlePositionChanged(a)
          : void 0;
      }
      _handleAnimationsChanged(e) {
        const t = (0, l.attributeValueIsTruthy)(e);
        (this._animationsEnabled = t), this._renderVideos();
      }
      _handleCurrentPlayer(e) {
        (this._currentPlayer = (0, l.attributeValueIsTruthy)(e)),
          this._updateCurrentPlayerClass(),
          this._attachCurrentPlayerVideos();
      }
      _handleDisabled(e) {
        (this._disabled = (0, l.attributeValueIsTruthy)(e)),
          this._updateDisabledClass();
      }
      _handlePositionChanged(e) {
        (this._position = e),
          this._getBackgroundElement().setAttribute(
            'data-position',
            this._position,
          );
      }
      _onVideoStarted() {
        this._setIsAnimating();
      }
      _onVideoSignal() {
        this._setIsNotAnimating();
      }
      _shouldNotPlayVideo() {
        return (
          !this._videoStateMachineAttached ||
          this._position !== s.POSITIONS.UNSELECTED
        );
      }
      playVideo() {
        if (!this._shouldNotPlayVideo()) {
          const e = this._getVideoStateMachineElement();
          this._disabled
            ? e.dispatchEvent(new Event('disabled-intro'))
            : (e.dispatchEvent(new Event('enabled-background-intro')),
              e.dispatchEvent(new Event('enabled-intro')));
        }
      }
      _renderVideos() {
        this._animationsEnabled ? this._attachVideos() : this._detachVideos();
      }
      _attachVideos() {
        if (!this._videosAttached) {
          this._videosAttached = !0;
          const e = this._getVideosElement(),
            t = this._createVideoStateMachine(),
            a = this._createVideoGroup();
          t.appendChild(a), e.appendChild(t);
          const n = this._createVideoState('enabled-intro'),
            o = this._createVideo(
              { type: 'intro', 'signal-before-end': '0.2' },
              ['position-enabled-intro-video', 'position-button-animation'],
            );
          n.appendChild(o), a.appendChild(n);
          const i = this._createVideoState('disabled-intro'),
            s = this._createVideo(
              { type: 'intro', 'signal-before-end': '0.2' },
              ['position-disabled-intro-video', 'position-button-animation'],
            );
          i.appendChild(s),
            a.appendChild(i),
            this._replaceVideoSrc(
              'lol-uikit-video.position-enabled-intro-video',
              c.default.enabledButtonIntro,
            ),
            this._replaceVideoSrc(
              'lol-uikit-video.position-disabled-intro-video',
              c.default.disabledButtonIntro,
            ),
            this._attachCurrentPlayerVideos(),
            this._attachVideoStateMachineListeners();
        }
      }
      _shouldNotAttachCurrentPlayerVideos() {
        return (
          !this._currentPlayer ||
          !this._videosAttached ||
          this._currentPlayerVideosAttached
        );
      }
      _attachCurrentPlayerVideos() {
        if (!this._shouldNotAttachCurrentPlayerVideos()) {
          const e = this._getVideoStateMachineElement();
          if (e) {
            const t = this._createVideoGroup();
            e.appendChild(t);
            const a = this._createVideoState('enabled-background-intro'),
              n = this._createVideo({ type: 'intro' }, [
                'button-bg-intro-video',
              ]);
            a.appendChild(n), t.appendChild(a);
            const o = e.querySelector('lol-uikit-video-group');
            e.insertBefore(t, o),
              this._replaceVideoSrc(
                'lol-uikit-video.button-bg-intro-video',
                c.default.currentPlayerEnabledFXIntro,
              ),
              (this._currentPlayerVideosAttached = !0);
          }
        }
      }
      _detachVideos() {
        const e = this._getVideosElement();
        this._detachVideoStateMachineListeners(),
          (e.innerHTML = ''),
          (this._videosAttached = !1),
          (this._currentPlayerVideosAttached = !1),
          this._setIsNotAnimating();
      }
      _updateCurrentPlayerClass() {
        this._currentPlayer
          ? this._getBackgroundElement().classList.add('current-player')
          : this._getBackgroundElement().classList.remove('current-player');
      }
      _updateDisabledClass() {
        this._disabled
          ? this._getBackgroundElement().classList.add('disabled')
          : this._getBackgroundElement().classList.remove('disabled');
      }
      _setIsNotAnimating() {
        this._getBackgroundElement().classList.remove('animating');
      }
      _setIsAnimating() {
        this._getBackgroundElement().classList.add('animating');
      }
      _getBackgroundElement() {
        return this.shadowRoot.querySelector('.positionSelectorBackground');
      }
      _getVideosElement() {
        return this.shadowRoot.querySelector('.positionSelectorVideos');
      }
    }
    (m.tagName = 'lol-parties-player-position'), (t.default = m);
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(27),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n),
      i = a(0);
    class s extends i.webComponents.ShadowElement {
      templateMarkup() {
        return a(88);
      }
      constructor() {
        super(),
          (this._animationsEnabled = !1),
          (this._videoStateMachineAttached = !1),
          (this._listeners = {
            _videoStateMachineAttached:
              this._onVideoStateMachineAttached.bind(this),
            _videoStateMachineDetached:
              this._onVideoStateMachineDetached.bind(this),
            _videoStarted: this._onVideoStarted.bind(this),
            _videoDone: this._onVideoDone.bind(this),
            _videoSignal: this._onVideoSignal.bind(this),
          });
      }
      connectedCallback() {
        this._attachVideoStateMachineListeners();
      }
      disconnectedCallback() {
        this._detachVideoStateMachineListeners();
      }
      _attachVideoStateMachineListeners() {
        if (!(this._animationsDisabled() || this._videoStateMachineAttached)) {
          const e = this._getVideoStateMachineElement();
          return e
            ? e.isAttached
              ? void (
                  this._videoStateMachineAttached ||
                  this._onVideoStateMachineAttached()
                )
              : void (e.addEventListener(
                  'attached',
                  this._listeners._videoStateMachineAttached,
                ),
                e.addEventListener(
                  'detached',
                  this._listeners._videoStateMachineDetached,
                ))
            : void 0;
        }
      }
      _onVideoStateMachineAttached() {
        const e = this._getVideoStateMachineElement();
        e &&
          ((this._videoStateMachineAttached = !0),
          e.addEventListener('videoStateStart', this._listeners._videoStarted),
          e.addEventListener('videoStateDone', this._listeners._videoDone),
          e.addEventListener('videoStateSignal', this._listeners._videoSignal),
          this.dispatchEvent(new Event('calculateVideoState')));
      }
      _onVideoStateMachineDetached() {
        this._detachVideoStateMachineListeners();
      }
      _detachVideoStateMachineListeners() {
        const e = this._getVideoStateMachineElement();
        e &&
          (e.removeEventListener(
            'attached',
            this._listeners._videoStateMachineAttached,
          ),
          e.removeEventListener(
            'detached',
            this._listeners._videoStateMachineDetached,
          ),
          this._videoStateMachineAttached &&
            (e.removeEventListener(
              'videoStateStart',
              this._listeners._videoStarted,
            ),
            e.removeEventListener(
              'videoStateSignal',
              this._listeners._videoSignal,
            ),
            e.removeEventListener(
              'videoStateDone',
              this._listeners._videoDone,
            )),
          (this._videoStateMachineAttached = !1));
      }
      _onVideoStarted() {}
      _onVideoSignal() {}
      _onVideoDone() {}
      _animationsDisabled() {
        return !this._animationsEnabled;
      }
      _getVideoStateMachineElement() {
        return this.shadowRoot.querySelector('lol-uikit-video-state-machine');
      }
      _createVideoStateMachine() {
        return document.createElement('lol-uikit-video-state-machine');
      }
      _createVideoGroup() {
        return document.createElement('lol-uikit-video-group');
      }
      _createVideoState(e) {
        const t = document.createElement('lol-uikit-video-state');
        return t.setAttribute('state', e), t;
      }
      _createVideo(e, t) {
        const a = document.createElement('lol-uikit-video');
        if (e) for (const t in e) a.setAttribute(t, e[t]);
        if (t) {
          var n = !0,
            i = !1,
            s = void 0;
          try {
            for (
              var l = (0, o.default)(t), r;
              !(n = (r = l.next()).done);
              n = !0
            ) {
              const e = r.value;
              a.classList.add(e);
            }
          } catch (e) {
            (i = !0), (s = e);
          } finally {
            try {
              !n && l.return && l.return();
            } finally {
              if (i) throw s;
            }
          }
        }
        return a;
      }
      _replaceVideoSrc(e, t) {
        const a = this.shadowRoot.querySelectorAll(e);
        for (let n = 0; n < a.length; n++)
          a[n].dispose(), a[n].setAttribute('src', t);
      }
      _getVideoFromEvent(e) {
        return !!(e && e.detail && e.detail.video) && e.detail.video;
      }
    }
    t.default = s;
  },
  function (e, t, a) {
    a(41), a(35), (e.exports = a(147));
  },
  function (e, t, a) {
    'use strict';
    var n = a(136),
      o = a(83),
      i = a(28),
      s = a(52);
    (e.exports = a(55)(
      Array,
      'Array',
      function (e, t) {
        (this._t = s(e)), (this._i = 0), (this._k = t);
      },
      function () {
        var e = this._t,
          t = this._k,
          a = this._i++;
        return !e || a >= e.length
          ? ((this._t = void 0), o(1))
          : 'keys' == t
          ? o(0, a)
          : 'values' == t
          ? o(0, e[a])
          : o(0, [a, e[a]]);
      },
      'values',
    )),
      (i.Arguments = i.Array),
      n('keys'),
      n('values'),
      n('entries');
  },
  function (e) {
    e.exports = function () {};
  },
  function (e, t, a) {
    e.exports =
      !a(24) &&
      !a(29)(function () {
        return (
          7 !=
          Object.defineProperty(a(57)('div'), 'a', {
            get: function () {
              return 7;
            },
          }).a
        );
      });
  },
  function (e, t, a) {
    var n = a(14);
    e.exports = function (e, t) {
      if (!n(e)) return e;
      var a, o;
      if (t && 'function' == typeof (a = e.toString) && !n((o = a.call(e))))
        return o;
      if ('function' == typeof (a = e.valueOf) && !n((o = a.call(e)))) return o;
      if (!t && 'function' == typeof (a = e.toString) && !n((o = a.call(e))))
        return o;
      throw TypeError("Can't convert object to primitive value");
    };
  },
  function (e, t, a) {
    e.exports = a(23);
  },
  function (e, t, a) {
    'use strict';
    var n = a(84),
      o = a(58),
      i = a(43),
      s = {};
    a(23)(s, a(10)('iterator'), function () {
      return this;
    }),
      (e.exports = function (e, t, a) {
        (e.prototype = n(s, { next: o(1, a) })), i(e, t + ' Iterator');
      });
  },
  function (e, t, a) {
    var n = a(20),
      o = a(21),
      s = a(59);
    e.exports = a(24)
      ? Object.defineProperties
      : function (e, t) {
          o(e);
          for (var a = s(t), l = a.length, r = 0, i; l > r; )
            n.f(e, (i = a[r++]), t[i]);
          return e;
        };
  },
  function (e, t, a) {
    var n = a(33),
      o = a(52),
      s = a(143)(!1),
      i = a(61)('IE_PROTO');
    e.exports = function (e, t) {
      var a = o(e),
        l = 0,
        r = [],
        c;
      for (c in a) c != i && n(a, c) && r.push(c);
      for (; t.length > l; ) n(a, (c = t[l++])) && (~s(r, c) || r.push(c));
      return r;
    };
  },
  function (e, t, a) {
    var n = a(52),
      o = a(42),
      i = a(144);
    e.exports = function (e) {
      return function (t, a, s) {
        var l = n(t),
          r = o(l.length),
          c = i(s, r),
          m;
        if (e && a != a) {
          for (; r > c; ) if (((m = l[c++]), m != m)) return !0;
        } else
          for (; r > c; c++)
            if ((e || c in l) && l[c] === a) return e || c || 0;
        return !e && -1;
      };
    };
  },
  function (e, t, a) {
    var n = a(60),
      o = Math.max,
      i = Math.min;
    e.exports = function (e, t) {
      return (e = n(e)), 0 > e ? o(e + t, 0) : i(e, t);
    };
  },
  function (e, t, a) {
    var n = a(33),
      o = a(34),
      i = a(61)('IE_PROTO'),
      s = Object.prototype;
    e.exports =
      Object.getPrototypeOf ||
      function (e) {
        return (
          (e = o(e)),
          n(e, i)
            ? e[i]
            : 'function' == typeof e.constructor && e instanceof e.constructor
            ? e.constructor.prototype
            : e instanceof Object
            ? s
            : null
        );
      };
  },
  function (e, t, a) {
    var n = a(60),
      o = a(54);
    e.exports = function (e) {
      return function (t, r) {
        var c = o(t) + '',
          s = n(r),
          i = c.length,
          l,
          a;
        return 0 > s || s >= i
          ? e
            ? ''
            : void 0
          : ((l = c.charCodeAt(s)),
            55296 > l ||
            56319 < l ||
            s + 1 === i ||
            56320 > (a = c.charCodeAt(s + 1)) ||
            57343 < a
              ? e
                ? c.charAt(s)
                : l
              : e
              ? c.slice(s, s + 2)
              : ((l - 55296) << 10) + (a - 56320) + 65536);
      };
    };
  },
  function (e, t, a) {
    var n = a(21),
      o = a(63);
    e.exports = a(4).getIterator = function (e) {
      var t = o(e);
      if ('function' != typeof t) throw TypeError(e + ' is not iterable!');
      return n(t.call(e));
    };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(64),
      i = n(o),
      s = a(27),
      l = n(s),
      r = a(89),
      c = n(r),
      m = a(2),
      d = n(m);
    e.exports = {
      attributeValueIsTruthy: function (e) {
        return '' === e || 'true' === e;
      },
      waitForElement: function (e, t, a) {
        return new d.default(function (n, o) {
          if (!e || !e.querySelector) return void o();
          const s = e.querySelector(t);
          if (s) return void n(s);
          const r = new MutationObserver((e) => {
            e.forEach(function (e) {
              const a = (0, c.default)(e.addedNodes);
              var o = !0,
                i = !1,
                s = void 0;
              try {
                for (
                  var m = (0, l.default)(a), d;
                  !(o = (d = m.next()).done);
                  o = !0
                ) {
                  const e = d.value;
                  if (e.matches && e.matches(t))
                    return r.disconnect(), void n(e);
                }
              } catch (e) {
                (i = !0), (s = e);
              } finally {
                try {
                  !o && m.return && m.return();
                } finally {
                  if (i) throw s;
                }
              }
            });
          });
          r.observe(e, (0, i.default)({ childList: !0 }, a));
        });
      },
    };
  },
  function (e, t, a) {
    a(150), (e.exports = a(4).Object.assign);
  },
  function (e, t, a) {
    var n = a(11);
    n(n.S + n.F, 'Object', { assign: a(151) });
  },
  function (e, t, a) {
    'use strict';
    var n = a(59),
      o = a(152),
      i = a(153),
      s = a(34),
      l = a(53),
      r = Object.assign;
    e.exports =
      !r ||
      a(29)(function () {
        var e = {},
          t = {},
          a = Symbol(),
          n = 'abcdefghijklmnopqrst';
        return (
          (e[a] = 7),
          n.split('').forEach(function (e) {
            t[e] = e;
          }),
          7 != r({}, e)[a] || Object.keys(r({}, t)).join('') != n
        );
      })
        ? function (e) {
            for (
              var t = s(e), a = arguments.length, r = 1, c = o.f, m = i.f;
              a > r;

            )
              for (
                var d = l(arguments[r++]),
                  p = c ? n(d).concat(c(d)) : n(d),
                  u = p.length,
                  g = 0,
                  b;
                u > g;

              )
                m.call(d, (b = p[g++])) && (t[b] = d[b]);
            return t;
          }
        : r;
  },
  function (e, t) {
    t.f = Object.getOwnPropertySymbols;
  },
  function (e, t) {
    t.f = {}.propertyIsEnumerable;
  },
  function (e, t, a) {
    a(35), a(155), (e.exports = a(4).Array.from);
  },
  function (e, t, a) {
    'use strict';
    var n = a(19),
      o = a(11),
      i = a(34),
      s = a(90),
      l = a(91),
      r = a(42),
      c = a(156),
      m = a(63);
    o(
      o.S +
        o.F *
          !a(92)(function (e) {
            Array.from(e);
          }),
      'Array',
      {
        from: function (e) {
          var t = i(e),
            a = 'function' == typeof this ? this : Array,
            o = arguments.length,
            d = 1 < o ? arguments[1] : void 0,
            p = void 0 !== d,
            u = 0,
            g = m(t),
            b,
            h,
            f,
            y;
          if (
            (p && (d = n(d, 2 < o ? arguments[2] : void 0, 2)),
            void 0 != g && !(a == Array && l(g)))
          )
            for (y = g.call(t), h = new a(); !(f = y.next()).done; u++)
              c(h, u, p ? s(y, d, [f.value, u], !0) : f.value);
          else
            for (b = r(t.length), h = new a(b); b > u; u++)
              c(h, u, p ? d(t[u], u) : t[u]);
          return (h.length = u), h;
        },
      },
    );
  },
  function (e, t, a) {
    'use strict';
    var n = a(20),
      o = a(58);
    e.exports = function (e, t, a) {
      t in e ? n.f(e, t, o(0, a)) : (e[t] = a);
    };
  },
  function (e, t, a) {
    a(93), a(35), a(41), a(158), a(162), a(163), (e.exports = a(4).Promise);
  },
  function (e, t, a) {
    'use strict';
    var n = a(56),
      o = a(9),
      i = a(19),
      s = a(44),
      l = a(11),
      r = a(14),
      c = a(32),
      m = a(65),
      d = a(36),
      p = a(94),
      u = a(95).set,
      g = a(160)(),
      b = a(66),
      h = a(96),
      f = a(161),
      y = a(97),
      _ = 'Promise',
      v = o.TypeError,
      S = o.process,
      x = S && S.versions,
      E = (x && x.v8) || '',
      k = o[_],
      C = 'process' == s(S),
      I = function () {},
      P = (B = b.f),
      T = !!(function () {
        try {
          var e = k.resolve(1),
            t = ((e.constructor = {})[a(10)('species')] = function (e) {
              e(I, I);
            });
          return (
            (C || 'function' == typeof PromiseRejectionEvent) &&
            e.then(I) instanceof t &&
            0 !== E.indexOf('6.6') &&
            -1 === f.indexOf('Chrome/66')
          );
        } catch (t) {}
      })(),
      w = function (e) {
        var t;
        return !!(r(e) && 'function' == typeof (t = e.then)) && t;
      },
      R = function (e, t) {
        if (!e._n) {
          e._n = !0;
          var a = e._c;
          g(function () {
            for (
              var n = e._v,
                o = 1 == e._s,
                s = 0,
                i = function (t) {
                  var a = o ? t.ok : t.fail,
                    i = t.resolve,
                    s = t.reject,
                    l = t.domain,
                    r,
                    c,
                    m;
                  try {
                    a
                      ? (!o && (2 == e._h && A(e), (e._h = 1)),
                        !0 === a
                          ? (r = n)
                          : (l && l.enter(),
                            (r = a(n)),
                            l && (l.exit(), (m = !0))),
                        r === t.promise
                          ? s(v('Promise-chain cycle'))
                          : (c = w(r))
                          ? c.call(r, i, s)
                          : i(r))
                      : s(n);
                  } catch (t) {
                    l && !m && l.exit(), s(t);
                  }
                };
              a.length > s;

            )
              i(a[s++]);
            (e._c = []), (e._n = !1), t && !e._h && L(e);
          });
        }
      },
      L = function (e) {
        u.call(o, function () {
          var t = e._v,
            a = M(e),
            n,
            i,
            s;
          if (
            (a &&
              ((n = h(function () {
                C
                  ? S.emit('unhandledRejection', t, e)
                  : (i = o.onunhandledrejection)
                  ? i({ promise: e, reason: t })
                  : (s = o.console) &&
                    s.error &&
                    s.error('Unhandled promise rejection', t);
              })),
              (e._h = C || M(e) ? 2 : 1)),
            (e._a = void 0),
            a && n.e)
          )
            throw n.v;
        });
      },
      M = function (e) {
        return 1 !== e._h && 0 === (e._a || e._c).length;
      },
      A = function (e) {
        u.call(o, function () {
          var t;
          C
            ? S.emit('rejectionHandled', e)
            : (t = o.onrejectionhandled) && t({ promise: e, reason: e._v });
        });
      },
      D = function (e) {
        var t = this;
        t._d ||
          ((t._d = !0),
          (t = t._w || t),
          (t._v = e),
          (t._s = 2),
          !t._a && (t._a = t._c.slice()),
          R(t, !0));
      },
      O = function (e) {
        var t = this,
          a;
        if (!t._d) {
          (t._d = !0), (t = t._w || t);
          try {
            if (t === e) throw v("Promise can't be resolved itself");
            (a = w(e))
              ? g(function () {
                  var n = { _w: t, _d: !1 };
                  try {
                    a.call(e, i(O, n, 1), i(D, n, 1));
                  } catch (t) {
                    D.call(n, t);
                  }
                })
              : ((t._v = e), (t._s = 1), R(t, !1));
          } catch (a) {
            D.call({ _w: t, _d: !1 }, a);
          }
        }
      },
      N,
      B,
      F,
      G;
    T ||
      ((k = function (e) {
        m(this, k, _, '_h'), c(e), N.call(this);
        try {
          e(i(O, this, 1), i(D, this, 1));
        } catch (e) {
          D.call(this, e);
        }
      }),
      (N = function () {
        (this._c = []),
          (this._a = void 0),
          (this._s = 0),
          (this._d = !1),
          (this._v = void 0),
          (this._h = 0),
          (this._n = !1);
      }),
      (N.prototype = a(67)(k.prototype, {
        then: function (e, t) {
          var a = P(p(this, k));
          return (
            (a.ok = 'function' != typeof e || e),
            (a.fail = 'function' == typeof t && t),
            (a.domain = C ? S.domain : void 0),
            this._c.push(a),
            this._a && this._a.push(a),
            this._s && R(this, !1),
            a.promise
          );
        },
        catch: function (e) {
          return this.then(void 0, e);
        },
      })),
      (F = function () {
        var e = new N();
        (this.promise = e),
          (this.resolve = i(O, e, 1)),
          (this.reject = i(D, e, 1));
      }),
      (b.f = P =
        function (e) {
          return e === k || e === G ? new F(e) : B(e);
        })),
      l(l.G + l.W + l.F * !T, { Promise: k }),
      a(43)(k, _),
      a(98)(_),
      (G = a(4)[_]),
      l(l.S + l.F * !T, _, {
        reject: function (e) {
          var t = P(this),
            a = t.reject;
          return a(e), t.promise;
        },
      }),
      l(l.S + l.F * (n || !T), _, {
        resolve: function (e) {
          return y(n && this === G ? k : this, e);
        },
      }),
      l(
        l.S +
          l.F *
            !(
              T &&
              a(92)(function (e) {
                k.all(e)['catch'](I);
              })
            ),
        _,
        {
          all: function (e) {
            var t = this,
              a = P(t),
              n = a.resolve,
              o = a.reject,
              i = h(function () {
                var a = [],
                  i = 0,
                  s = 1;
                d(e, !1, function (e) {
                  var l = i++,
                    r = !1;
                  a.push(void 0),
                    s++,
                    t.resolve(e).then(function (e) {
                      r || ((r = !0), (a[l] = e), --s || n(a));
                    }, o);
                }),
                  --s || n(a);
              });
            return i.e && o(i.v), a.promise;
          },
          race: function (e) {
            var t = this,
              a = P(t),
              n = a.reject,
              o = h(function () {
                d(e, !1, function (e) {
                  t.resolve(e).then(a.resolve, n);
                });
              });
            return o.e && n(o.v), a.promise;
          },
        },
      );
  },
  function (e) {
    e.exports = function (e, t, a) {
      var n = a === void 0;
      switch (t.length) {
        case 0:
          return n ? e() : e.call(a);
        case 1:
          return n ? e(t[0]) : e.call(a, t[0]);
        case 2:
          return n ? e(t[0], t[1]) : e.call(a, t[0], t[1]);
        case 3:
          return n ? e(t[0], t[1], t[2]) : e.call(a, t[0], t[1], t[2]);
        case 4:
          return n
            ? e(t[0], t[1], t[2], t[3])
            : e.call(a, t[0], t[1], t[2], t[3]);
      }
      return e.apply(a, t);
    };
  },
  function (e, t, a) {
    var n = a(9),
      o = a(95).set,
      i = n.MutationObserver || n.WebKitMutationObserver,
      s = n.process,
      l = n.Promise,
      r = 'process' == a(31)(s);
    e.exports = function () {
      var e = function () {
          var e, n;
          for (r && (e = s.domain) && e.exit(); t; ) {
            (n = t.fn), (t = t.next);
            try {
              n();
            } catch (n) {
              throw (t ? c() : (a = void 0), n);
            }
          }
          (a = void 0), e && e.enter();
        },
        t,
        a,
        c;
      if (r)
        c = function () {
          s.nextTick(e);
        };
      else if (i && !(n.navigator && n.navigator.standalone)) {
        var m = !0,
          d = document.createTextNode('');
        new i(e).observe(d, { characterData: !0 }),
          (c = function () {
            d.data = m = !m;
          });
      } else if (l && l.resolve) {
        var p = l.resolve(void 0);
        c = function () {
          p.then(e);
        };
      } else
        c = function () {
          o.call(n, e);
        };
      return function (e) {
        var n = { fn: e, next: void 0 };
        a && (a.next = n), t || ((t = n), c()), (a = n);
      };
    };
  },
  function (e, t, a) {
    var n = a(9),
      o = n.navigator;
    e.exports = (o && o.userAgent) || '';
  },
  function (e, t, a) {
    'use strict';
    var n = a(11),
      o = a(4),
      i = a(9),
      s = a(94),
      l = a(97);
    n(n.P + n.R, 'Promise', {
      finally: function (t) {
        var a = s(this, o.Promise || i.Promise),
          e = 'function' == typeof t;
        return this.then(
          e
            ? function (e) {
                return l(a, t()).then(function () {
                  return e;
                });
              }
            : t,
          e
            ? function (n) {
                return l(a, t()).then(function () {
                  throw n;
                });
              }
            : t,
        );
      },
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(11),
      o = a(66),
      i = a(96);
    n(n.S, 'Promise', {
      try: function (e) {
        var t = o.f(this),
          a = i(e);
        return (a.e ? t.reject : t.resolve)(a.v), t.promise;
      },
    });
  },
  function (e, t, a) {
    'use strict';
    const n = {
      enabledButtonIntro: a(165),
      disabledButtonIntro: a(166),
      currentPlayerEnabledFXIntro: a(167),
    };
    e.exports = n;
  },
  function (e, t, a) {
    e.exports = a.p + 'position-icon-intro.webm';
  },
  function (e, t, a) {
    e.exports = a.p + 'position-icon-disabled-intro.webm';
  },
  function (e, t, a) {
    e.exports = a.p + 'current-player-position-fx-intro.webm';
  },
  function (e, t, a) {
    var n = a(16);
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host {\n  width: 48px;\n  height: 48px;\n  transform: rotate(-45deg);\n}\n:host .positionSelectorBackground {\n  position: absolute;\n  width: 42px;\n  height: 42px;\n  pointer-events: none;\n  transform: rotate(45deg);\n}\n:host .positionSelectorBackground::before {\n  content: none;\n}\n:host .positionSelectorBackground.disabled {\n  cursor: default;\n  pointer-events: none;\n}\n:host .positionSelectorBackground .positionSelectorContents {\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n:host .positionSelectorBackground .positionIcon {\n  width: 32px;\n  height: 32px;\n  top: 10px;\n  left: 10px;\n  opacity: 0.7;\n  position: absolute;\n  background-repeat: no-repeat;\n  pointer-events: none;\n  background-size: 34px;\n  transition: opacity 500ms cubic-bezier(0, 0, 0, 1);\n  background-position: 50%;\n}\n:host .positionSelectorBackground.animating .positionIcon {\n  display: none;\n}\n:host .positionSelectorBackground .position-button-animation {\n  position: absolute;\n  top: 6px;\n  left: 6px;\n}\n:host .positionSelectorBackground.current-player {\n  width: 48px;\n  height: 48px;\n  cursor: pointer;\n  pointer-events: auto;\n}\n:host .positionSelectorBackground.current-player::before {\n  content: "";\n  position: absolute;\n  width: 70px;\n  height: 70px;\n  margin-left: -35px;\n  margin-top: -35px;\n  top: 50%;\n  left: 50%;\n  background-size: contain;\n  background-image: url(' +
          n(a(169)) +
          ');\n  pointer-events: none;\n}\n:host .positionSelectorBackground.current-player:hover::before {\n  background-image: url(' +
          n(a(170)) +
          ');\n}\n:host .positionSelectorBackground.current-player.disabled::before {\n  background-image: url(' +
          n(a(171)) +
          ');\n}\n:host .positionSelectorBackground.current-player .positionIcon {\n  height: 100%;\n  width: 100%;\n  top: auto;\n  left: auto;\n  opacity: 1;\n}\n:host .positionSelectorBackground.current-player .button-bg-intro-video {\n  position: absolute;\n  top: -26px;\n  left: -26px;\n}\n:host .positionSelectorBackground.current-player .position-button-animation {\n  top: 4px;\n  left: 4px;\n}\n:host .positionSelectorBackground[data-position="BOTTOM"] .positionIcon {\n  background-image: url(' +
          n(a(172)) +
          ');\n}\n:host .positionSelectorBackground[data-position="TOP"] .positionIcon {\n  background-image: url(' +
          n(a(173)) +
          ');\n}\n:host .positionSelectorBackground[data-position="JUNGLE"] .positionIcon {\n  background-image: url(' +
          n(a(174)) +
          ');\n}\n:host .positionSelectorBackground[data-position="MIDDLE"] .positionIcon {\n  background-image: url(' +
          n(a(175)) +
          ');\n}\n:host .positionSelectorBackground[data-position="UTILITY"] .positionIcon {\n  background-image: url(' +
          n(a(176)) +
          ');\n}\n:host .positionSelectorBackground[data-position="FILL"] .positionIcon {\n  background-image: url(' +
          n(a(177)) +
          ');\n}\n:host .positionSelectorBackground[data-position="UNSELECTED"] .positionIcon {\n  background-image: url(' +
          n(a(178)) +
          ');\n}\n:host .positionSelectorBackground:hover[data-position="BOTTOM"] .positionIcon {\n  background-image: url(' +
          n(a(179)) +
          ');\n}\n:host .positionSelectorBackground:hover[data-position="TOP"] .positionIcon {\n  background-image: url(' +
          n(a(180)) +
          ');\n}\n:host .positionSelectorBackground:hover[data-position="JUNGLE"] .positionIcon {\n  background-image: url(' +
          n(a(181)) +
          ');\n}\n:host .positionSelectorBackground:hover[data-position="MIDDLE"] .positionIcon {\n  background-image: url(' +
          n(a(182)) +
          ');\n}\n:host .positionSelectorBackground:hover[data-position="UTILITY"] .positionIcon {\n  background-image: url(' +
          n(a(183)) +
          ');\n}\n:host .positionSelectorBackground:hover[data-position="FILL"] .positionIcon {\n  background-image: url(' +
          n(a(184)) +
          ');\n}\n:host .positionSelectorBackground:hover[data-position="UNSELECTED"] .positionIcon {\n  background-image: url(' +
          n(a(185)) +
          ');\n}\n:host .positionSelectorBackground.disabled[data-position="BOTTOM"] .positionIcon {\n  background-image: url(' +
          n(a(186)) +
          ');\n}\n:host .positionSelectorBackground.disabled[data-position="TOP"] .positionIcon {\n  background-image: url(' +
          n(a(187)) +
          ');\n}\n:host .positionSelectorBackground.disabled[data-position="JUNGLE"] .positionIcon {\n  background-image: url(' +
          n(a(188)) +
          ');\n}\n:host .positionSelectorBackground.disabled[data-position="MIDDLE"] .positionIcon {\n  background-image: url(' +
          n(a(189)) +
          ');\n}\n:host .positionSelectorBackground.disabled[data-position="UTILITY"] .positionIcon {\n  background-image: url(' +
          n(a(190)) +
          ');\n}\n:host .positionSelectorBackground.disabled[data-position="FILL"] .positionIcon {\n  background-image: url(' +
          n(a(191)) +
          ');\n}\n:host .positionSelectorBackground.disabled[data-position="UNSELECTED"] .positionIcon {\n  background-image: url(' +
          n(a(192)) +
          ');\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    e.exports = a.p + 'button-blue.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'button-blue-hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'button-disabled.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-bottom-blue.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-top-blue.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-jungle-blue.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-middle-blue.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-utility-blue.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-fill-blue.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-unselected-blue.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-bottom-blue-hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-top-blue-hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-jungle-blue-hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-middle-blue-hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-utility-blue-hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-fill-blue-hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-unselected-blue-hover.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-bottom-disabled.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-top-disabled.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-jungle-disabled.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-middle-disabled.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-utility-disabled.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-fill-disabled.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'icon-position-unselected-disabled.png';
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(0),
      i = n(o),
      s = a(37),
      l = n(s);
    const r = i.default.getProvider(),
      c = r.getSocket(),
      m = 'sfx-ui';
    class d extends o.webComponents.ShadowElement {
      templateMarkup() {
        return a(216);
      }
      stylesheetMarkup() {
        return a(217);
      }
      constructor() {
        super(),
          (this._cachedInviteIds = []),
          (this._patcherState = null),
          (this._settings = null),
          (this._listeners = {}),
          (this._listeners.onClickClearAll = this._onClickClearAll.bind(this)),
          (this._listeners.onUXSettingsChange =
            this._updateUXSettings.bind(this)),
          (this._patcherConnected = !0),
          o.Navigation.subscribe(
            'isConnectedToServer',
            this._updatePatcherConnected.bind(this),
          ),
          (this._lobbyBinding = (0, o.dataBinding)('/lol-lobby', c)),
          (this._patcherBinding = (0, o.dataBinding)('/patcher', c)),
          (this._chatBinding = (0, o.dataBinding)('/lol-chat', c)),
          (this._settingsBinding = (0, o.dataBinding)('/lol-settings', c)),
          this._observePatcher(),
          this._observeSettings(),
          this._observeCurrentPlayerChat(),
          this._observeUXSettings();
      }
      connectedCallback() {
        super.connectedCallback();
        const e = this._clearAllElement();
        e && e.addEventListener('click', this._listeners.onClickClearAll);
        const t = this.shadowRoot.querySelector(
          '.parties-game-invite-heading-text',
        );
        t &&
          o.tra.ready().then(() => {
            t.innerHTML = o.tra.get('parties_group_label_game_invites');
          }),
          this._assignClearAllTooltip(),
          this._observeUXSettings();
      }
      disconnectedCallback() {
        super.disconnectedCallback();
        const e = this._clearAllElement();
        e && e.removeEventListener('click', this._listeners.onClickClearAll),
          this._unassignClearAllTooltip(),
          this._unobserveUXSettings();
      }
      updateGameSearch(e) {
        (this._gameSearch = e),
          e ? this._hide() : this._haveInvites() && this._show(),
          this._updateGameInviteElements(this._gameSearch, 'updateGameSearch');
      }
      _show() {
        this.classList.remove('parties-game-invites-hide');
      }
      _hide() {
        this.classList.add('parties-game-invites-hide');
      }
      _observeUXSettings() {
        this._UXObserverAttached ||
          (o.UXSettings.addObserver(this._listeners.onUXSettingsChange),
          (this._UXObserverAttached = !0));
      }
      _unobserveUXSettings() {
        this._UXObserverAttached &&
          (o.UXSettings.removeObserver(this._listeners.onUXSettingsChange),
          (this._UXObserverAttached = !1));
      }
      _observeCurrentPlayerChat() {
        this._chatBinding.observe('/v1/me', (e) => {
          e &&
            ((this._currentPlayerChat = e),
            this._updateGameInviteElements(
              this._currentPlayerChat,
              'updateCurrentPlayerChat',
            ));
        });
      }
      _observeSettings() {
        this._settingsBinding.observe(
          '/v2/account/LCUPreferences/lol-chat',
          (e) => {
            e &&
              ((this._chatSettings = e),
              this._updateGameInviteElements(
                this._chatSettings,
                'updateChatSettings',
              ));
          },
        );
      }
      _observePatcher() {
        this._patcherBinding.observe(
          '/v1/products/league_of_legends/state',
          (e) => {
            (this._patcherState = e),
              this._updateGameInviteElements(
                this._patcherState,
                'updatePatcherState',
              );
          },
        );
      }
      onGameInvitesChanged(e) {
        if ((this._showHideOnInvites(e), !e || 0 === e.length))
          return (
            this._haveInvites() &&
              (this._cachedInviteIds.forEach((e) => {
                this._removeGameInviteElement(e);
              }),
              (this._cachedInviteIds = [])),
            void this._hide()
          );
        this._gameSearch || this._show(), this._expireGameInvites(e);
        const t = this._cachedInviteIds,
          a = this._updateGameInvites(e, t),
          n = this._addNewGameInvites(e, t);
        (this._cachedInviteIds = this._getInviteIds(a.concat(n))),
          this._updateGameInviteCount();
      }
      _updateGameInvites(e, t) {
        const a = e.filter(function (e) {
          return -1 !== t.indexOf(e.invitationId);
        });
        return (
          a &&
            0 < a.length &&
            a.forEach((e) => {
              const t = this.shadowRoot.getElementById(e.invitationId);
              t && t.updateGameInvite(e);
            }),
          a
        );
      }
      _addNewGameInvites(e, t) {
        const a = e.filter(function (e) {
          return -1 === t.indexOf(e.invitationId);
        });
        return (
          a &&
            0 < a.length &&
            (this._playGameInviteSound(),
            a.sort(this._gameInviteSort.bind(this)),
            this._addGameInviteElements(a)),
          a
        );
      }
      _onClickClearAll() {
        if (this._haveInvites()) {
          const e = this._cachedInviteIds.length;
          this._playClickSound();
          for (let t = e - 1; 0 <= t; t--)
            this._declineGameInvite(this._cachedInviteIds[t]);
        }
      }
      _declineGameInvite(e) {
        e && this._lobbyBinding.post(`/v2/received-invitations/${e}/decline`);
      }
      _playClickSound() {
        o.Audio.getChannel(m).playSound(
          '/fe/lol-parties/sfx-soc-ui-click-generic.ogg',
        );
      }
      _playGameInviteSound() {
        o.Audio.getChannel(m).playSound(
          '/fe/lol-social/sounds/sfx-soc-notif-gameinvite-rcvd.ogg',
        );
      }
      _showHideOnInvites(e) {
        this._clearAllButtonVisibility(e), this._inviteCountVisibility(e);
      }
      _inviteCountVisibility(e) {
        const t = this._inviteCountElement();
        t && e && 1 < e.length
          ? t.classList.remove('parties-hide-game-invite-count')
          : t && t.classList.add('parties-hide-game-invite-count');
      }
      _clearAllButtonVisibility(e) {
        const t = this._clearAllElement();
        t && e && 1 < e.length
          ? t.classList.remove('parties-hide-clear-all')
          : t && t.classList.add('parties-hide-clear-all');
      }
      _expireGameInvites(e) {
        if (!this._cachedInviteIds || 0 === this._cachedInviteIds.length)
          return;
        const t = this._getInviteIds(e),
          a = this._cachedInviteIds.filter((e) => -1 === t.indexOf(e));
        a.forEach((e) => {
          this._removeGameInviteElement(e);
        });
        const n = this._cachedInviteIds.filter((e) => -1 === a.indexOf(e));
        this._cachedInviteIds = n;
      }
      _removeGameInviteElement(e) {
        const t = this.shadowRoot.getElementById(e);
        t && t.remove();
      }
      _getInviteIds(e) {
        return e.reduce(
          (e, t) => (t.invitationId && e.push(t.invitationId), e),
          [],
        );
      }
      _gameInviteSort(e, t) {
        const a = l.default.isReadyForGame(this._patcherState),
          n = this._gameInviteAcceptable(e, a),
          i = this._gameInviteAcceptable(t, a),
          s = i - n;
        return s ? s : o.tra.moment(t.timestamp) - o.tra.moment(e.timestamp);
      }
      _gameInviteAcceptable(e, t) {
        return l.default.isGameInviteAcceptable(
          e,
          this._chatSettings,
          this._currentPlayerChat,
          this._patcherConnected,
          t,
        );
      }
      _gameInvitesById(e) {
        let t = {};
        return (
          e &&
            0 < e.length &&
            (t = e.reduce((e, t) => {
              const a = t.invitationId;
              return a && e && (e[a] = t), e;
            }, {})),
          t
        );
      }
      _updatePatcherConnected(e) {
        (this._patcherConnected = e),
          this._updateGameInviteElements(e, 'updatePatcherConnected');
      }
      _updateGameInviteElements(e, t) {
        if (this._haveInvites()) {
          const a = this._cachedInviteIds;
          a.forEach((a) => {
            const n = this.shadowRoot.getElementById(a);
            n && n[t](e);
          });
        }
      }
      _addGameInviteElements(e) {
        e.forEach((e) => {
          this._addGameInviteElement(e);
        });
      }
      _addGameInviteElement(e) {
        const t = this._createNewGameInviteElement(),
          a = this._gameInvitesContainerElement();
        if (a && t && e && e.invitationId) {
          (t.id = e.invitationId),
            t.updateGameInvite(e),
            t.updatePatcherState(this._patcherState),
            t.updatePatcherConnected(this._patcherConnected),
            t.updateChatSettings(this._chatSettings),
            t.updateCurrentPlayerChat(this._currentPlayerChat),
            t.updateUXSettings(this._uxSettings);
          const n = a.querySelector('lol-parties-game-invite');
          a.insertBefore(t, n);
        }
      }
      _createNewGameInviteElement() {
        return document.createElement('lol-parties-game-invite');
      }
      _assignClearAllTooltip() {
        const e = this._clearAllElement();
        if (e) {
          const t = o.UIKit.getTooltipManager(),
            a = document.createElement('lol-uikit-tooltip'),
            n = o.tra.get('parties_tooltip_decline_all'),
            i = document.createElement('lol-uikit-content-block');
          i.setAttribute('type', 'tooltip-system');
          const s = document.createElement('p');
          (s.innerHTML = n),
            i.appendChild(s),
            a.setAttribute('position', 'left'),
            a.appendChild(i);
          t.assign(
            e,
            a,
            {},
            {
              type: 'dialog-small',
              showDelay: 0,
              targetAnchor: { x: 'left', y: 'center' },
              tooltipAnchor: { x: 'right', y: 'center' },
            },
          );
        }
      }
      _unassignClearAllTooltip() {
        const e = this._clearAllElement(),
          t = o.UIKit.getTooltipManager();
        t.unassign(e);
      }
      _updateGameInviteCount() {
        const e = this._cachedInviteIds ? this._cachedInviteIds : [],
          t = this._inviteCountElement();
        t && (t.innerHTML = `(${e.length})`);
      }
      _updateUXSettings(e) {
        (this._uxSettings = e),
          this._updateGameInviteElements(this._uxSettings, 'updateUXSettings');
      }
      _inviteCountElement() {
        return this.shadowRoot.querySelector('.parties-game-invite-count');
      }
      _clearAllElement() {
        return this.shadowRoot.querySelector('.parties-clear-all-button');
      }
      _gameInvitesContainerElement() {
        return this.shadowRoot.querySelector('.parties-game-invites');
      }
      _haveInvites() {
        return !!(this._cachedInviteIds && 0 < this._cachedInviteIds.length);
      }
    }
    (d.tagName = 'lol-parties-game-invites'), (t.default = d);
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(99),
      i = n(o),
      s = a(0),
      l = a(7),
      r = a(6),
      c = n(r),
      m = a(22),
      d = n(m);
    const p = (0, s.getProvider)().getSocket(),
      u = (0, s.dataBinding)('/lol-maps', p),
      g = (0, s.dataBinding)('/lol-game-queues', p),
      b = s.Ember.Object.extend({
        init() {
          this._super(...arguments), this._initObservers();
        },
        willDestroy() {
          this._super(...arguments), u.unobserve(this), g.unobserve(this);
        },
        _initObservers() {
          u.observe('/v2/maps', this, (e) => {
            !e ||
              this.isDestroying ||
              this.isDestroyed ||
              this.set('mapsPlatformJson', e);
          }),
            g.observe('/v1/queues', this, (e) => {
              !e ||
                this.isDestroying ||
                this.isDestroyed ||
                this.set('platformJson', e);
            });
        },
        platformConfigSingleton: c.default,
        eligibilitiesSingleton: d.default,
        platformEnabledQueues: s.Ember.computed.alias(
          'platformConfigSingleton.enabledGameQueues',
        ),
        gameSelectEligibilityHash: s.Ember.computed.alias(
          'eligibilitiesSingleton.gameSelectEligibilityHash',
        ),
        tutorialFlowEnabled: s.Ember.computed.alias(
          'platformConfigSingleton.tutorialFlowEnabled',
        ),
        disabledRgmButtonEnabled: s.Ember.computed.alias(
          'platformConfigSingleton.disabledRgmButtonEnabled',
        ),
        platformJson: {},
        defaultMapsInfo: {},
        allMapsInfo: [],
        queuesById: {},
        queuesByCategory: {},
        availableQueues: {},
        availableQueueIds: s.Ember.A(),
        mapsPlatformJson: s.Ember.computed({
          set: function (e, t) {
            if (t && t.reduce) {
              this.set('allMapsInfo', t);
              const e = t.reduce(
                (e, t) => (t.isDefault && (e[t.id] = t), e),
                {},
              );
              this.set('defaultMapsInfo', e);
            }
          },
        }),
        queuesChangedObserver: s.Ember.observer(
          'allMapsInfo',
          'platformJson',
          'platformEnabledQueues',
          'disabledRgmButtonEnabled',
          'gameSelectEligibilityHash',
          function () {
            const e = {},
              t = {},
              a = {},
              n = [],
              o = this.get('platformEnabledQueues'),
              i = this.get('platformJson');
            if (!i || !i.length) return;
            let r = !1;
            if (
              (i.forEach((i) => {
                const s = i.id,
                  c = i.category,
                  m = i.mapId,
                  d = i.gameMode,
                  p = i.assetMutator,
                  u = this.getGameType(m, d);
                (t[c] = t[c] ? t[c] : {}),
                  t[c][u] ||
                    (t[c][u] = {
                      mapId: m,
                      gameMode: d,
                      assetMutator: p,
                      queues: [],
                    }),
                  t[c][u].queues.push(s);
                const g = -1 !== o.indexOf(s),
                  b = i.queueAvailability === l.QUEUE_AVAILABILITY.enabled;
                if (g && b) {
                  const e = this.getMapModeInfo(m, d);
                  !r && e && e.isRGM && (r = !0),
                    (a[c] = a[c] ? a[c] : {}),
                    a[c][u] ||
                      (a[c][u] = {
                        mapId: m,
                        gameMode: d,
                        assetMutator: p,
                        queues: [],
                      }),
                    a[c][u].queues.push(s),
                    n.push(s);
                }
                (i.available = b), (e[s] = i);
              }),
              this.get('disabledRgmButtonEnabled') &&
                !r &&
                a[l.CATEGORY_NAMES.PVP])
            ) {
              const e = this.getGameType(
                l.DISABLED_RGM_GAME_TYPE.mapId,
                l.DISABLED_RGM_GAME_TYPE.gameMode,
              );
              a[l.CATEGORY_NAMES.PVP][e] = l.DISABLED_RGM_GAME_TYPE;
            }
            this.set('queuesById', e),
              this.set('queuesByCategory', t),
              this.set('availableQueues', a),
              this.set('availableQueueIds', s.Ember.A(n));
          },
        ),
        getPickTypeForQueue: function (e) {
          const t = this.get('queuesById');
          if (!t || !t[e]) return '';
          const a = t[e].gameTypeConfig.pickMode,
            n = l.PICK_TYPES[a] ? l.PICK_TYPES[a] : '';
          return n;
        },
        getQueueTypeForQueue: function (e) {
          const t = this.get('queuesById');
          return t && t[e] ? t[e].type : '';
        },
        getMapInfoById: function (e) {
          return this.defaultMapsInfo[e];
        },
        getMapModeInfo: function (e, t) {
          const a = this.get('allMapsInfo');
          return a.find((a) => a.id === e && a.gameMode === t);
        },
        getQueueById: function (e) {
          return this.queuesById[e];
        },
        getQueuesByCategory: function (e) {
          const t = this.get('queuesByCategory');
          return t[e] ? t[e] : null;
        },
        getTutorialQueues: function () {
          return l.TUTORIAL_GAME_TYPES;
        },
        getAllAvailableGameTypesForCategory: function (e) {
          if ('Training' === e) return this.getTutorialQueues();
          const t = this.get('availableQueues'),
            a = [];
          let n = {};
          for (const o in (t[e] && (n = t[e]), n)) a.push(n[o]);
          return this._sortGameTypes(a), a;
        },
        _sortGameTypes: function (e) {
          e.sort((e, t) => {
            let a = this._compareGameMode(e, t, 'CLASSIC');
            return (
              0 === a && (a = this._compareGameMode(e, t, 'ARAM')),
              0 === a && (a = this._compareGameMode(e, t, 'TFT')),
              a
            );
          });
        },
        _compareGameMode: function (e, t, a) {
          if (e.gameMode === a) {
            if (t.gameMode !== a) return -1;
          } else if (t.gameMode === a) return 1;
          return 0;
        },
        getFlatQueuesByCategory: function (e) {
          const t = this.getQueuesByCategory(e) || [],
            a = (0, i.default)(t),
            n = a.map((e) => t[e].queues);
          return [].concat(...n);
        },
        getAllQueuesForCategoryAndGameType: function (e, t, a) {
          let n = [];
          const o = this.get('queuesByCategory'),
            i = this.getGameType(t, a);
          return (
            o[e] && o[e][i] && (n = o[e][i].queues),
            this._sortQueuesPlaceDefaultsFirst(n),
            n
          );
        },
        getAvailableQueuesForCategoryAndGameType: function (e, t, a) {
          let n = [];
          if ('Training' === e && this.get('tutorialFlowEnabled'))
            return l.TUTORIAL_QUEUE_IDS;
          const o = this.get('availableQueues'),
            i = this.getGameType(t, a);
          return (
            o[e] && o[e][i] && o[e][i].queues && (n = o[e][i].queues),
            this._sortQueuesPlaceDefaultsFirst(n),
            n
          );
        },
        _sortQueuesPlaceDefaultsFirst: function (e) {
          const t = this.platformConfigSingleton.get('defaultGameQueues');
          return t
            ? e.sort(function (e, a) {
                const n = t.indexOf(e),
                  o = t.indexOf(a);
                return -1 < n ? (-1 < o ? n - o : -1) : -1 < o ? 1 : 0;
              })
            : void 0;
        },
        getDefaultQueueForCategory: function (e) {
          const t = this.get('availableQueues');
          if (t[e]) {
            const a = s.lodash.keys(t[e])[0];
            return t[e][a].queues[0];
          }
          return null;
        },
        categoryHasQueues: function (e) {
          const t = this.get('availableQueues');
          return !!t[e];
        },
        getGameType: function (e, t) {
          return e + '-' + t;
        },
      });
    t.default = b;
  },
  function (e, t, a) {
    a(196), (e.exports = a(4).Object.keys);
  },
  function (e, t, a) {
    var n = a(34),
      o = a(59);
    a(100)('keys', function () {
      return function (e) {
        return o(n(e));
      };
    });
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(68),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n),
      i = a(0);
    const s = (0, o.default)({
        LcuLobbyPotatoModeForced: !1,
        LcuSocialDefaultGameQueues: '2,33,32,31',
        LcuSocialEnabledGameQueues: '2,400,420,440,8,9,65,33,32,31,800,810,820',
        LcuSocialAggressiveScanning: !1,
        LcuTutorialEnabled: !0,
        LcuTutorialNewEnabled: !1,
        QueueRestrictionAllowablePremadeSizesForQueueId440: '1,2,3,4,5',
        QueueRewardsSoloAutoFillProtectionForQueueId440: !1,
        QueueRewardsSoloIpRewardsForQueueId440: !1,
        FeaturedModesDisabledRgmButtonEnabled: !0,
        FeaturedModesGoldenSpatulaClubDisabled: !1,
        MutatorsEnabledModes: [],
        EosTextEnabled: !1,
        EternalsEnabled: !1,
        PartiesV2Enabled: !1,
        LobbyChallengesEnabled: !1,
      }),
      l = (0, i.emberDataBinding)({
        Ember: i.Ember,
        websocket: (0, i.getProvider)().getSocket(),
        logPrefix: 'plugin:parties:platform-config-singleton',
        basePaths: { platformConfig: '/lol-platform-config' },
        boundProperties: {
          LcuLobbyPotatoModeForced: {
            api: 'platformConfig',
            path: '/v1/namespaces/LcuLobby/PotatoModeForced',
          },
          LcuSocialDefaultGameQueues: {
            api: 'platformConfig',
            path: '/v1/namespaces/LcuSocial/DefaultGameQueues',
          },
          LcuSocialEnabledGameQueues: {
            api: 'platformConfig',
            path: '/v1/namespaces/LcuSocial/EnabledGameQueues',
          },
          LcuSocialAggressiveScanning: {
            api: 'platformConfig',
            path: '/v1/namespaces/LcuSocial/AggressiveScanning',
          },
          LcuTutorialEnabled: {
            api: 'platformConfig',
            path: '/v1/namespaces/LcuTutorial/Enabled',
          },
          LcuTutorialNewEnabled: {
            api: 'platformConfig',
            path: '/v1/namespaces/LcuTutorial/NewPlayerExperienceEnabled',
          },
          QueueRestrictionAllowablePremadeSizesForQueueId440: {
            api: 'platformConfig',
            path: '/v1/namespaces/QueueRestriction/AllowablePremadeSizesForQueueId440',
          },
          QueueRewardsSoloAutoFillProtectionForQueueId440: {
            api: 'platformConfig',
            path: '/v1/namespaces/QueueRewards/SoloAutoFillProtectionForQueueId440',
          },
          QueueRewardsSoloIpRewardsForQueueId440: {
            api: 'platformConfig',
            path: '/v1/namespaces/QueueRewards/SoloIpRewardsForQueueId440',
          },
          FeaturedModesDisabledRgmButtonEnabled: {
            api: 'platformConfig',
            path: '/v1/namespaces/FeaturedModes/DisabledRgmButtonEnabled',
          },
          FeaturedModesGoldenSpatulaClubDisabled: {
            api: 'platformConfig',
            path: '/v1/namespaces/FeaturedModes/GoldenSpatulaClubDisabled',
          },
          MutatorsEnabledModes: {
            api: 'platformConfig',
            path: 'v1/namespaces/Mutators/EnabledModes',
          },
          TftPatchNotesUrl: {
            api: 'platformConfig',
            path: '/v1/namespaces/LcuTft/PatchNotesUrl',
          },
          initialConfigurationComplete: {
            api: 'platformConfig',
            path: '/v1/initial-configuration-complete',
          },
          EternalsEnabled: {
            api: 'platformConfig',
            path: '/v1/namespaces/Eternals/Enabled',
          },
          PartiesV2Enabled: {
            api: 'platformConfig',
            path: '/v1/namespaces/Challenges/PartiesV2Enabled',
          },
          LobbyChallengesEnabled: {
            api: 'platformConfig',
            path: '/v1/namespaces/Challenges/LobbyChallengesEnabled',
          },
        },
      }),
      r = i.Ember.Object.extend(l, {
        potatoModeForced: i.Ember.computed(
          'initialConfigurationComplete',
          'LcuLobbyPotatoModeForced',
          function () {
            return this._getValueOrDefault('LcuLobbyPotatoModeForced');
          },
        ),
        defaultGameQueues: i.Ember.computed(
          'initialConfigurationComplete',
          'LcuSocialDefaultGameQueues',
          function () {
            const e = this._getValueOrDefault('LcuSocialDefaultGameQueues');
            return this._splitQueues(e);
          },
        ),
        enabledGameQueues: i.Ember.computed(
          'initialConfigurationComplete',
          'LcuSocialEnabledGameQueues',
          function () {
            const e = this._getValueOrDefault('LcuSocialEnabledGameQueues');
            return this._splitQueues(e);
          },
        ),
        aggressiveScanning: i.Ember.computed(
          'initialConfigurationComplete',
          'LcuSocialAggressiveScanning',
          function () {
            return this._getValueOrDefault('LcuSocialAggressiveScanning');
          },
        ),
        tutorialEnabled: i.Ember.computed(
          'initialConfigurationComplete',
          'LcuTutorialEnabled',
          function () {
            return this._getValueOrDefault('LcuTutorialEnabled');
          },
        ),
        tutorialFlowEnabled: i.Ember.computed(
          'initialConfigurationComplete',
          'LcuTutorialNewEnabled',
          function () {
            return this._getValueOrDefault('LcuTutorialNewEnabled');
          },
        ),
        allowablePremadeSizesForQueue440: i.Ember.computed(
          'initialConfigurationComplete',
          'QueueRestrictionAllowablePremadeSizesForQueueId440',
          function () {
            return this._getValueOrDefault(
              'QueueRestrictionAllowablePremadeSizesForQueueId440',
            );
          },
        ),
        soloAutoFillProtectionForQueueId440: i.Ember.computed(
          'initialConfigurationComplete',
          'QueueRewardsSoloAutoFillProtectionForQueueId440',
          function () {
            return this._getValueOrDefault(
              'QueueRewardsSoloAutoFillProtectionForQueueId440',
            );
          },
        ),
        soloIpRewardsForQueueId440: i.Ember.computed(
          'initialConfigurationComplete',
          'QueueRewardsSoloIpRewardsForQueueId440',
          function () {
            return this._getValueOrDefault(
              'QueueRewardsSoloIpRewardsForQueueId440',
            );
          },
        ),
        disabledRgmButtonEnabled: i.Ember.computed(
          'initialConfigurationComplete',
          'FeaturedModesDisabledRgmButtonEnabled',
          function () {
            return this._getValueOrDefault(
              'FeaturedModesDisabledRgmButtonEnabled',
            );
          },
        ),
        goldenSpatulaClubDisabled: i.Ember.computed(
          'initialConfigurationComplete',
          'FeaturedModesGoldenSpatulaClubDisabled',
          function () {
            return this._getValueOrDefault(
              'FeaturedModesGoldenSpatulaClubDisabled',
            );
          },
        ),
        enabledCustomGameModes: i.Ember.computed(
          'initialConfigurationComplete',
          'MutatorsEnabledModes',
          function () {
            return this._getValueOrDefault('MutatorsEnabledModes');
          },
        ),
        eternalsEnabled: i.Ember.computed(
          'initialConfigurationComplete',
          'EternalsEnabled',
          function () {
            return this._getValueOrDefault('EternalsEnabled');
          },
        ),
        partiesV2Enabled: i.Ember.computed(
          'initialConfigurationComplete',
          'PartiesV2Enabled',
          function () {
            return this._getValueOrDefault('PartiesV2Enabled');
          },
        ),
        lobbyChallengesEnabled: i.Ember.computed(
          'initialConfigurationComplete',
          'LobbyChallengesEnabled',
          function () {
            return this._getValueOrDefault('LobbyChallengesEnabled');
          },
        ),
        _getValueOrDefault: function (e) {
          const t = this.get('initialConfigurationComplete'),
            a = this.get(e);
          return this._isNill(a) && !t ? void 0 : this._isNill(a) ? s[e] : a;
        },
        _splitQueues: function (e) {
          const t = e ? `${e}`.split(',') : [],
            a = [];
          return (
            t.forEach((e) => {
              a.push(parseInt(e, 10));
            }),
            i.Ember.A(a)
          );
        },
        _isNill: function (e) {
          return e === void 0 || null === e || '' === e;
        },
      });
    t.default = r;
  },
  function (e, t, a) {
    a(199), (e.exports = a(4).Object.freeze);
  },
  function (e, t, a) {
    var n = a(14),
      o = a(69).onFreeze;
    a(100)('freeze', function (e) {
      return function (t) {
        return e && n(t) ? e(o(t)) : t;
      };
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(89),
      i = n(o),
      s = a(70),
      l = n(s),
      r = a(0),
      c = a(30),
      m = n(c),
      d = a(3),
      p = n(d),
      u = a(7);
    const g = (0, p.default)('plugin:parties:eligibilities:error'),
      b = [
        'teammaxsizerestriction',
        'teamsizerestriction',
        'gameversionmismatch',
        'missingtoken',
      ],
      h = ['missingtoken', 'playerranksoloonlyrestriction'],
      f = (0, r.emberDataBinding)({
        Ember: r.Ember,
        websocket: (0, r.getProvider)().getSocket(),
        logPrefix: 'service:queue-eligibility',
        basePaths: { lobby: '/lol-lobby' },
        boundProperties: { lobby: { api: 'lobby', path: '/v2/lobby' } },
      });
    e.exports = r.Ember.Object.extend(f, {
      queues: m.default,
      eligibilities: null,
      validForSummonerIds: [],
      restrictions: r.Ember.computed.alias('lobby.restrictions'),
      warnings: r.Ember.computed.alias('lobby.warnings'),
      lobbyRestrictionsDoNotExist: r.Ember.computed.equal(
        'restrictions',
        void 0,
      ),
      lobbyRestrictionsExist: r.Ember.computed.not(
        'lobbyRestrictionsDoNotExist',
      ),
      memberSummonerIds: r.Ember.computed.mapBy('lobby.members', 'summonerId'),
      playerRestrictions: null,
      teamRestrictions: null,
      restrictionsObserver: r.Ember.on(
        'init',
        r.Ember.observer(
          'restrictions.[]',
          'restrictions.@each.restrictionCode',
          'memberSummonerIds',
          function () {
            const e = this.get('memberSummonerIds');
            e && r.Ember.run.once(this, this._setPlayerAndTeamRestrictions);
          },
        ),
      ),
      hasMinorRestriction: function (e) {
        for (let t = 0; t < e.length; t++) {
          const a = e[t];
          if (-1 !== u.TENCENT_MINOR_RESTRICTIONS.indexOf(a.restrictionCode))
            return !0;
        }
        return !1;
      },
      isTeamRestriction: function (e) {
        return -1 !== b.indexOf(e.restrictionCode.toLowerCase());
      },
      isPlayerAndTeamRestriction: function (e) {
        return (
          -1 !== b.indexOf(e.restrictionCode.toLowerCase()) &&
          -1 !== h.indexOf(e.restrictionCode.toLowerCase())
        );
      },
      groupMissingTokenRestrictions: function (e) {
        const t = [],
          a = new l.default();
        let n = e;
        if (
          e &&
          ((n = e.slice(0)),
          e.forEach((e) => {
            const n = e.restrictionCode;
            null !== n &&
              u.MISSING_TOKEN_ERRORS.includes(n) &&
              (t.push(e.restrictionArgs.errorCode),
              e.summonerIds &&
                e.summonerIds.forEach((e) => {
                  a.add(e);
                }));
          }),
          0 < t.length)
        ) {
          n = n.filter(
            (e) =>
              !(e.restrictionArgs && e.restrictionArgs.errorCode) ||
              !u.MISSING_TOKEN_ERRORS.includes(e.restrictionCode),
          );
          const e = r.Ember.Object.create({
            restrictionCode: 'MissingToken',
            summonerIds: r.Ember.A((0, i.default)(a)),
            restrictionArgs: { errorCodes: t.join(', ') },
          });
          n.push(e);
        }
        return n;
      },
      _setPlayerAndTeamRestrictions: function () {
        let e = this.get('restrictions');
        e = this.groupMissingTokenRestrictions(e);
        const t = [],
          a = [],
          n = (e && e.length) || 0;
        for (let o = 0; o < n; o++) {
          const n = e[o];
          this.isPlayerAndTeamRestriction(n)
            ? (a.push(n), t.push(n))
            : this.isTeamRestriction(n)
            ? a.push(n)
            : t.push(n);
        }
        this.set('playerRestrictions', r.Ember.A(t)),
          this.set('teamRestrictions', r.Ember.A(a));
      },
      hasLobbyRestrictions: r.Ember.computed.gt('restrictions.length', 0),
      hasLobbyTeamSizeRestriction: r.Ember.computed(
        'hasLobbyRestrictions',
        'restrictions',
        function () {
          if (this.get('hasLobbyRestrictions')) {
            const e = this.get('restrictions');
            if (e)
              for (let t = 0, a = e.length; t < a; t++)
                if (
                  'teammaxsizerestriction' ===
                  e[t].restrictionCode.toLowerCase()
                )
                  return !0;
          }
          return !1;
        },
      ),
      _shouldUseLobbyForQueue: function (e) {
        return (
          this.get('lobbyRestrictionsExist') &&
          this.get('lobby.gameConfig.queueId') === e
        );
      },
      restrictionsForQueue: function (e) {
        if (this._shouldUseLobbyForQueue(e)) return this.get('restrictions');
        const t = this.get('eligibilities');
        return t ? r.Ember.A(t.filterBy('queueId', e)) : r.Ember.A();
      },
      fetchEligibilities: function () {
        return this.checkEligibility().then(
          (e) => {
            this._processEligibilities(e);
          },
          () => {
            g('FAILED TO FETCH ELIGIBILITIES, PROVIDING BACKFILL'),
              this._backfillEligibilities();
          },
        );
      },
      _backfillEligibilities: function () {
        const e = this.get('queues.availableQueueIds'),
          t = {};
        if (e && e.length)
          for (let a = 0; a < e.length; a++)
            t[e[a]] = { eligible: !0, restrictions: [] };
        this.set('eligibilities', t);
      },
      _mapEligibilities: function (e) {
        const t = {};
        return e && e.length
          ? (e.forEach((e) => {
              (e.restrictions = this.groupMissingTokenRestrictions(
                e.restrictions,
              )),
                (t[e.queueId] = e);
            }),
            t)
          : t;
      },
      _processEligibilities: function (e) {
        const t = this._mapEligibilities(e);
        return this.set('eligibilities', t), t;
      },
      checkEligibility: function () {
        return this.get('api.lobby').post('/v2/eligibility/party');
      },
      hasRankedDivisionRestriction: !1,
      checkForRankedDivisionRestriction: function (e) {
        if (
          (this.set('hasRankedDivisionRestriction', !1),
          !(2 > e.members.length))
        ) {
          const t = e.gameConfig.queueId,
            a = m.default.getQueueById(t);
          if (a && a.isRanked) {
            const t = [];
            for (let a = 0; a < e.members.length; a++)
              t.push(e.members[a].summonerId);
            this.checkEligibility().then((e) => {
              if (e && e.length) {
                const t = e[0];
                if (!t.eligible && 0 < t.restrictions.length) {
                  const e = t.restrictions[0];
                  'TeamDivisionRestriction' === e.restrictionCode &&
                    this.set('hasRankedDivisionRestriction', !0);
                }
              }
            });
          }
        }
      },
      getLocInfoForPlayerRankSoloOnlyRestriction: function (e) {
        const t = {
          key: 'game_select_queue_restriction_player_playerranksoloonlyrestriction_generic',
          args: {},
        };
        if (
          !e.restrictionArgs ||
          !e.restrictionArgs.maxTierForPremadeSize2 ||
          !e.restrictionArgs.maxDivisionForPremadeSize2
        )
          return t;
        const a = r.LeagueTierNames.getUpOneDivision(
          e.restrictionArgs.maxTierForPremadeSize2,
          e.restrictionArgs.maxDivisionForPremadeSize2,
        );
        if (a) {
          const e = r.LeagueTierNames.isLowestTierDivision(a.tier, a.division);
          e
            ? ((t.key =
                'game_select_queue_restriction_player_playerranksoloonlyrestriction_tier'),
              (t.args.minTierForPlayerRankSoloOnlyRestriction =
                r.LeagueTierNames.getTierName(a.tier)))
            : ((t.key =
                'game_select_queue_restriction_player_playerranksoloonlyrestriction_tieranddivision'),
              (t.args.minTierAndDivisionForPlayerRankSoloOnlyRestriction =
                r.LeagueTierNames.getFullTierDivisionName(a.tier, a.division)));
        }
        return t;
      },
    });
  },
  function (e, t, a) {
    a(93), a(35), a(41), a(202), a(209), a(212), a(214), (e.exports = a(4).Set);
  },
  function (e, t, a) {
    'use strict';
    var n = a(203),
      o = a(101),
      i = 'Set';
    e.exports = a(204)(
      i,
      function (e) {
        return function () {
          return e(this, 0 < arguments.length ? arguments[0] : void 0);
        };
      },
      {
        add: function (e) {
          return n.def(o(this, i), (e = 0 === e ? 0 : e), e);
        },
      },
      n,
    );
  },
  function (e, t, a) {
    'use strict';
    var n = a(20).f,
      o = a(84),
      i = a(67),
      s = a(19),
      l = a(65),
      r = a(36),
      c = a(55),
      m = a(83),
      d = a(98),
      p = a(24),
      u = a(69).fastKey,
      g = a(101),
      b = p ? '_s' : 'size',
      h = function (e, t) {
        var a = u(t),
          n;
        if ('F' !== a) return e._i[a];
        for (n = e._f; n; n = n.n) if (n.k == t) return n;
      };
    e.exports = {
      getConstructor: function (e, t, a, c) {
        var m = e(function (e, n) {
          l(e, m, t, '_i'),
            (e._t = t),
            (e._i = o(null)),
            (e._f = void 0),
            (e._l = void 0),
            (e[b] = 0),
            void 0 != n && r(n, a, e[c], e);
        });
        return (
          i(m.prototype, {
            clear: function () {
              for (var e = g(this, t), a = e._i, n = e._f; n; n = n.n)
                (n.r = !0), n.p && (n.p = n.p.n = void 0), delete a[n.i];
              (e._f = e._l = void 0), (e[b] = 0);
            },
            delete: function (e) {
              var a = g(this, t),
                n = h(a, e);
              if (n) {
                var o = n.n,
                  i = n.p;
                delete a._i[n.i],
                  (n.r = !0),
                  i && (i.n = o),
                  o && (o.p = i),
                  a._f == n && (a._f = o),
                  a._l == n && (a._l = i),
                  a[b]--;
              }
              return !!n;
            },
            forEach: function (e) {
              g(this, t);
              for (
                var a = s(e, 1 < arguments.length ? arguments[1] : void 0, 3),
                  n;
                (n = n ? n.n : this._f);

              )
                for (a(n.v, n.k, this); n && n.r; ) n = n.p;
            },
            has: function (e) {
              return !!h(g(this, t), e);
            },
          }),
          p &&
            n(m.prototype, 'size', {
              get: function () {
                return g(this, t)[b];
              },
            }),
          m
        );
      },
      def: function (e, t, a) {
        var n = h(e, t),
          o,
          i;
        return (
          n
            ? (n.v = a)
            : ((e._l = n =
                {
                  i: (i = u(t, !0)),
                  k: t,
                  v: a,
                  p: (o = e._l),
                  n: void 0,
                  r: !1,
                }),
              !e._f && (e._f = n),
              o && (o.n = n),
              e[b]++,
              'F' !== i && (e._i[i] = n)),
          e
        );
      },
      getEntry: h,
      setStrong: function (e, t, a) {
        c(
          e,
          t,
          function (e, a) {
            (this._t = g(e, t)), (this._k = a), (this._l = void 0);
          },
          function () {
            for (var e = this, t = e._k, a = e._l; a && a.r; ) a = a.p;
            return e._t && (e._l = a = a ? a.n : e._t._f)
              ? 'keys' == t
                ? m(0, a.k)
                : 'values' == t
                ? m(0, a.v)
                : m(0, [a.k, a.v])
              : ((e._t = void 0), m(1));
          },
          a ? 'entries' : 'values',
          !a,
          !0,
        ),
          d(t);
      },
    };
  },
  function (e, t, a) {
    'use strict';
    var n = a(9),
      o = a(11),
      i = a(69),
      s = a(29),
      l = a(23),
      r = a(67),
      c = a(36),
      m = a(65),
      d = a(14),
      p = a(43),
      u = a(20).f,
      g = a(205)(0),
      b = a(24);
    e.exports = function (e, t, a, h, f, y) {
      var _ = n[e],
        v = _,
        S = f ? 'set' : 'add',
        x = v && v.prototype,
        E = {};
      return (
        b &&
        'function' == typeof v &&
        (y ||
          (x.forEach &&
            !s(function () {
              new v().entries().next();
            })))
          ? ((v = t(function (t, a) {
              m(t, v, e, '_c'),
                (t._c = new _()),
                void 0 != a && c(a, f, t[S], t);
            })),
            g(
              [
                'add',
                'clear',
                'delete',
                'forEach',
                'get',
                'has',
                'set',
                'keys',
                'values',
                'entries',
                'toJSON',
              ],
              function (e) {
                var t = 'add' == e || 'set' == e;
                e in x &&
                  !(y && 'clear' == e) &&
                  l(v.prototype, e, function (n, a) {
                    if ((m(this, v, e), t || !y || d(n))) {
                      var o = this._c[e](0 === n ? 0 : n, a);
                      return t ? this : o;
                    }
                  });
              },
            ),
            y ||
              u(v.prototype, 'size', {
                get: function () {
                  return this._c.size;
                },
              }))
          : ((v = h.getConstructor(t, e, f, S)),
            r(v.prototype, a),
            (i.NEED = !0)),
        p(v, e),
        (E[e] = v),
        o(o.G + o.W + o.F, E),
        y || h.setStrong(v, e, f),
        v
      );
    };
  },
  function (e, t, a) {
    var n = a(19),
      o = a(53),
      i = a(34),
      s = a(42),
      l = a(206);
    e.exports = function (e, t) {
      var a = 1 == e,
        r = 4 == e,
        c = 6 == e,
        m = t || l;
      return function (t, l, d) {
        for (
          var p = i(t),
            u = o(p),
            g = n(l, d, 3),
            b = s(u.length),
            h = 0,
            f = a ? m(t, b) : 2 == e ? m(t, 0) : void 0,
            y,
            _;
          b > h;
          h++
        )
          if ((5 == e || c || h in u) && ((y = u[h]), (_ = g(y, h, p)), e))
            if (a) f[h] = _;
            else if (_)
              switch (e) {
                case 3:
                  return !0;
                case 5:
                  return y;
                case 6:
                  return h;
                case 2:
                  f.push(y);
              }
            else if (r) return !1;
        return c ? -1 : 3 == e || r ? r : f;
      };
    };
  },
  function (e, t, a) {
    var n = a(207);
    e.exports = function (e, t) {
      return new (n(e))(t);
    };
  },
  function (e, t, a) {
    var n = a(14),
      o = a(208),
      i = a(10)('species');
    e.exports = function (e) {
      var t;
      return (
        o(e) &&
          ((t = e.constructor),
          'function' == typeof t &&
            (t === Array || o(t.prototype)) &&
            (t = void 0),
          n(t) && ((t = t[i]), null === t && (t = void 0))),
        void 0 === t ? Array : t
      );
    };
  },
  function (e, t, a) {
    var n = a(31);
    e.exports =
      Array.isArray ||
      function (e) {
        return 'Array' == n(e);
      };
  },
  function (e, t, a) {
    var n = a(11);
    n(n.P + n.R, 'Set', { toJSON: a(210)('Set') });
  },
  function (e, t, a) {
    var n = a(44),
      o = a(211);
    e.exports = function (e) {
      return function () {
        if (n(this) != e) throw TypeError(e + "#toJSON isn't generic");
        return o(this);
      };
    };
  },
  function (e, t, a) {
    var n = a(36);
    e.exports = function (e, t) {
      var a = [];
      return n(e, !1, a.push, a, t), a;
    };
  },
  function (e, t, a) {
    a(213)('Set');
  },
  function (e, t, a) {
    'use strict';
    var n = a(11);
    e.exports = function (e) {
      n(n.S, e, {
        of: function () {
          for (var e = arguments.length, t = Array(e); e--; )
            t[e] = arguments[e];
          return new this(t);
        },
      });
    };
  },
  function (e, t, a) {
    a(215)('Set');
  },
  function (e, t, a) {
    'use strict';
    var n = a(11),
      o = a(32),
      i = a(19),
      s = a(36);
    e.exports = function (e) {
      n(n.S, e, {
        from: function (e) {
          var t = arguments[1],
            a,
            l,
            r,
            n;
          return (o(this), (a = void 0 !== t), a && o(t), void 0 == e)
            ? new this()
            : ((l = []),
              a
                ? ((r = 0),
                  (n = i(t, arguments[2], 2)),
                  s(e, !1, function (e) {
                    l.push(n(e, r++));
                  }))
                : s(e, !1, l.push, l),
              new this(l));
        },
      });
    };
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-game-invites">\r\n  <div class="parties-game-info-panel-invites">\r\n    <div class="parties-game-invite-heading">\r\n      <div class="parties-game-invite-heading-container">\r\n        <div class="parties-game-invite-heading-text"></div>\r\n        <div class="parties-game-invite-count parties-hide-game-invite-count"></div>\r\n      </div>\r\n      <button class="parties-clear-all-button parties-hide-clear-all"></button>\r\n    </div>\r\n    <div class="parties-game-invites parties-game-invite-scroll parties-blue-scroll">\r\n    </div>\r\n  </div>\r\n</template>\r\n';
  },
  function (e, t, a) {
    var n = a(16);
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host .parties-game-invite-heading {\n  font-family: var(--font-display);\n}\n:host .parties-game-invite-heading {\n  -webkit-user-select: none;\n}\n:host .parties-game-invite-heading {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-game-invite-heading {\n  text-transform: uppercase;\n}\n:host .parties-game-invite-heading:lang(ko-kr),\n:host .parties-game-invite-heading:lang(ja-jp),\n:host .parties-game-invite-heading:lang(tr-tr),\n:host .parties-game-invite-heading:lang(el-gr),\n:host .parties-game-invite-heading:lang(th-th),\n:host .parties-game-invite-heading:lang(zh-tw) {\n  text-transform: none;\n}\n:host .parties-game-invite-heading {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .parties-game-invite-heading:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-game-invite-heading:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-info-panel-invites {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  max-height: 202px;\n  direction: ltr;\n}\n:host .parties-game-invite-heading {\n  display: flex;\n  align-items: center;\n  height: 32px;\n  color: #a09b8c;\n  padding: 0 5px 0 9px;\n  flex-shrink: 0;\n  pointer-events: none;\n  margin-top: 1px;\n}\n:host .hover-highlight {\n  pointer-events: auto;\n}\n:host .hover-highlight:hover {\n  background: linear-gradient(to right, rgba(10,203,230,0.2), rgba(10,203,230,0));\n  cursor: pointer;\n  color: #f0e6d2;\n}\n:host .hover-highlight:active {\n  color: #cdbe91;\n}\n:host .parties-game-invite-heading-container {\n  flex: 1;\n  display: flex;\n  margin-right: 7px;\n  overflow: hidden;\n}\n:host .parties-game-invite-heading-text {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n:host .parties-game-invite-count {\n  padding-left: 5px;\n}\n:host .parties-game-invite-count.parties-hide-game-invite-count {\n  display: none;\n}\n:host .parties-clear-all-button {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  -webkit-mask: url(' +
          n(a(218)) +
          ') no-repeat center;\n  -webkit-mask-size: 18px;\n  background-color: #c8aa6e;\n  width: 18px;\n  height: 18px;\n  pointer-events: auto;\n}\n:host .parties-clear-all-button:hover {\n  background-color: #f0e6d2;\n}\n:host .parties-clear-all-button:active {\n  background-color: #463714;\n}\n:host .parties-clear-all-button.parties-hide-clear-all {\n  display: none;\n  pointer-events: none;\n}\n:host lol-parties-game-invite {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  flex-shrink: 0;\n}\n:host .parties-game-invite-scroll {\n  flex-grow: 1;\n}\n:host .parties-blue-scroll {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n:host .parties-blue-scroll::-webkit-scrollbar {\n  width: 9px;\n  background: transparent;\n}\n:host .parties-blue-scroll::-webkit-scrollbar-thumb {\n  background: transparent;\n  border-radius: 6px;\n  border: 2px solid transparent;\n  background-clip: padding-box;\n}\n:host .parties-blue-scroll:hover::-webkit-scrollbar-thumb {\n  background-color: #0596aa;\n}\n:host lol-parties-game-invite.use-animation {\n  animation: game-invite-slide-in 0.3s 1;\n}\n:host lol-parties-game-invite.use-animation {\n  animation: game-invite-slide-in 0.3s 1;\n}\n@-moz-keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n@-webkit-keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n@-o-keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n@keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    e.exports = a.p + 'clear_mask.png';
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(2),
      i = n(o),
      s = a(3),
      l = n(s),
      r = a(0),
      c = n(r),
      m = a(37),
      d = n(m),
      p = a(15),
      u = n(p),
      g = a(30),
      b = n(g),
      h = a(71),
      f = n(h);
    const y = c.default.getProvider(),
      _ = y.getSocket(),
      v = 'sfx-ui',
      S = (0, l.default)('plugin:parties:lol-parties-game-invite:error');
    class x extends r.webComponents.ShadowElement {
      templateMarkup() {
        return a(221);
      }
      stylesheetMarkup() {
        return a(222);
      }
      constructor() {
        super(),
          (this._errorOpen = !1),
          (this._gameInvite = null),
          (this._patcherConnected = null),
          (this._patcherState = null),
          (this._chatSettings = null),
          (this._listeners = {}),
          (this._listeners.onMouseOver = this._onMouseOver.bind(this)),
          (this._listeners.onMouseOut = this._onMouseOut.bind(this)),
          (this._listeners.onAcceptClicked = this._acceptGameInvite.bind(this)),
          (this._listeners.onDeclineClicked =
            this._declineGameInvite.bind(this)),
          (this._listeners.onCloseErrorClicked = this._closeError.bind(this)),
          (this._summonerBinding = (0, r.dataBinding)('/lol-summoner', _)),
          (this._lobbyBinding = (0, r.dataBinding)('/lol-lobby', _)),
          (this._toastManager = r.UIKit.getToastManager()),
          (this._templateHelper = r.UIKit.getTemplateHelper());
      }
      connectedCallback() {
        super.connectedCallback(),
          this.addEventListener('mouseover', this._listeners.onMouseOver),
          this.addEventListener('mouseout', this._listeners.onMouseOut),
          this._attachListener(
            '.parties-accept-btn',
            'click',
            this._listeners.onAcceptClicked,
          ),
          this._attachListener(
            '.parties-decline-btn',
            'click',
            this._listeners.onDeclineClicked,
          ),
          this._attachListener(
            '.parties-error-message-close-btn',
            'click',
            this._listeners.onCloseErrorClicked,
          ),
          this._onHoldText();
      }
      disconnectedCallback() {
        super.disconnectedCallback(),
          this.removeEventListener('mouseover', this._listeners.onMouseOver),
          this.removeEventListener('mouseout', this._listeners.onMouseOut),
          this._detachListener(
            '.parties-accept-btn',
            'click',
            this._listeners.onAcceptClicked,
          ),
          this._detachListener(
            '.parties-decline-btn',
            'click',
            this._listeners.onDeclineClicked,
          ),
          this._detachListener(
            '.parties-error-message-close-btn',
            'click',
            this._listeners.onCloseErrorClicked,
          );
      }
      updateGameInvite(e) {
        this._gameInvite = e;
        const t = this._gameInvite ? this._gameInvite.gameConfig : null;
        this._inviteFromPlayerText(this._gameInvite),
          this._updateDisabledReason(),
          t && (this._gameNameText(t), this._gameTypeText(t), this._mapIcon(t)),
          this._updateAcceptable();
      }
      updateUXSettings(e) {
        (this._uxSettings = e), this._animationSettings();
      }
      updateCurrentPlayerChat(e) {
        (this._currentPlayerChat = e),
          this._updateAvailablity(),
          this._updateAcceptable();
      }
      updatePatcherConnected(e) {
        (this._patcherConnected = e),
          this._updateAcceptable(),
          this._updateDisabledReason();
      }
      updatePatcherState(e) {
        (this._patcherState = e),
          this._updateAcceptable(),
          this._updateDisabledReason();
      }
      updateChatSettings(e) {
        (this._chatSettings = e), this._updateAcceptable();
      }
      updateGameSearch(e) {
        (this._gameSearch = e), this._updateDisabledReason();
      }
      _inviteFromPlayerText(e) {
        const t = this.shadowRoot.querySelectorAll('.parties-game-invite-name');
        for (let a = 0; a < t.length; a++) {
          const n = t.item(a);
          n && this._summonerName(n, e.fromSummonerId);
        }
      }
      _gameNameText(e) {
        const t = this._gameName(e),
          a = this.shadowRoot.querySelector('.parties-game-name');
        a && (a.innerHTML = t);
      }
      _gameName(e) {
        let t = '';
        if (e) {
          const a = b.default.getMapModeInfo(e.mapId, e.gameMode);
          t = a.isRGM && a.gameModeShortName ? a.gameModeShortName : a.name;
        }
        return t;
      }
      _gameTypeText(e) {
        let t = this._gameType(e);
        t = t ? t : '';
        const a = this.shadowRoot.querySelector('.parties-game-type');
        a && (a.innerHTML = t);
      }
      _gameType(e) {
        return d.default.gameType(e);
      }
      _mapIcon(e) {
        const t = this._mapKey(e),
          a = this.shadowRoot.querySelector('.parties-map-icon');
        t && a && ((a.className = ''), a.classList.add('parties-map-icon', t));
      }
      _mapKey(e) {
        return d.default.mapKey(e);
      }
      _summonerName(e, t) {
        if (!this._name) {
          const a = `/v1/summoners/${t}`;
          this._summonerBinding.get(a).then((t) => {
            t &&
              t.displayName &&
              ((this._name = t.displayName),
              (e.innerHTML = t ? t.displayName : ''));
          });
        }
      }
      _gridHoverSound() {
        r.Audio.getChannel(v).playSound(
          '/fe/lol-parties/sfx-uikit-grid-big-hover.ogg',
        );
      }
      _onHoldText() {
        const e = this.shadowRoot.querySelector(
          '.parties-game-info-subtitle-hold',
        );
        e &&
          (e.innerHTML = r.tra.get(
            'parties_roster_invite_disabled_in_game_queue',
          ));
      }
      _updateAcceptable() {
        const e = d.default.isReadyForGame(this._patcherState);
        (this._acceptable = d.default.isGameInviteAcceptable(
          this._gameInvite,
          this._chatSettings,
          this._currentPlayerChat,
          this._patcherConnected,
          e,
        )),
          this._acceptable
            ? this._enterAcceptableState()
            : this._enterUnacceptableState();
      }
      _enterAcceptableState() {
        this._enableMapIcon(),
          this._showGameName(),
          this._showGameType(),
          this._hideDisabledReason(),
          this._enableAcceptableButtons(),
          this._showAcceptButton();
      }
      _enterUnacceptableState() {
        this._disableMapIcon(),
          this._hideGameName(),
          this._hideGameType(),
          this._showDisabledReason(),
          this._disabledAcceptableButtons(),
          this._hideAcceptButton();
      }
      _showError() {
        this._removeClass('parties-game-invite-hide', '.parties-error-message');
      }
      _hideError() {
        this._addClass('parties-game-invite-hide', '.parties-error-message');
      }
      _showAcceptButton() {
        this._removeClass('parties-game-invite-hide', '.parties-accept-btn');
      }
      _hideAcceptButton() {
        this._addClass('parties-game-invite-hide', '.parties-accept-btn');
      }
      _enableAcceptableButtons() {
        this._addClass('acceptable', '.parties-game-invite-buttons');
      }
      _disabledAcceptableButtons() {
        this._removeClass('acceptable', '.parties-game-invite-buttons');
      }
      _showDisabledReason() {
        this._removeClassFromAll(
          'parties-game-info-subtitle-hide',
          '.parties-game-info-container .parties-game-info-subtitle-disabled',
        );
      }
      _hideDisabledReason() {
        this._addClassToAll(
          'parties-game-info-subtitle-hide',
          '.parties-game-info-container .parties-game-info-subtitle-disabled',
        );
      }
      _showGameName() {
        this._removeClass(
          'parties-game-info-subtitle-hide',
          '.parties-game-name',
        );
      }
      _hideGameName() {
        this._addClass('parties-game-info-subtitle-hide', '.parties-game-name');
      }
      _showGameType() {
        this._removeClass(
          'parties-game-info-subtitle-hide',
          '.parties-game-type',
        );
      }
      _hideGameType() {
        this._addClass('parties-game-info-subtitle-hide', '.parties-game-type');
      }
      _enableMapIcon() {
        this._removeClass('disabled', '.parties-map-icon');
      }
      _disableMapIcon() {
        this._addClass('disabled', '.parties-map-icon');
      }
      _updateAvailablity() {
        const e = this._currentPlayerChat;
        if (e) {
          const t = e.availability;
          t && 'dnd' === t
            ? this._showDoNotDisturbLayout()
            : this._showAvailableLayout();
        }
      }
      _showAvailableLayout() {
        this._removeClass(
          'parties-game-invite-hide',
          '.parties-game-info-container-available',
        ),
          this._addClass(
            'parties-game-invite-hide',
            '.parties-game-info-container-dnd',
          );
      }
      _showDoNotDisturbLayout() {
        this._removeClass(
          'parties-game-invite-hide',
          '.parties-game-info-container-dnd',
        ),
          this._addClass(
            'parties-game-invite-hide',
            '.parties-game-info-container-available',
          );
      }
      _updateDisabledReason() {
        const e = this._disabledReasonMessage();
        if (e) {
          const t = this.shadowRoot.querySelectorAll(
            '.parties-game-info-container .parties-game-info-subtitle-disabled',
          );
          for (let a = 0; a < t.length; a++) {
            const n = t.item(a);
            n && (n.innerHTML = e);
          }
        }
      }
      _disabledReasonMessage() {
        const e = this._gameInvite;
        if (e) {
          if (!e.canAcceptInvitation) {
            const t = e.restrictions[0] || {
                restrictionCode: 'UnknownRestriction',
              },
              a = t.restrictionCode ? t.restrictionCode.toLowerCase() : '',
              n = t.restrictionArgs;
            return r.tra.formatString(
              `parties_queue_restriction_player_${a}`,
              n,
            );
          }
          return 'ONHOLD' === e.state.toUpperCase() || this._gameSearch
            ? r.tra.get('parties_roster_invite_disabled_in_game_queue')
            : 'REVOKED' === e.state.toUpperCase()
            ? r.tra.get('parties_roster_invite_disabled_expired')
            : this._isPatcherCheckingForUpdates()
            ? r.tra.get('parties_roster_invite_disabled_checking_updates')
            : this._isPatching()
            ? r.tra.get('parties_roster_invite_disabled_patching')
            : this._patcherConnected
            ? null
            : r.tra.get('parties_roster_invite_disabled_patcher_disconnected');
        }
      }
      _isPatcherCheckingForUpdates() {
        const e = this._patcherState;
        return !!e && !e.isUpToDate && 'CheckingForUpdates' === e.action;
      }
      _isPatching() {
        const e = this._patcherState;
        return (
          !!(e && e.action) &&
          ('Patching' === e.action || 'Repairing' === e.action)
        );
      }
      _animationSettings() {
        this._uxSettings && !this._uxSettings.largeAreaAnimationsEnabled
          ? (this._removeClass('use-animation', '.parties-game-invite-buttons'),
            this.classList.remove('use-animation'))
          : (this._addClass('use-animation', '.parties-game-invite-buttons'),
            this.classList.add('use-animation'));
      }
      _onMouseOut() {
        const e = this.previousElementSibling;
        e && e.classList.remove('parties-hide-divider');
      }
      _onMouseOver() {
        const e = this.previousElementSibling;
        e && e.classList.add('parties-hide-divider'), this._gridHoverSound();
      }
      _acceptGameInvite() {
        if (this._gameInvite && this._acceptable) {
          this._playAcceptSound();
          const e = this._gameInvite.invitationId;
          return this._lobbyBinding
            .post(`/v2/received-invitations/${e}/accept`)
            .then(() => {
              (this._errorOpen = !1),
                this._hideError(),
                f.default.gameInviteAccept(),
                this._showParty();
            })
            .catch((t) => {
              let a = '';
              switch (
                (S(`Error accepting game invite, id: ${e} error: ${t}`),
                f.default.logError(
                  'gameInviteAccept',
                  t.translationKey,
                  t.translationKey,
                ),
                t.status)
              ) {
                case 403:
                  a = r.tra.get('parties_game_invite_system_message_game_full');
                  break;
                case 404:
                  a = r.tra.get(
                    'parties_game_invite_system_message_game_not_found',
                  );
                  break;
                case 410:
                  a = r.tra.get(
                    'parties_game_invite_system_message_game_not_found',
                  );
                  break;
                case 438:
                  a = r.tra.get(
                    'parties_game_invite_system_message_game_version_mismatch',
                  );
                  break;
                default:
                  a = r.tra.get(
                    'parties_game_invite_system_message_server_error',
                  );
              }
              this._displayErrorMessage(a);
            });
        }
        return i.default.resolve();
      }
      _displayErrorMessage(e, t = 5e3) {
        this._addErrorMessage(e),
          (this._errorOpen = !0),
          this._showError(),
          this._toast(e),
          this._playErrorSound(),
          setTimeout(() => {
            this._closeError();
          }, t);
      }
      _declineGameInvite() {
        if (this._gameInvite) {
          this._playClickSound();
          const e = this._gameInvite.invitationId;
          this._lobbyBinding
            .post(`/v2/received-invitations/${e}/decline`)
            .then(() => {
              f.default.gameInviteDecline();
            })
            .catch((t) => {
              S(`Error declining game invite, id: ${e} error: ${t}`),
                f.default.logError(
                  'declineGameInvite',
                  t.translationKey,
                  t.translationKey,
                );
            });
        }
      }
      _addErrorMessage(e) {
        const t = this.shadowRoot.querySelector('.parties-error-message-text');
        t && (t.innerHTML = e);
      }
      _closeError() {
        (this._errorOpen = !1), this._hideError();
      }
      _playAcceptSound() {
        r.Audio.getChannel(v).playSound(
          '/fe/lol-parties/sfx-soc-ui-gameinvite-accept-click.ogg',
        );
      }
      _playErrorSound() {
        r.Audio.getChannel(v).playSound(
          '/fe/lol-parties/sfx-login-notif-login-fail.ogg',
        );
      }
      _playClickSound() {
        r.Audio.getChannel(v).playSound(
          '/fe/lol-parties/sfx-soc-ui-click-generic.ogg',
        );
      }
      _addClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && !a.classList.contains(e) && a.classList.add(e);
      }
      _addClassToAll(e, t) {
        const a = this.shadowRoot.querySelectorAll(t);
        for (let n = 0; n < a.length; n++) {
          const t = a.item(n);
          t && !t.classList.contains(e) && t.classList.add(e);
        }
      }
      _removeClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && a.classList.contains(e) && a.classList.remove(e);
      }
      _removeClassFromAll(e, t) {
        const a = this.shadowRoot.querySelectorAll(t);
        for (let n = 0; n < a.length; n++) {
          const t = a.item(n);
          t && t.classList.contains(e) && t.classList.remove(e);
        }
      }
      _attachListener(e, t, a) {
        const n = this.shadowRoot.querySelector(e);
        n && n.addEventListener(t, a);
      }
      _detachListener(e, t, a) {
        const n = this.shadowRoot.querySelector(e);
        n && n.removeEventListener(t, a);
      }
      _toast(e) {
        const t = this._templateHelper.contentBlockNotification(e);
        this._toastManager.add({ type: 'DialogToast', data: { contents: t } });
      }
      _showParty() {
        const e = u.default.get('viewportApiKey'),
          t = r.Viewport.main().getScreenRoot(e, 'rcp-fe-lol-parties');
        t.bump();
      }
    }
    (x.tagName = 'lol-parties-game-invite'), (t.default = x);
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    e.exports = n.Ember.Object.extend({
      viewportApiKey: void 0,
      isShowing: !1,
    });
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-game-invite">\r\n  <div class="parties-game-invite">\r\n    <div class="parties-map-icon"></div>\r\n\r\n    <div class="parties-game-info-container parties-game-info-container-dnd parties-game-invite-hide">\r\n      <div class="parties-game-invite-name"></div>\r\n      <div class="parties-game-info-subtitle-hold parties-game-info-subtitle-disabled"></div>\r\n    </div>\r\n\r\n    <div class="parties-game-info-container parties-game-info-container-available">\r\n      <div class="parties-game-invite-name"></div>\r\n      <div class="parties-game-info-subtitle parties-game-name"></div>\r\n      <div class="parties-game-info-subtitle parties-game-type"></div>\r\n      <div class="parties-game-info-subtitle parties-game-info-subtitle-disabled"></div>\r\n    </div>\r\n\r\n    <div class="parties-game-invite-buttons use-animation">\r\n      <div class="parties-accept-btn"></div>\r\n      <div class="parties-decline-btn"></div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class="parties-error-message parties-game-invite-hide">\r\n    <div class="parties-error-message-text"></div>\r\n    <div class="parties-error-message-close-btn"></div>\r\n  </div>\r\n</template>\r\n';
  },
  function (e, t, a) {
    var n = a(16);
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host .parties-game-invite-name,\n:host .parties-game-info-subtitle {\n  font-family: var(--font-body);\n}\n:host .parties-game-invite-name,\n:host .parties-game-info-subtitle {\n  -webkit-user-select: none;\n}\n:host .parties-game-invite-name,\n:host .parties-game-info-subtitle {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-game-invite-name {\n  color: #a09b8c;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .parties-game-invite-name:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-info-subtitle {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .parties-game-info-subtitle:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-game-info-subtitle:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-map-icon {\n  width: 34px;\n  height: 32px;\n  background-size: auto 64px;\n  background-repeat: no-repeat;\n}\n:host .parties-map-icon.game_map_howling_abyss {\n  background-image: url(' +
          n(a(72)) +
          ');\n}\n:host .parties-map-icon.game_map_summoners_rift {\n  background-image: url(' +
          n(a(73)) +
          ');\n}\n:host .parties-map-icon.game_map_twisted_treeline {\n  background-image: url(' +
          n(a(74)) +
          ');\n}\n:host .parties-map-icon.game_map_rotating_game_mode {\n  background-image: url(' +
          n(a(75)) +
          ');\n}\n:host .parties-map-icon.game_map_21 {\n  background-image: url(' +
          n(a(76)) +
          ');\n}\n:host .parties-map-icon.game_map_22 {\n  background-image: url(' +
          n(a(77)) +
          ");\n}\n:host.parties-hide-divider .parties-game-invite::after {\n  background: none;\n}\n:host .parties-game-invite {\n  display: flex;\n  align-items: center;\n  height: 72px;\n  flex-shrink: 0;\n  direction: ltr;\n}\n:host .parties-mini {\n  height: 44px;\n}\n:host .parties-game-invite::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 10px;\n  width: calc(100% - 20px);\n  height: 1px;\n  background-color: #005a82;\n}\n:host .parties-game-invite:hover::after {\n  background: none;\n}\n:host .parties-map-icon {\n  margin: 0 10px;\n  background-position: center top;\n}\n:host .parties-map-icon.disabled {\n  background-position-y: -32px;\n}\n:host .parties-game-info-container {\n  line-height: 16px;\n  flex: 1;\n  overflow: hidden;\n}\n:host .parties-game-info-container > * {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n:host .parties-game-invite-name {\n  color: #f0e6d2;\n}\n:host .parties-game-info-subtitle {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n:host .parties-game-info-subtitle.parties-game-info-subtitle-hide {\n  display: none;\n}\n:host .parties-game-info-subtitle-disabled {\n  white-space: normal;\n}\n:host .parties-game-invite:hover {\n  background-image: linear-gradient(to right, rgba(10,203,230,0.2), rgba(10,203,230,0));\n}\n:host .parties-game-invite-buttons {\n  display: flex;\n  max-width: 35px;\n}\n:host .parties-game-invite-buttons.acceptable {\n  max-width: 67px;\n}\n:host .parties-accept-btn,\n:host .parties-decline-btn {\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n  flex-shrink: 0;\n}\n:host .parties-accept-btn {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  background-image: url(" +
          n(a(223)) +
          ');\n  background-size: cover;\n  background-position-y: 0px;\n}\n:host .parties-accept-btn:hover {\n  background-position-y: -30px;\n}\n:host .parties-accept-btn:active {\n  background-position-y: -60px;\n}\n:host .parties-accept-btn:disabled,\n:host .parties-accept-btn[disabled],\n:host .parties-accept-btn.disabled {\n  cursor: default;\n  background-position-y: -90px;\n}\n:host .parties-decline-btn {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  -webkit-mask: url(' +
          n(a(78)) +
          ') no-repeat center;\n  background-color: #0ac8b9;\n  -webkit-mask-size: 18px;\n  margin: 0 3px 0 0 /*rtl:0 0 0 3px*/;\n}\n:host .parties-decline-btn:hover {\n  background-color: #cdfafa;\n}\n:host .parties-decline-btn:active {\n  background-color: #005a82;\n}\n:host .parties-error-message {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background-color: #bc213b;\n  color: #fff;\n  padding: 8px 10px;\n  direction: ltr;\n}\n:host .parties-error-message-close-btn {\n  -webkit-mask: url(' +
          n(a(78)) +
          ') center no-repeat;\n  -webkit-mask-size: 18px;\n  background-color: #fff;\n  height: 18px;\n  width: 18px;\n  margin: 0 0 0 5px /*rtl:0 5px 0 0*/;\n  cursor: pointer;\n}\n:host .parties-game-invite-hide {\n  display: none;\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    e.exports = a.p + 'bluebutton_checkmark.png';
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(0),
      i = n(o),
      s = a(225),
      l = n(s),
      r = a(38);
    const c = i.default.getProvider(),
      m = c.getSocket();
    class d extends o.webComponents.ShadowElement {
      templateMarkup() {
        return a(227);
      }
      stylesheetMarkup() {
        return a(228);
      }
      constructor() {
        super(),
          (this._animationsEnabled = !0),
          (this._haveGameInvites = !1),
          (this._haveGameSearch = !1),
          (this._isInQueueDelay = !1),
          (this._listeners = {}),
          (this._listeners.onUXSettingsChange =
            this._updateUXSettings.bind(this)),
          (this._matchmakingBinding = (0, o.dataBinding)(
            '/lol-matchmaking',
            m,
          )),
          (this._lobbyBinding = (0, o.dataBinding)('/lol-lobby', m));
      }
      connectedCallback() {
        super.connectedCallback(),
          this.addEventListener(
            'gameInviteAdded',
            this._listeners.onGameInviteAdded,
          ),
          this._observeGameInvites(),
          this._observeUXSettings(),
          this._observeSearch(),
          this.shadowRoot
            .querySelector('lol-parties-status-card')
            .addEventListener('click', () => this._showLobby());
      }
      _showLobby() {
        o.PartyAPI.showParty();
      }
      disconnectedCallback() {
        super.disconnectedCallback(),
          this.removeEventListener(
            'gameInviteAdded',
            this._listeners.onGameInviteAdded,
          ),
          this._unobserveUXSettings(),
          this._matchmakingBinding.unobserve(this),
          this._lobbyBinding.unobserve(this);
      }
      _observeSearch() {
        this._matchmakingBinding.observe('v1/search', (e) => {
          this._onGameSearchChanged(e);
        });
      }
      _onGameSearchChanged(e) {
        const t = this._haveGameSearch;
        e && !this._gameSearchIsError(e)
          ? ((this._haveGameSearch = !0),
            this._updateGameInvitesElement(e, 'updateGameSearch'))
          : ((this._haveGameSearch = !1),
            this._updateGameInvitesElement(null, 'updateGameSearch'));
        const a = this._isInQueueDelay;
        (this._isInQueueDelay =
          !!(e && e.lowPriorityData) &&
          e.lowPriorityData.reason === r.LOW_PRIORITY_REASONS.QUEUE_DELAY),
          (t !== this._haveGameSearch || a !== this._isInQueueDelay) &&
            (this._toggleQueueDelayClass(), this._checkIfMagicShouldPlay()),
          this._updateGameSearchElement(e, 'updateGameSearch'),
          this._updatePartyCardShow(!this._haveGameSearch);
      }
      _observeUXSettings() {
        this._UXObserverAttached ||
          (o.UXSettings.addObserver(this._listeners.onUXSettingsChange),
          (this._UXObserverAttached = !0));
      }
      _unobserveUXSettings() {
        this._UXObserverAttached &&
          (o.UXSettings.removeObserver(this._listeners.onUXSettingsChange),
          (this._UXObserverAttached = !1));
      }
      _updateUXSettings(e) {
        (this._animationsEnabled = !e || e.largeAreaAnimationsEnabled),
          this._toggleAnimationsOnSectionElement(),
          this._toggleAnimationsOnMagicElement();
      }
      _toggleAnimationsOnSectionElement() {
        const e = this.shadowRoot.querySelector('.parties-game-section');
        e &&
          (this._animationsEnabled
            ? e.classList.add('use-animation')
            : e.classList.remove('use-animation'));
      }
      _updatePartyCardShow(e) {
        const t = this.shadowRoot.querySelector('.parties-status-card-hide');
        if (t) {
          const a = !t.classList.contains('hide');
          e === a || (e ? t.classList.remove('hide') : t.classList.add('hide'));
        }
      }
      _observeGameInvites() {
        this._lobbyBinding.observe('v2/received-invitations', (e) => {
          this._onGameInvitesChanged(e);
        });
      }
      _onGameInvitesChanged(e) {
        const t = this._activeGameInvites(e);
        (this._haveGameInvites = t && 0 < t.length),
          this._checkIfMagicShouldPlay(),
          this._updateGameInvitesElement(t, 'onGameInvitesChanged');
      }
      _toggleAnimationsOnMagicElement() {
        this._animationsEnabled
          ? !this._videoElement &&
            ((this._videoElement = document.createElement('video')),
            this._videoElement.setAttribute('autoplay', !0),
            this._videoElement.setAttribute('loop', !0),
            this._videoElement.setAttribute('no-controls', !0),
            this._videoElement.setAttribute('preload', 'auto'),
            this._getBackgroundContainerElement().appendChild(
              this._videoElement,
            ),
            this._checkIfMagicShouldPlay())
          : (this._videoElement && this._videoElement.remove(),
            (this._videoElement = null));
      }
      _toggleQueueDelayClass() {
        const e = this.shadowRoot.querySelector(
          '.parties-game-info-panel-bg-container',
        );
        e &&
          (this._isInQueueDelay
            ? e.classList.add('queue-delay')
            : e.classList.remove('queue-delay'));
      }
      _updateGameInvitesElement(e, t) {
        const a = this.shadowRoot.querySelector('lol-parties-game-invites');
        a && a[t](e);
      }
      _updateGameSearchElement(e, t) {
        const a = this.shadowRoot.querySelector('lol-parties-game-search');
        a && a[t](e);
      }
      _getBackgroundContainerElement() {
        return this.shadowRoot.querySelector(
          '.parties-game-info-panel-bg-container',
        );
      }
      _activeGameInvites(e) {
        return e
          ? e.filter(function (e) {
              return 'DECLINED' !== e.state.toUpperCase();
            })
          : [];
      }
      _gameSearchIsError(e) {
        return !!(e.searchState && 'Error' === e.searchState);
      }
      _checkIfMagicShouldPlay() {
        const e = this._haveGameInvites || this._haveGameSearch;
        this.playMagic(e);
      }
      playMagic(e) {
        const t = this._isInQueueDelay
          ? l.default.queueDelayVideo
          : l.default.backgroundVideo;
        this._videoElement &&
          (e
            ? this._videoElement.src
              ? this._videoElement.src !== t &&
                (this._videoElement.pause(),
                this._videoElement.setAttribute('src', t),
                this._videoElement.play())
              : (this._videoElement.setAttribute('src', t),
                this._videoElement.play())
            : (this._videoElement.pause(),
              this._videoElement.removeAttribute('src')));
      }
    }
    (d.tagName = 'lol-parties-game-info-panel'), (t.default = d);
  },
  function (e, t, a) {
    'use strict';
    const n = { backgroundVideo: a(103), queueDelayVideo: a(226) };
    e.exports = n;
  },
  function (e, t, a) {
    e.exports = a.p + 'queue-delay-bg-loop.webm';
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-game-info-panel">\r\n  <div class="parties-game-section">\r\n    <div class="parties-game-info-panel-bg-container"></div>\r\n    <div class="parties-game-info-panel-content">\r\n      <lol-parties-game-search class="parties-game-search-hide"></lol-parties-game-search>\r\n      <lol-parties-game-invites class="parties-game-invites-hide"></lol-parties-game-invites>\r\n      <lol-parties-status-card class="parties-status-card-hide"></lol-parties-status-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n';
  },
  function (e, t, a) {
    var n = a(16);
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host .parties-game-section {\n  flex: 0 0 auto;\n  position: relative;\n  overflow: hidden;\n}\n:host .parties-game-section:not(.use-animation) lol-parties-game-search.parties-game-search-hide {\n  display: none;\n}\n:host .parties-game-section:not(.use-animation) lol-parties-game-invites.parties-game-invites-hide {\n  display: none;\n}\n:host .parties-game-section.use-animation lol-parties-game-search {\n  transition: height 300ms cubic-bezier(0, 0, 0, 1);\n  overflow: hidden;\n  height: 90px;\n}\n:host .parties-game-section.use-animation lol-parties-game-search.parties-game-search-hide {\n  height: 0px;\n}\n:host .parties-game-section.use-animation lol-parties-game-invites {\n  transition: max-height 300ms cubic-bezier(0, 0, 0, 1);\n  max-height: 202px;\n}\n:host .parties-game-section.use-animation lol-parties-game-invites.parties-game-invites-hide {\n  max-height: 0px;\n}\n:host .parties-game-info-panel-bg-container {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  margin-top: -101px;\n  width: 100%;\n  height: 202px;\n  background-image: url(' +
          n(a(229)) +
          ');\n}\n:host .parties-game-info-panel-bg-container.queue-delay {\n  background-image: url(' +
          n(a(230)) +
          ');\n}\n:host .parties-game-info-panel-content {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  max-height: 202px;\n}\n:host video {\n  height: 100%;\n}\n:host .parties-status-card-hide.hide {\n  display: none;\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    e.exports = a.p + 'static_game_panel_bg.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'static_queue_delay_bg.jpg';
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = Math.floor;
    Object.defineProperty(t, '__esModule', { value: !0 });
    var i = a(25),
      s = n(i),
      l = a(0),
      r = n(l),
      c = a(102),
      m = a(38),
      d = a(30),
      p = n(d);
    const u = r.default.getProvider(),
      g = u.getSocket();
    class b extends l.webComponents.ShadowElement {
      templateMarkup() {
        return a(233);
      }
      stylesheetMarkup() {
        return a(234);
      }
      constructor() {
        super(),
          (this._listeners = { onCancelQueue: this._cancelQueue.bind(this) }),
          (this._lobbyBinding = (0, l.dataBinding)('/lol-lobby', g)),
          (this._summonerBinding = (0, l.dataBinding)('/lol-summoner', g)),
          this._observeLobby(),
          (this._isInQueueDelay = !1),
          (this._templateHelper = l.UIKit.getTemplateHelper()),
          (this._tooltipManager = l.UIKit.getTooltipManager());
      }
      connectedCallback() {
        super.connectedCallback(),
          this._setElementText(
            '.parties-game-search-header-text',
            l.tra.get('parties_game_search_finding_match'),
          ),
          this._attachListener(
            '.parties-game-search-cancel',
            'click',
            this._listeners.onCancelQueue,
          );
      }
      disconnectedCallback() {
        super.disconnectedCallback(),
          this._detachListener(
            '.parties-game-search-cancel',
            'click',
            this._listeners.onCancelQueue,
          ),
          this._removeTooltip(this._lowPriorityTooltipTarget),
          this._lobbyBinding.unobserve('v2/lobby', this);
      }
      _observeLobby() {
        this._lobbyBinding.observe('v2/lobby', (e) => {
          this._updateLobby(e);
        });
      }
      _updateLobby(e) {
        (this._lobby = e), this._updateMapImage(e), this._updateDivider(e);
      }
      updateGameSearch(e) {
        if (((this._gameSearch = e), e)) {
          if (e.searchState && 'Error' === e.searchState) return;
          this._gameSearchStarted ||
            (this._onGameSearchStarted(e), (this._gameSearchStarted = !0));
        } else
          return void (
            this._gameSearchStarted &&
            (this._onGameSearchEnded(), (this._gameSearchStarted = !1))
          );
        this._updateQueueDelayMessaging(e),
          this._updatePenaltyTime(e),
          this._updateTimeInQueue(e),
          this._updateEstimatedQueueTime(e);
      }
      _onGameSearchStarted(e) {
        this._show(),
          this._updateLowPriorityTooltip(e),
          this.dispatchEvent(new Event('gameSearchStarted', { bubbles: !0 }));
      }
      _show() {
        this.classList.remove('parties-game-search-hide');
      }
      _hide() {
        this.classList.add('parties-game-search-hide');
      }
      _onGameSearchEnded() {
        this._hide(),
          this._removeTooltip(this._lowPriorityTooltipTarget),
          this._clearLowPriorityAlert();
      }
      _updateTimeInQueue(e) {
        const t = e.timeInQueue;
        l.lodash.isNumber(t) &&
          this._setElementText(
            '.parties-game-search-elapsed',
            this._secondsFormatted(t),
          );
      }
      _updateEstimatedQueueTime(e) {
        const t = e.estimatedQueueTime;
        if (t) {
          const e = this._secondsFormatted(t),
            a = l.tra.get('parties_game_search_estimated_time') + ' ' + e;
          this._setElementText('.parties-game-search-info', a);
        }
      }
      _updatePenaltyTime(e) {
        const t = e.lowPriorityData,
          a = t ? t.penaltyTime : null,
          n = t && t.reason === m.LOW_PRIORITY_REASONS.LEAVER_BUSTED;
        if (n && a) {
          this._removeClass(
            'priority-max-alert',
            '.parties-game-search-elapsed',
          ),
            this._removeClass('priority-alert', '.parties-game-search-elapsed'),
            this._removeClass(
              'priority-warning',
              '.parties-game-search-elapsed',
            );
          let e = null;
          1200 <= a
            ? (e = 'priority-max-alert')
            : 600 <= a && 1200 > a
            ? (e = 'priority-alert')
            : 0 < a && 600 > a && (e = 'priority-warning'),
            e && this._addClass(e, '.parties-game-search-elapsed');
        }
      }
      _updateQueueDelayMessaging(e) {
        const t = this._isInQueueDelay;
        this._isInQueueDelay =
          e &&
          e.lowPriorityData &&
          e.lowPriorityData.reason &&
          e.lowPriorityData.reason === m.LOW_PRIORITY_REASONS.QUEUE_DELAY;
        t === this._isInQueueDelay ||
          (this._isInQueueDelay
            ? (this._addClass('queue-delay', '.parties-game-search-status'),
              this._setElementText(
                '.parties-game-search-info',
                l.tra.get('low_priority_queue_delay_search_info'),
              ))
            : (this._removeClass('queue-delay', '.parties-game-search-status'),
              this._setElementText('.parties-game-search-info', ''),
              this._removeTooltip(this._lowPriorityTooltipTarget)));
      }
      _clearLowPriorityAlert() {
        this._removeClass('priority-max-alert', '.parties-game-search-elapsed'),
          this._removeClass('priority-alert', '.parties-game-search-elapsed'),
          this._removeClass('priority-warning', '.parties-game-search-elapsed');
      }
      _updateLowPriorityTooltip(e) {
        const t = e.lowPriorityData,
          a = t ? t.penalizedSummonerIds : [];
        t && t.reason === m.LOW_PRIORITY_REASONS.LEAVER_BUSTED
          ? this._assignLowPriorityQueueTooltip(a, e)
          : t && t.reason === m.LOW_PRIORITY_REASONS.QUEUE_DELAY
          ? this._assignQueueDelayTooltip()
          : this._removeTooltip(this._lowPriorityTooltipTarget);
      }
      _updateDivider(e) {
        e && e.invitations && 0 < e.invitations.length
          ? this._removeClass(
              'parties-game-search-hide',
              '.parties-game-search-divider',
            )
          : this._addClass(
              'parties-game-search-hide',
              '.parties-game-search-divider',
            );
      }
      _updateMapImage(e) {
        if (e) {
          const t = this._mapKeyFromLobby(e);
          this._lastMapKey &&
            this._removeClass(this._lastMapKey, '.parties-game-search-map'),
            t && this._addClass(t, '.parties-game-search-map'),
            (this._lastMapKey = t);
        }
      }
      _mapKeyFromLobby(e) {
        const t = '';
        if (!e.gameConfig) return t;
        const a = e.gameConfig.gameMode,
          n = e.gameConfig.mapId;
        if (a && n) {
          const e = p.default.getMapModeInfo(n, a);
          return e && e.isRGM
            ? 'game_map_rotating_game_mode'
            : c.MAP_TO_I18N_KEY[n];
        }
        return t;
      }
      _cancelQueue() {
        l.Audio.getChannel('sfx-ui').playSound(
          '/fe/lol-parties/sfx-soc-ui-click-generic.ogg',
        ),
          this._lobbyBinding.delete('/v2/lobby/matchmaking/search');
      }
      _createLowPriorityTooltip(e, t) {
        const a = document.createElement('lol-uikit-tooltip'),
          n = t.templateHelper.contentBlockTooltip(
            t.tra.get('low_priority_queue_modal_header'),
            t.tra.get('low_priority_queue_notification_body'),
            'tooltip-large',
          ),
          o = document.createElement('ul');
        return (
          (o.className = 'title-list'),
          t.summonerNames &&
            t.summonerNames.forEach(function (e) {
              const t = document.createElement('li');
              (t.innerHTML = e.displayName), o.appendChild(t);
            }),
          n.appendChild(o),
          a.appendChild(n),
          a
        );
      }
      _assignQueueDelayTooltip() {
        this._lowPriorityTooltipTarget = this.shadowRoot.querySelector(
          '.parties-game-search-body',
        );
        const e = document.createElement('lol-uikit-tooltip'),
          t = this._templateHelper.contentBlockTooltip(
            l.tra.get('low_priority_queue_delay_warning_header'),
            l.tra.get('low_priority_queue_delay_warning_body'),
            'tooltip-large',
          );
        e.appendChild(t),
          this._tooltipManager.assign(
            this._lowPriorityTooltipTarget,
            e,
            {},
            {
              orientation: 'left',
              targetAnchor: { x: 'left', y: 'center' },
              tooltipAnchor: { x: 'right', y: 'center' },
            },
          );
      }
      _assignLowPriorityQueueTooltip(e) {
        this._batchRequestSummonerNames(e).then((e) => {
          (this._lowPriorityTooltipTarget = this.shadowRoot.querySelector(
            '.parties-game-search-body',
          )),
            this._tooltipManager.assign(
              this._lowPriorityTooltipTarget,
              this._createLowPriorityTooltip,
              {
                tra: l.tra,
                templateHelper: this._templateHelper,
                summonerNames: e,
              },
              {
                orientation: 'left',
                targetAnchor: { x: 'left', y: 'center' },
                tooltipAnchor: { x: 'right', y: 'center' },
              },
            );
        });
      }
      _batchRequestSummonerNames(e) {
        const t = (0, s.default)(e);
        return this._summonerBinding.get(`v2/summoner-names?ids=${t}`);
      }
      _secondsFormatted(e) {
        if ('number' != typeof e) return '-:--';
        const t = o(e / 60);
        return (e = o(e % 60)), 10 > e && (e = '0' + e), t + ':' + e;
      }
      _setElementText(e, t) {
        const a = this.shadowRoot.querySelector(e);
        a && (a.innerHTML = t);
      }
      _attachListener(e, t, a) {
        const n = this.shadowRoot.querySelector(e);
        n && n.addEventListener(t, a);
      }
      _detachListener(e, t, a) {
        const n = this.shadowRoot.querySelector(e);
        n && n.removeEventListener(t, a);
      }
      _addClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && !a.classList.contains(e) && a.classList.add(e);
      }
      _removeClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && a.classList.contains(e) && a.classList.remove(e);
      }
      _removeTooltip(e) {
        e && this._tooltipManager.unassign(e);
      }
    }
    (b.tagName = 'lol-parties-game-search'), (t.default = b);
  },
  function (e, t, a) {
    var n = a(4),
      o = n.JSON || (n.JSON = { stringify: JSON.stringify });
    e.exports = function () {
      return o.stringify.apply(o, arguments);
    };
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-game-search">\r\n  <div class="parties-game-search-status">\r\n\r\n    <div class="parties-game-search-header">\r\n      <div class="parties-game-search-header-text"></div>\r\n      <div class="parties-game-search-cancel"></div>\r\n    </div>\r\n\r\n    <div class="parties-game-search-body">\r\n      <div class="parties-game-search-map"></div>\r\n      <div class="parties-game-search-body-data">\r\n        <div class="parties-game-search-elapsed"></div>\r\n        <div class="parties-game-search-info"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="parties-game-search-divider parties-game-search-hide"></div>\r\n  </div>\r\n</template>\r\n';
  },
  function (e, t, a) {
    var n = a(16);
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host .parties-game-search-elapsed,\n:host .parties-game-search-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-game-search-info {\n  font-family: var(--font-body);\n}\n:host .parties-game-search-info,\n:host .parties-game-search-elapsed {\n  -webkit-user-select: none;\n}\n:host .parties-game-search-info,\n:host .parties-game-search-elapsed {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-game-search-elapsed {\n  text-transform: uppercase;\n}\n:host .parties-game-search-elapsed:lang(ko-kr),\n:host .parties-game-search-elapsed:lang(ja-jp),\n:host .parties-game-search-elapsed:lang(tr-tr),\n:host .parties-game-search-elapsed:lang(el-gr),\n:host .parties-game-search-elapsed:lang(th-th),\n:host .parties-game-search-elapsed:lang(zh-tw) {\n  text-transform: none;\n}\n:host .parties-game-search-elapsed {\n  color: #f0e6d2;\n  font-size: 30px;\n  font-weight: 700;\n  line-height: 32px;\n  letter-spacing: 0.05em;\n}\n:host .parties-game-search-elapsed:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-search-info {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .parties-game-search-info:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-game-search-info:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-search-elapsed,\n:host .parties-game-search-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-game-search-info {\n  font-family: var(--font-body);\n}\n:host .parties-game-search-map {\n  width: 34px;\n  height: 32px;\n  background-size: auto 64px;\n  background-repeat: no-repeat;\n}\n:host .parties-game-search-map.game_map_howling_abyss {\n  background-image: url(' +
          n(a(72)) +
          ');\n}\n:host .parties-game-search-map.game_map_summoners_rift {\n  background-image: url(' +
          n(a(73)) +
          ');\n}\n:host .parties-game-search-map.game_map_twisted_treeline {\n  background-image: url(' +
          n(a(74)) +
          ');\n}\n:host .parties-game-search-map.game_map_rotating_game_mode {\n  background-image: url(' +
          n(a(75)) +
          ');\n}\n:host .parties-game-search-map.game_map_21 {\n  background-image: url(' +
          n(a(76)) +
          ');\n}\n:host .parties-game-search-map.game_map_22 {\n  background-image: url(' +
          n(a(77)) +
          ");\n}\n:host {\n  display: block;\n  position: relative;\n  flex: 0 0 auto;\n/* Divider line below each game queue */\n/* Hide the divider if the game queue is hovered */\n}\n:host .parties-game-search-status {\n  direction: ltr;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-info {\n  position: relative;\n  color: #a09b8c;\n  display: flex;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-info::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: '';\n  -webkit-mask: url(" +
          n(a(45)) +
          ") no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #f0e6d2;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-info::before {\n  position: absolute;\n  left: 142px /*rtl:0px*/;\n  top: -2px;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-divider {\n  background-color: #413b07;\n}\n:host .parties-game-search-header {\n  display: flex;\n  justify-content: space-between;\n  height: 32px;\n  align-items: center;\n  padding: 0 9px;\n}\n:host .parties-game-search-body-data {\n  flex: 1;\n}\n:host .parties-game-search-info {\n  color: #0acbe6;\n}\n:host .parties-game-search-elapsed {\n  display: flex;\n  align-items: center;\n}\n:host .parties-game-search-elapsed.priority-warning::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: '';\n  -webkit-mask: url(" +
          n(a(45)) +
          ") no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #c89b3c;\n}\n:host .parties-game-search-elapsed.priority-alert::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: '';\n  -webkit-mask: url(" +
          n(a(45)) +
          ") no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #ff2345;\n}\n:host .parties-game-search-elapsed.priority-max-alert {\n  color: #ff2345;\n}\n:host .parties-game-search-elapsed.priority-max-alert::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: '';\n  -webkit-mask: url(" +
          n(a(45)) +
          ') no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #ff2345;\n}\n:host .parties-game-search-body {\n  display: flex;\n  align-items: flex-start;\n  position: relative;\n  padding: 0 5px 10px 10px /*rtl:0 10px 10px 5px*/;\n}\n:host .parties-game-search-map {\n  margin: 5px 10px 0 0 /*rtl:5px 0 0 10px*/;\n}\n:host .parties-game-search-header-text {\n  color: #a09b8c;\n  font-size: 12px;\n  text-transform: uppercase;\n  font-weight: normal;\n  line-height: 16px;\n  margin: 2px 0;\n  letter-spacing: 1px;\n  display: flex;\n  position: relative;\n}\n:host .parties-game-search-cancel {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  -webkit-mask: url(' +
          n(a(78)) +
          ") no-repeat center;\n  -webkit-mask-size: 18px;\n  background-color: var(--color-gold3);\n  width: 18px;\n  height: 18px;\n}\n:host .parties-game-search-cancel:hover {\n  background-color: var(--color-gold1);\n}\n:host .parties-game-search-cancel:active {\n  background-color: var(--color-gold6);\n}\n:host .parties-game-search-divider {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 10px;\n  width: calc(100% - 20px);\n  height: 1px;\n  background-color: #005a82;\n}\n:host .parties-game-search-status:hover .parties-game-search-divider {\n  background: none;\n}\n:host .parties-game-search-hide {\n  display: none;\n}\n",
        '',
      ]);
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(0),
      i = n(o),
      s = a(37),
      l = n(s),
      r = a(17),
      c = a(7);
    const m = { open: a(236), closed: a(103) },
      d = {
        open: 'parties_open_party_status_header',
        closed: 'parties_closed_party_status_header',
      },
      p = i.default.getProvider(),
      u = p.getSocket();
    class g extends o.webComponents.ShadowElement {
      templateMarkup() {
        return a(237);
      }
      stylesheetMarkup() {
        return a(238);
      }
      constructor() {
        super(),
          (this._lobbyBinding = (0, o.dataBinding)('/lol-lobby', u)),
          (this._playerSettingsBinding = (0, o.dataBinding)(
            '/lol-settings',
            u,
          )),
          this._observeLobby(),
          (this._templateHelper = o.UIKit.getTemplateHelper()),
          (this._tooltipManager = o.UIKit.getTooltipManager());
      }
      connectedCallback() {
        super.connectedCallback(),
          this._playerSettingsBinding.observe('/v2/ready', this, (e) => {
            e &&
              (this._playerSettingsBinding.unobserve('/v2/ready', this),
              this._assignPartyInfoTooltip());
          }),
          (this._boundSettingsObserver = this._settingsObserver.bind(this)),
          (this._enableAnimations = !1),
          o.UXSettings.addObserver(this._boundSettingsObserver);
      }
      disconnectedCallback() {
        super.disconnectedCallback(),
          this._playerSettingsBinding.unobserve('/v2/ready', this),
          this._unassignPartyInfoTooltip(),
          o.UXSettings.removeObserver(this._boundSettingsObserver),
          this._lobbyBinding.unobserve('v2/lobby', this);
      }
      _settingsObserver(e) {
        (this._enableAnimations = e.largeAreaAnimationsEnabled),
          this._playVideo();
      }
      _observeLobby() {
        this._lobbyBinding.observe('v2/lobby', (e) => {
          this._updateLobby(e);
        });
      }
      _updateMapImage(e) {
        if (e) {
          const t = l.default.mapKey(e && e.gameConfig);
          this._lastMapKey &&
            this._removeClass(this._lastMapKey, '.parties-status-card-map'),
            t && this._addClass(t, '.parties-status-card-map'),
            (this._lastMapKey = t);
        }
      }
      _setPlayBackground(e) {
        if (e) {
          if (!this._videoElement) {
            const t = this.shadowRoot.querySelector(
              '.parties-status-card-bg-container',
            );
            (this._videoElement = document.createElement('video')),
              this._videoElement.setAttribute('no-controls', !0),
              this._videoElement.setAttribute('preload', 'auto'),
              this._videoElement.setAttribute('autoplay', !0),
              this._videoElement.setAttribute('loop', !0),
              t && t.appendChild(this._videoElement),
              this._videoElement.setAttribute('src', e);
          }
          this._videoElement.getAttribute('src') !== e &&
            this._videoElement.setAttribute('src', e),
            this._playVideo();
        } else
          this._videoElement && this._videoElement.pause(),
            this._videoElement && this._videoElement.remove(),
            (this._videoElement = null);
      }
      _isTFTCustom(e) {
        return (
          e.gameMode === c.GAME_MODES.TFT &&
          e.customSpectatorPolicy !== r.CUSTOM_GAME_SPECTATOR_VALUES.NotAllowed
        );
      }
      _updateRosterIcons(e) {
        if (!this._canUpdateRosterIcons(e)) return '';
        const t = e.gameConfig.maxLobbySize,
          a = e.members.length,
          n = [];
        for (let o = 0; o < t; o++)
          o < a
            ? n.push('<div class="parties-status-member-joined"></div>')
            : n.push('<div class="parties-status-member-empty"></div>');
        return n.join('');
      }
      _canUpdateRosterIcons(e) {
        return e && e.gameConfig && e.members && e.gameConfig.maxLobbySize;
      }
      _updateLobby(e) {
        (this._lobby = e), this._updatePartiesStatusCard();
      }
      _updatePartiesStatusCard() {
        if (
          this._lobby &&
          this._lobby.partyType &&
          !this._isTFTCustom(this._lobby.gameConfig)
        )
          switch (
            (this._setPlayBackground(m[this._lobby.partyType]),
            this._setElementText(
              '.parties-status-card-header-text',
              o.tra.get(d[this._lobby.partyType]) || '',
            ),
            this._removeClass(
              'parties-status-card-hide',
              '.parties-status-card',
            ),
            this._lobby.partyType)
          ) {
            case 'open': {
              this._removeClass('closed', '.parties-status-card'),
                this._addClass('open', '.parties-status-card');
              break;
            }
            case 'closed': {
              this._removeClass('open', '.parties-status-card'),
                this._addClass('closed', '.parties-status-card');
              break;
            }
          }
        else
          this._addClass('parties-status-card-hide', '.parties-status-card'),
            this._setPlayBackground(null);
        this._updateMapImage(this._lobby);
        const e =
          (this._lobby && l.default.gameType(this._lobby.gameConfig)) || '';
        this._setElementText('.parties-status-mode-text', e),
          this._setElementText(
            '.parties-status-member-icons',
            this._updateRosterIcons(this._lobby),
          );
      }
      _setElementText(e, t) {
        const a = this.shadowRoot.querySelector(e);
        a && (a.innerHTML = t);
      }
      _addClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && !a.classList.contains(e) && a.classList.add(e);
      }
      _removeClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && a.classList.contains(e) && a.classList.remove(e);
      }
      _partyHeaderElement() {
        return this.shadowRoot.querySelector('.parties-status-card-header');
      }
      _partyInfoElement() {
        return this.shadowRoot.querySelector(
          '.parties-status-card-header-info',
        );
      }
      _setPlayerSeenOpenPartiesTooltip() {
        this._playerSettingsBinding.patch('v1/account/lol-parties', {
          data: { hasSeenOpenPartyTooltip: !0 },
          schemaVersion: 1,
        });
      }
      _getOpenPartyTooltipSetting() {
        return this._playerSettingsBinding
          .get('v1/account/lol-parties')
          .then((e) => {
            const t = e && e.data;
            return !(!t || !t.hasSeenOpenPartyTooltip);
          });
      }
      _assignPartyInfoTooltip() {
        const e = this._partyInfoElement();
        if (e) {
          const t = o.UIKit.getTooltipManager(),
            a = document.createElement('lol-uikit-tooltip'),
            n = o.tra.get('parties_open_party_overview_header'),
            i = o.tra.get('parties_open_party_overview'),
            s = o.UIKit.getTemplateHelper(),
            l = s.contentBlockTooltip(
              n,
              i,
              'dialog-medium',
              'parties-status-card-info',
            ),
            r = l.querySelector('h6');
          (r.innerHTML =
            '<div class="parties-status-card-header-icon"></div>' +
            '<div class="parties-status-card-header-text">' +
            r.innerHTML +
            '</div>'),
            this._getOpenPartyTooltipSetting().then((n) => {
              if (!n) {
                a.appendChild(l);
                t.assign(
                  e,
                  a,
                  {},
                  {
                    type: 'dialog-medium',
                    showDelay: 0,
                    targetAnchor: { x: 'left', y: 'center' },
                    tooltipAnchor: { x: 'right', y: 'top' },
                    offset: { x: 0, y: -20 },
                  },
                ),
                  (e.style.visibility = 'visible'),
                  this._setPlayerSeenOpenPartiesTooltip();
              }
            });
        }
      }
      _unassignPartyInfoTooltip() {
        const e = this._partyInfoElement(),
          t = o.UIKit.getTooltipManager();
        t.unassign(e);
      }
      _playVideo() {
        this._videoElement &&
          (this._enableAnimations
            ? this._videoElement.play()
            : this._videoElement.pause());
      }
    }
    (g.tagName = 'lol-parties-status-card'), (t.default = g);
  },
  function (e, t, a) {
    e.exports = a.p + 'party-status-bg-loop.webm';
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-status-card">\r\n    <div class="parties-status-card parties-status-card-hide">\r\n\r\n        <div class="parties-status-card-bg-container"></div>\r\n\r\n        <div class="parties-status-card-header">\r\n            <div class="parties-status-card-header-icon"></div>\r\n            <div class="parties-status-card-header-text"></div>\r\n            <lol-uikit-info-icon class="parties-status-card-header-info"></lol-uikit-info-icon>\r\n        </div>\r\n\r\n        <div class="parties-status-card-body">\r\n            <div class="parties-status-card-map"></div>\r\n            <div class="parties-status-card-data">\r\n                <div class="parties-status-member-icons"></div>\r\n                <div class="parties-status-mode-text"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class="parties-status-card-divider"></div>\r\n    </div>\r\n</template>\r\n';
  },
  function (e, t, a) {
    var n = a(16);
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host .parties-status-card-header .parties-status-card-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  -webkit-user-select: none;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  text-transform: uppercase;\n}\n:host .parties-status-card-header .parties-status-card-header-text:lang(ko-kr),\n:host .parties-status-card-header .parties-status-card-header-text:lang(ja-jp),\n:host .parties-status-card-header .parties-status-card-header-text:lang(tr-tr),\n:host .parties-status-card-header .parties-status-card-header-text:lang(el-gr),\n:host .parties-status-card-header .parties-status-card-header-text:lang(th-th),\n:host .parties-status-card-header .parties-status-card-header-text:lang(zh-tw) {\n  text-transform: none;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .parties-status-card-header .parties-status-card-header-text:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-status-card-header .parties-status-card-header-text:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-status-card-body .parties-status-card-map {\n  width: 34px;\n  height: 32px;\n  background-size: auto 64px;\n  background-repeat: no-repeat;\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_howling_abyss {\n  background-image: url(' +
          n(a(72)) +
          ');\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_summoners_rift {\n  background-image: url(' +
          n(a(73)) +
          ');\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_twisted_treeline {\n  background-image: url(' +
          n(a(74)) +
          ');\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_rotating_game_mode {\n  background-image: url(' +
          n(a(75)) +
          ');\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_21 {\n  background-image: url(' +
          n(a(76)) +
          ');\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_22 {\n  background-image: url(' +
          n(a(77)) +
          ');\n}\nlol-uikit-content-block.parties-status-card-info {\n  width: 250px;\n  white-space: normal;\n}\nlol-uikit-content-block.parties-status-card-info h6 {\n  margin-bottom: 8px;\n  display: flex;\n  justify-content: center;\n}\nlol-uikit-content-block.parties-status-card-info h6 .parties-status-card-header-text {\n  margin-left: 2px;\n  margin-top: 2px;\n}\n.parties-status-card-header-icon {\n  background-image: url(' +
          n(a(104)) +
          ');\n  width: 20px;\n  height: 20px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  display: inline-block;\n}\n:host .parties-status-card {\n  position: relative;\n  cursor: pointer;\n}\n:host .parties-status-card.open {\n  background: #143c14;\n}\n:host .parties-status-card.closed {\n  background: #0d2641;\n}\n:host .parties-status-card .parties-status-card-bg-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 202px;\n  color: #4bb44b;\n}\n:host .parties-status-card-hide {\n  display: none;\n}\n:host .parties-status-card-header {\n  direction: ltr;\n  display: flex;\n  justify-content: space-between;\n  height: 22px;\n  position: relative;\n  align-items: center;\n  padding: 5px;\n  margin: 0 0 0 8px /*rtl:0 8px 0 0*/;\n}\n:host .parties-status-card-header .parties-status-card-header-icon {\n  background-image: url(' +
          n(a(104)) +
          ');\n  width: 20px;\n  height: 20px;\n  flex-grow: 0;\n  background-repeat: no-repeat;\n  background-size: contain;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  display: flex;\n  align-items: center;\n  height: 32px;\n  color: #a09b8c;\n  padding: 0 5px 0 9px;\n  flex-grow: 1;\n  pointer-events: none;\n  margin-top: 1px;\n  text-transform: uppercase;\n}\n:host .parties-status-card-header .parties-status-card-header-info {\n  flex-grow: 0;\n  width: 16px;\n  height: 16px;\n  margin-right: 10px;\n  visibility: hidden;\n}\n:host .parties-status-card-body {\n  direction: ltr;\n  display: flex;\n  align-items: center;\n  position: relative;\n  margin-top: -4px;\n  padding: 0 5px 10px 10px /*rtl:0 10px 10px 5px*/;\n}\n:host .parties-status-card-body .parties-status-card-map {\n  margin: 7px 10px 0 0 /*rtl:7px 0 0 10px*/;\n}\n:host .parties-status-card-body .parties-status-member-icons {\n  display: flex;\n  align-items: flex-start;\n  padding: 0 0 0 6px /*rtl:0 6px 0 0*/;\n}\n:host .parties-status-card-body .parties-status-member-icons .parties-status-member-empty {\n  width: 34px;\n  height: 34px;\n  margin: 0 0 0 -16px /*rtl:0 -16px 0 0*/;\n  background-image: url(' +
          n(a(239)) +
          ');\n  background-repeat: no-repeat;\n  background-position: center top;\n  background-size: contain;\n}\n:host .parties-status-card-body .parties-status-member-icons .parties-status-member-joined {\n  width: 34px;\n  height: 34px;\n  margin: 0 0 0 -16px /*rtl:0 -16px 0 0*/;\n  background-image: url(' +
          n(a(240)) +
          ');\n  background-repeat: no-repeat;\n  background-position: center top;\n  background-size: contain;\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    e.exports = a.p + 'player_empty.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'player_joined.png';
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(2),
      i = n(o),
      s = a(0),
      l = n(s),
      r = a(13),
      c = n(r),
      m = a(105);
    const d = l.default.getProvider(),
      p = d.getSocket(),
      u = 'SUCCESS',
      g = 'tft_star_fragments',
      b = 'EnableStarShardsUpgradeFlow',
      h = {
        companions: '/fe/lol-parties/little_legends_icon.svg',
        tft_map_skins: '/fe/lol-parties/arena_skins_icon.svg',
        tft_damage_skins: '/fe/lol-parties/damage_skins_icon.svg',
        emotes: '/fe/lol-parties/party_panel_header_icon.png',
      },
      f = {
        companions: {
          root: '/lol-cosmetics',
          default: '/v1/inventories/default/companions',
          tft: '/v1/inventories/tft/companions',
          selection: '/v1/selection/companion',
          component: 'lol-parties-cosmetics-panel',
          'component-reference': null,
          'binding-type': 'cosmetics',
          title: 'tft_companions_label',
          purchase: '/v3/purchaseOffer',
          purchaseCurrencyType: 'tft_star_fragments',
          purchaseStatus: '/v3/purchase-offer-order-statuses',
        },
        tft_map_skins: {
          root: '/lol-cosmetics',
          tft: '/v1/inventories/tft/map-skins',
          selection: '/v1/selection/tft-map-skin',
          component: 'lol-parties-cosmetics-panel',
          'binding-type': 'cosmetics',
          title: 'tft_map_skins_label',
        },
        tft_damage_skins: {
          root: '/lol-cosmetics',
          tft: '/v1/inventories/tft/damage-skins',
          selection: '/v1/selection/tft-damage-skin',
          component: 'lol-parties-cosmetics-panel',
          'binding-type': 'cosmetics',
          title: 'tft_damage_skins_label',
        },
        emotes: {
          root: '/lol-inventory',
          default: '/v1/inventory/emotes',
          'binding-type': 'inventory',
        },
      },
      y = s.UIKit.getModalManager(),
      _ = s.UIKit.getVignetteCelebrationManager();
    class v extends s.webComponents.ShadowElement {
      templateMarkup() {
        return a(242);
      }
      stylesheetMarkup() {
        return a(243);
      }
      constructor() {
        super(),
          (this._activeTypes = []),
          (this._setName = 'tft'),
          (this._showNoneOption = null),
          (this._cosmeticsDataBinding = (0, s.dataBinding)(
            '/lol-cosmetics',
            p,
          )),
          (this._purchaseWidgetDataBinding = (0, s.dataBinding)(
            '/lol-purchase-widget',
            p,
          )),
          (this._starShardsWalletBinding = (0, s.dataBinding)(
            '/lol-inventory',
            p,
          )),
          (this._starShardsTogglesBinding = (0, s.dataBinding)(
            '/lol-platform-config/v1/namespaces/Loadouts',
            p,
          )),
          (this._starShardsAmount = 0),
          (this._isShardShardsEnabled = !1),
          (this._currentPurchaseTransactionId = null),
          (this._currentPurchaseItemId = null),
          (this._purchasePromiseResolve = null),
          (this._purchaseDialogContentWrapper = null),
          (this._purchaseDialogButtonWrapper = null),
          (this._celebrationActive = !1),
          this._loadStarShardsToggles();
      }
      connectedCallback() {
        super.connectedCallback(),
          this._setNavigationBarTypes(this._activeTypes),
          this._setSelectedLoadoutItem(this._selectedLoadoutId),
          this._initStarShardsObserver(),
          (this._onLoadoutGroupSelectedBinding =
            this._onLoadoutGroupSelected.bind(this)),
          (this._onLoadoutItemSelectedBinding =
            this._onLoadoutItemSelected.bind(this)),
          (this._onLoadoutItemPurchaseBinding =
            this._onLoadoutItemPurchase.bind(this)),
          this._getNavigationBar().addEventListener(
            'lol-uikit-navigation-item-click-event',
            this._onLoadoutGroupSelectedBinding,
          ),
          this._getActiveContent().addEventListener(
            'lol-parties-cosmetics-item-select-event',
            this._onLoadoutItemSelectedBinding,
            !0,
          ),
          this._getActiveContent().addEventListener(
            'lol-parties-cosmetics-item-purchase-event',
            this._onLoadoutItemPurchaseBinding,
            !0,
          );
      }
      disconnectedCallback() {
        super.disconnectedCallback(),
          this._cosmeticsDataBinding.unobserve(this),
          this._starShardsWalletBinding.unobserve(this),
          this._getNavigationBar().removeEventListener(
            'lol-uikit-navigation-item-click-event',
            this._onLoadoutGroupSelectedBinding,
          ),
          this._getActiveContent().removeEventListener(
            'lol-parties-cosmetics-item-select-event',
            this._onLoadoutItemSelectedBinding,
            !0,
          ),
          this._getActiveContent().removeEventListener(
            'lol-parties-cosmetics-item-purchase-event',
            this._onLoadoutItemPurchaseBinding,
            !0,
          );
      }
      _initStarShardsObserver() {
        this._starShardsWalletBinding.observe('/v1/wallet/' + g, this, (e) => {
          e &&
            ((this._starShardsAmount = e[g]),
            this._component &&
              null === this._currentPurchaseItemId &&
              !this._celebrationActive &&
              this._component.setStarShardsAmount(this._starShardsAmount));
        });
      }
      _loadStarShardsToggles() {
        this._starShardsTogglesBinding.get().then((e) => {
          e &&
            e[b] &&
            ((this._isShardShardsEnabled = e[b]),
            this._component &&
              this._component.setStarShardsEnabled(this._isShardShardsEnabled));
        });
      }
      _displayUpgradeCelebration(e) {
        this._celebrationActive = !0;
        const t = document.createElement(
            'lol-parties-cosmetics-upgrade-celebration',
          ),
          a = (0, m.getBaseLayoutItem)(e, this._inventory),
          n = {},
          o = a.upgrades.findIndex((t) => t.itemId === e.itemId);
        0 === o
          ? ((n.previousItem = a), (n.newItem = a.upgrades[0]))
          : ((n.previousItem = a.upgrades[o - 1]), (n.newItem = a.upgrades[o])),
          t.setData(n),
          _.add({
            id: 'upgrade-celebration',
            data: {
              header: { title: s.tra.get('tft_upgrade_celebration_title') },
              nextButtonEnabled: !0,
              nextButtonText: s.tra.get('tft_upgrade_celebration_button'),
            },
            content: { domNode: t },
            behindVignette: !0,
            height: 'LARGE',
            onVignetteClose: () => {
              (this._celebrationActive = !1),
                this._component.setStarShardsAmount(this._starShardsAmount);
            },
          });
      }
      _onLoadoutItemSelected(e) {
        const t = e.detail.item;
        t.owned &&
          (0 === t.itemId || t.itemId === this._inventory.defaultItemId
            ? this._cosmeticsDataBinding.delete(
                f[this._selectedLoadoutId].selection,
                t.itemId,
              )
            : !t.selected &&
              this._cosmeticsDataBinding.put(
                f[this._selectedLoadoutId].selection,
                t.itemId,
              ));
      }
      _onLoadoutItemPurchase(e) {
        const t = e.detail.item;
        t &&
          !t.owned &&
          t.offerData &&
          this._displayPurchaseConfirmationDialog(t);
      }
      _onLoadoutGroupSelected(e) {
        const t = e.detail.node;
        this._setSelectedLoadoutItem(t.id);
      }
      _setSelectedLoadoutItem(e) {
        (this._selectedLoadoutId = e),
          (this._component = document.createElement(
            f[this._selectedLoadoutId].component,
          ));
        const t = this._getActiveContent();
        for (
          this._addClass('hidden', '.loadouts-modal-active-item');
          t.firstChild;

        )
          t.removeChild(t.firstChild);
        t.appendChild(this._component),
          this._component.setStarShardsEnabled(this._isShardShardsEnabled),
          this._component.setStarShardsAmount(this._starShardsAmount),
          this._refreshInventoryBinding(),
          this._refreshPurchaseStatusBinding(),
          this._updateNoneOption(this._component),
          this._removeClass('hidden', '.loadouts-modal-active-item');
      }
      _displayPurchaseConfirmationDialog(e) {
        let t;
        (t = y.add({
          type: 'DialogConfirm',
          data: {
            contents: this._generatePurchaseModalContents(e),
            acceptText: this._getItemOfferPrice(e),
            closeButton: !0,
            dismissibleType: 'inside',
            acceptButtonType: 'purchase',
            acceptHandler: () =>
              new i.default((a) => {
                t.disableAcceptButton(),
                  (this._purchasePromiseResolve = a),
                  this._purchaseDialogButtonWrapper.classList.add(
                    'parties-purchase-loading',
                  );
                const n = {
                  offerId: e.offerData.id,
                  currencyType: f[this._selectedLoadoutId].purchaseCurrencyType,
                };
                this._purchaseWidgetDataBinding
                  .post(f[this._selectedLoadoutId].purchase, n)
                  .then((t) => {
                    (this._currentPurchaseTransactionId = t.orderDto.data.id),
                      (this._currentPurchaseItemId = e.itemId);
                  }),
                  (this._purchaseTransactionTimeout = setTimeout(() => {
                    this._purchaseDialogButtonWrapper.classList.remove(
                      'parties-purchase-loading',
                    ),
                      this._displayErrorMessageInPurchaseDialog();
                  }, 10000)),
                  this._playSound(c.default.SFX_URLS.SFX_STAR_SHARDS_PURCHASE);
              }),
          },
          show: !0,
        })),
          t.acceptPromise.then(
            () => {
              this._displayUpgradeCelebration(e),
                this._clearPurchaseTransaction();
            },
            () => {
              this._clearPurchaseTransaction();
            },
          ),
          this._applyAdditionalButtonStyles(t);
      }
      _generatePurchaseModalContents(e) {
        const t = document.createElement(
          'lol-parties-loadouts-purchase-dialog-content',
        );
        return t.setData(e), (this._purchaseDialogContentWrapper = t), t;
      }
      _displayErrorMessageInPurchaseDialog() {
        const e = this._purchaseDialogContentWrapper.shadowRoot.querySelector(
          '.lol-parties-purchase-dialog-error-message',
        );
        e.innerText = s.tra.get(
          'tft_upgrade_purchase_dialog_body_content_upgrade_failed_error',
        );
      }
      _applyAdditionalButtonStyles(e) {
        const t = e.domNode.querySelector(
            'lol-uikit-flat-button.button-accept',
          ),
          n = document.createElement('style'),
          o = a(244);
        (n.textContent = o),
          t.shadowRoot.insertBefore(n, t.shadowRoot.firstChild),
          (this._purchaseDialogButtonWrapper = t.shadowRoot.querySelector(
            '.lol-uikit-flat-button',
          ));
        const i = document.createElement('div');
        i.classList.add('lol-parties-purchase-dialog-button-spinner'),
          this._purchaseDialogButtonWrapper.appendChild(i);
        const s = t.shadowRoot.querySelector(
            '.lol-uikit-flat-button-content-wrapper',
          ),
          l = document.createElement('div');
        l.classList.add(
          'lol-parties-purchase-dialog-button-currency-icon',
          'icon-star-shards',
        ),
          s.appendChild(l);
      }
      _getItemOfferPrice(e) {
        return e.offerData.payload[0].itemPriceMap[
          '33fe7291-2082-5b1d-be4a-8848d8a1eef8'
        ];
      }
      static get observedAttributes() {
        return ['types', 'active-type', 'set-name', 'show-none'];
      }
      attributeChangedCallback(e, t, a) {
        if ('types' === e) this._updateTypes(a);
        else if ('active-type' === e) {
          const e = this._getNavigationBar();
          e.setAttribute('selectedindex', this._activeTypes.indexOf(a)),
            this._setSelectedLoadoutItem(a);
        } else
          'set-name' === e
            ? (this._setName = a)
            : 'show-none' === e &&
              ((this._showNoneOption = this.hasAttribute('show-none')),
              this._updateNoneOption(this._component));
      }
      _updateTypes(e) {
        const t = e.split(',');
        this._setNavigationBarTypes(t),
          (this._activeTypes = t),
          0 < t.length &&
            -1 === t.indexOf(this._selectedLoadoutId) &&
            this._setSelectedLoadoutItem(t[0]);
      }
      _updateNoneOption(e) {
        e &&
          (this._showNoneOption
            ? e.setAttribute('show-none', '')
            : e.removeAttribute('show-none'));
      }
      _refreshInventoryBinding() {
        this._cosmeticsDataBinding.unobserve(this);
        const e = f[this._selectedLoadoutId];
        e &&
          'cosmetics' === e['binding-type'] &&
          this._cosmeticsDataBinding.observe(
            e[this._setName],
            this,
            this._handleInventoryChanged,
          );
      }
      _handleInventoryChanged(e) {
        (this._inventory = e),
          this._updateNoneOption(this._component),
          this._component &&
            (this._component.setAttribute('type', this._selectedLoadoutId),
            this._component.setInventory(this._inventory));
      }
      _refreshPurchaseStatusBinding() {
        this._purchaseWidgetDataBinding.unobserve(this);
        const e = f[this._selectedLoadoutId];
        e &&
          e.purchaseStatus &&
          this._purchaseWidgetDataBinding.observe(
            e.purchaseStatus,
            this,
            this._handlePurchaseStatusUpdated,
          );
      }
      _handlePurchaseStatusUpdated(e) {
        if (
          this._currentPurchaseTransactionId &&
          this._purchasePromiseResolve
        ) {
          const t = e.statuses[this._currentPurchaseTransactionId];
          t &&
            ((t.orderState !== u && t.orderState !== 'FAIL') ||
              (t.orderState === u
                ? (this._purchasePromiseResolve(!0),
                  this._refreshInventoryBinding(),
                  this._playSound(c.default.SFX_URLS.SFX_STAR_SHARDS_SUCCESS))
                : (this._purchasePromiseResolve(!1),
                  this._purchaseDialogButtonWrapper.classList.remove(
                    'parties-purchase-loading',
                  ),
                  this._displayErrorMessageInPurchaseDialog()),
              this._purchaseTransactionTimeout &&
                (clearTimeout(this._purchaseTransactionTimeout),
                (this._purchaseTransactionTimeout = null))));
        }
      }
      _clearPurchaseTransaction() {
        (this._currentPurchaseTransactionId = null),
          (this._currentPurchaseItemId = null),
          (this._purchasePromiseResolve = null),
          (this._purchaseDialogContentWrapper = null),
          (this._purchaseDialogButtonWrapper = null),
          this._purchaseTransactionTimeout &&
            (clearTimeout(this._purchaseTransactionTimeout),
            (this._purchaseTransactionTimeout = null));
      }
      _playSound(e) {
        s.Audio.getChannel(c.default.SFX_CHANNEL).playSound(e);
      }
      _getNavigationBar() {
        return this.shadowRoot.querySelector('.loadouts-selectable-items');
      }
      _getActiveContent() {
        return this.shadowRoot.querySelector('.loaouts-modal-active-item');
      }
      _clearNavigationBar() {
        for (const e = this._getNavigationBar(); e.firstChild; )
          e.removeChild(e.firstChild);
      }
      _setNavigationBarTypes(e) {
        this._clearNavigationBar();
        const t = this._getNavigationBar();
        for (let a = 0; a < e.length; a++) {
          const n = document.createElement('lol-uikit-navigation-item');
          n.id = e[a];
          const o = document.createElement('div');
          (o.className += 'loadouts-modal-navigation-title'),
            (o.innerHTML = s.tra.get(f[e[a]].title));
          const i = document.createElement('div');
          (i.className += 'loadouts-modal-navigation-img'),
            (i.style.backgroundImage = `url("${h[e[a]]}")`);
          n.appendChild(i),
            n.appendChild(o),
            (n.className += 'loadouts-modal-navigation-item'),
            t.appendChild(n);
        }
      }
      _addClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && !a.classList.contains(e) && a.classList.add(e);
      }
      _removeClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && a.classList.contains(e) && a.classList.remove(e);
      }
    }
    (v.tagName = 'lol-parties-loadouts-modal'), (t.default = v);
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-loadouts-modal">\r\n  <div class="loadouts-modal-title hidden">Loadouts</div>\r\n  <div class="loadouts-modal-content">\r\n      <lol-uikit-navigation-bar type="tabbed" direction="down" selectedindex="0" class="loadouts-selectable-items">\r\n      </lol-uikit-navigation-bar>\r\n      <!-- This should have the content of the active selection-->\r\n      <div class="loaouts-modal-active-item"></div>\r\n  </div>\r\n</template>\r\n';
  },
  function (e, t, a) {
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host .loadouts-modal-title,\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  font-family: var(--font-display);\n}\n:host .loadouts-modal-title,\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  -webkit-user-select: none;\n}\n:host .loadouts-modal-title,\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .loadouts-modal-title,\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  text-transform: uppercase;\n}\n:host .loadouts-modal-title:lang(ko-kr),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(ko-kr),\n:host .loadouts-modal-title:lang(ja-jp),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(ja-jp),\n:host .loadouts-modal-title:lang(tr-tr),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(tr-tr),\n:host .loadouts-modal-title:lang(el-gr),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(el-gr),\n:host .loadouts-modal-title:lang(th-th),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(th-th),\n:host .loadouts-modal-title:lang(zh-tw),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(zh-tw) {\n  text-transform: none;\n}\n:host .loadouts-modal-title {\n  color: #f0e6d2;\n  font-size: 30px;\n  font-weight: 700;\n  line-height: 32px;\n  letter-spacing: 0.05em;\n}\n:host .loadouts-modal-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host {\n  --rcp-fe-lol-parties-loadouts-modal-border-width: 2px;\n}\n:host {\n  width: 957px;\n  height: 620px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n  position: relative;\n  background: #010a13;\n  border: thin solid #010a13;\n}\n:host .loadouts-modal-title {\n  text-align: center;\n  padding: 5px;\n}\n:host .loadouts-modal-content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  width: 114px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  color: #c8aa6e;\n  padding-left: 0;\n  border: thin solid #010a13;\n  background: #091724;\n  box-sizing: border-box;\n  opacity: 0.7;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item .loadouts-modal-navigation-img {\n  width: 100%;\n  height: 35px;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  flex: 1 1 auto;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item .loadouts-modal-navigation-title {\n  flex: 0 0 auto;\n  margin: auto;\n  line-height: 14px;\n  text-align: center;\n  max-width: 90px;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item[active] {\n  background: linear-gradient(90deg, #152535 5%, #061321 100%);\n  opacity: 1;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item[active] div {\n  -webkit-filter: brightness(200%);\n}\n:host .loadouts-modal-content .loaouts-modal-active-item {\n  width: 100%;\n  transition: opacity 0.01s 0.01s;\n}\n:host .hidden {\n  opacity: 0;\n  display: none;\n  visibility: hidden;\n  transition: opacity 0.3s 0.1s;\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        '.lol-uikit-flat-button.parties-purchase-loading .lol-uikit-flat-button-content-wrapper {\n  opacity: 0;\n  visibility: hidden;\n}\n.lol-uikit-flat-button.parties-purchase-loading .lol-parties-purchase-dialog-button-spinner {\n  opacity: 1;\n  visibility: visible;\n}\n.lol-uikit-flat-button-content-wrapper {\n  position: relative;\n  padding-left: 18px;\n  line-height: 22px;\n  transition: opacity 0.3s ease, visibility 0.3s ease;\n}\n.lol-parties-purchase-dialog-button-currency-icon {\n  position: absolute;\n  top: 2px;\n  left: -2px;\n  width: 18px;\n  height: 18px;\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n.lol-parties-purchase-dialog-button-currency-icon.icon-star-shards {\n  background-image: url("/fe/lol-static-assets/images/icon-star-shards-36.png");\n}\n.lol-parties-purchase-dialog-button-spinner {\n  background-image: url("/fe/lol-static-assets/images/spinner.png");\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 24px;\n  height: 24px;\n  margin: -12px 0 0 -12px;\n  animation: loader-spin 4000ms infinite linear;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity 0.3s ease, visibility 0.3s ease;\n}\n@-moz-keyframes loader-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n@-webkit-keyframes loader-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n@-o-keyframes loader-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n@keyframes loader-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(0);
    class o extends n.webComponents.ShadowElement {
      templateMarkup() {
        return a(246);
      }
      stylesheetMarkup() {
        return a(247);
      }
      constructor() {
        super(),
          (this.shadowRoot.querySelector(
            '.loadouts-purchase-dialog-body-title',
          ).innerText = n.tra.get('tft_upgrade_purchase_dialog_body_title'));
      }
      setData(e) {
        if (this._data !== e) {
          this._data = e;
          const t = this.shadowRoot.querySelector('.little-legend-img');
          t.src = this._data.loadoutsIcon;
          const a = n.tra.formatString(
            'tft_upgrade_purchase_dialog_body_content',
            {
              fromLevel: this._data.level - 1,
              fromName: this._data.name,
              toLevel: this._data.level,
              toName: this._data.name,
            },
          );
          (this.shadowRoot.querySelector(
            '.loadouts-purchase-dialog-body-content',
          ).innerText = a),
            this.shadowRoot
              .querySelector('.lottie-animation')
              .setAttribute(
                'src',
                `/fe/lol-parties/lottie/LLUpgradeConfirm_StarIcons/LLUpgradeConfirm_Lv${this._data.level}.json`,
              ),
            this._addClass(
              `rarity-${this._data.rarityValue}`,
              '.little-legend-container',
            );
        }
      }
      _addClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && !a.classList.contains(e) && a.classList.add(e);
      }
    }
    (o.tagName = 'lol-parties-loadouts-purchase-dialog-content'),
      (t.default = o);
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-loadouts-purchase-dialog-content">\r\n  <div class="loadouts-purchase-dialog-content-wrapper">\r\n    <div class="loadouts-purchase-dialog-body-title"></div>\r\n    <div class="little-legend-container">\r\n      <img class="little-legend-img"/>\r\n      <div class="little-legend-overlay"></div>\r\n      <lol-uikit-lottie\r\n                      class="lottie-animation"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeConfirm_StarIcons/images/"\r\n                      loop="true"\r\n                      autoplay="true">\r\n      </lol-uikit-lottie>\r\n    </div>\r\n    <div class="loadouts-purchase-dialog-body-content"></div>\r\n    <div class="lol-parties-purchase-dialog-error-message"></div>\r\n  </div>\r\n</template>\r\n';
  },
  function (e, t, a) {
    var n = a(16);
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  font-family: var(--font-display);\n}\n:host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  -webkit-user-select: none;\n}\n:host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  text-transform: uppercase;\n}\n:host .loadouts-purchase-dialog-body-title:lang(ko-kr),\n:host .lol-parties-purchase-dialog-error-message:lang(ko-kr),\n:host .loadouts-purchase-dialog-body-title:lang(ja-jp),\n:host .lol-parties-purchase-dialog-error-message:lang(ja-jp),\n:host .loadouts-purchase-dialog-body-title:lang(tr-tr),\n:host .lol-parties-purchase-dialog-error-message:lang(tr-tr),\n:host .loadouts-purchase-dialog-body-title:lang(el-gr),\n:host .lol-parties-purchase-dialog-error-message:lang(el-gr),\n:host .loadouts-purchase-dialog-body-title:lang(th-th),\n:host .lol-parties-purchase-dialog-error-message:lang(th-th),\n:host .loadouts-purchase-dialog-body-title:lang(zh-tw),\n:host .lol-parties-purchase-dialog-error-message:lang(zh-tw) {\n  text-transform: none;\n}\n:host .loadouts-purchase-dialog-body-title {\n  color: #f0e6d2;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 18px;\n  letter-spacing: 0.075em;\n}\n:host .loadouts-purchase-dialog-body-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .lol-parties-purchase-dialog-error-message {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .lol-parties-purchase-dialog-error-message:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .lol-parties-purchase-dialog-error-message:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .loadouts-purchase-dialog-content-wrapper {\n  padding-top: 10px;\n  padding-bottom: 51px;\n  background: linear-gradient(180deg, #1e2328 0%, #010a13 100%);\n  font-size: 14px;\n  letter-spacing: 0.03em;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 518px;\n  height: 341px;\n}\n:host .loadouts-purchase-dialog-body-title {\n  color: #c8aa6e;\n  padding-bottom: 20px;\n  font-size: 24px;\n  line-height: 36px;\n}\n:host .loadouts-purchase-dialog-body-content {\n  color: #a09b8c;\n  padding-top: 26px;\n  padding-left: 20px;\n  padding-right: 20px;\n  font-size: 14px;\n  line-height: 32px;\n}\n:host .lol-parties-purchase-dialog-error-message {\n  position: absolute;\n  bottom: 36px;\n  left: 0;\n  width: 100%;\n  line-height: 24px;\n  font-size: 12px;\n  color: #ff2345;\n}\n:host .lottie-animation {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 209px;\n  height: 209px;\n}\n:host .little-legend-container {\n  position: relative;\n  width: 209px;\n  height: 209px;\n  border: 4px solid;\n  border-image: linear-gradient(180deg, #c8aa6e 0%, #c89b3c 48.96%, #785a28 100%) 50 stretch stretch;\n}\n:host .little-legend-container:before {\n  position: absolute;\n  content: " ";\n  left: -5px;\n  right: -5px;\n  bottom: -5px;\n  top: -5px;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-container:after {\n  position: absolute;\n  content: "";\n  bottom: -43px;\n  left: 48px;\n  width: 112px;\n  height: 64px;\n  background-size: 100% 100%;\n  background-image: url(' +
          n(a(46)) +
          ');\n}\n:host .little-legend-container.rarity-1:after {\n  background-image: url(' +
          n(a(47)) +
          ');\n}\n:host .little-legend-container.rarity-2:after {\n  background-image: url(' +
          n(a(48)) +
          ');\n}\n:host .little-legend-container.rarity-3:after {\n  background-image: url(' +
          n(a(49)) +
          ');\n}\n:host .little-legend-img {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  object-fit: cover;\n  box-sizing: border-box;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-overlay {\n  position: absolute;\n  height: 83px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.77) 66.15%);\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = Math.floor;
    Object.defineProperty(t, '__esModule', { value: !0 });
    var i = a(0),
      s = n(i),
      l = a(13),
      r = n(l),
      c = a(105);
    const m = s.default.getProvider(),
      d = m.getSocket(),
      p = 14,
      u = 'Recent',
      g = { PURCHASE: 'purchase', EQUIP: 'equip' };
    class b extends i.webComponents.ShadowElement {
      templateMarkup() {
        return a(249);
      }
      stylesheetMarkup() {
        return a(250);
      }
      constructor() {
        super(),
          (this._showNoneOption = null),
          (this._settingsBinding = (0, i.dataBinding)('/lol-settings')),
          (this._cosmeticsDataBinding = (0, i.dataBinding)(
            '/lol-cosmetics',
            d,
          )),
          (this._hideUnowned = !1),
          (this._isShardShardsEnabled = !1),
          (this._searchString = ''),
          (this._type = ''),
          (this._cosmeticsSettings = { data: {}, schemaVersion: 1 }),
          (this._removedRecentHighlighting = []),
          (this._starShardsAmount = 0),
          this._defineCheckBox(),
          this._defineActionButton(),
          this._defineCosmeticItems(),
          this._defineSearchBar();
      }
      connectedCallback() {
        super.connectedCallback(),
          (this._hoveredUpgrades = null),
          this._hideUpgradeTooltip(),
          (this._selectedItem = null),
          this._updateAllStarShardsComponents();
      }
      disconnectedCallback() {
        super.disconnectedCallback(),
          this._recentlyViewedContentIdsToClear(),
          this._starShardsTimeout && clearTimeout(this._starShardsTimeout);
      }
      _defineCheckBox() {
        this.shadowRoot.querySelector(
          '#hide_unowned_checkbox_label',
        ).textContent = i.tra.get('parties_cosmetics_show_unowned');
        const e = this.shadowRoot.querySelector('#hide_unowned_checkbox');
        e.addEventListener('click', () => {
          (this._hideUnowned = !e.checked),
            this._cosmeticsSettings.data[this._type]
              ? (this._cosmeticsSettings.data[this._type].hideUnowned =
                  this._hideUnowned)
              : (this._cosmeticsSettings.data[this._type] = {
                  hideUnowned: this._hideUnowned,
                }),
            this._settingsBinding.put(
              '/v2/account/LCUPreferences/cosmetics-settings',
              this._cosmeticsSettings,
            ),
            this._updateFilter();
        });
      }
      _defineCosmeticItems() {
        this.addEventListener(
          'lol-parties-cosmetics-item-click',
          this._onLoadoutItemClicked.bind(this),
        ),
          this.addEventListener(
            'lol-parties-cosmetics-item-hover',
            this._onLoadoutItemHovered.bind(this),
          );
        const e = this.shadowRoot
          .querySelector('.cosmetic-upgrade-container')
          .getElementsByClassName('cosmetic-upgrade-bounding-container');
        for (let t = 0; t < e.length; t++)
          e[t].addEventListener(
            'mouseenter',
            () => {
              const e = (0, c.getBaseLayoutItem)(
                this._clickedItem,
                this._inventory,
              );
              0 === t
                ? (this._setFocusedItem(e),
                  this._playSound(
                    r.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER,
                  ))
                : (this._setFocusedItem(e.upgrades[t - 1]),
                  this._playSound(
                    r.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER,
                  ));
            },
            !0,
          ),
            e[t].addEventListener('mouseleave', () => {
              this._setFocusedItem(this._clickedItem), this._resetSelected();
            }),
            e[t].addEventListener('click', () => {
              const e = (0, c.getBaseLayoutItem)(
                this._hoveredUpgrades,
                this._inventory,
              );
              let a = e;
              0 !== t && (a = e.upgrades[t - 1]),
                this._setFocusedItem(a),
                (this._clickedItem = a),
                this._playClickSoundForItem(a),
                a.isRecentItem &&
                  (this._removeRecentHighlight(a),
                  this._recentlyViewedContentIdsToClear()),
                this._updateActionButton();
            });
      }
      _defineActionButton() {
        (this._actionButton = this.shadowRoot.querySelector(
          '.cosmetic-group-action-button',
        )),
          this._actionButton.addEventListener('click', () =>
            this._handleActionButtonClicked(),
          ),
          this._updateActionButton();
      }
      _defineSearchBar() {
        const e = this.shadowRoot.querySelector('#cosmetic_search_bar');
        (e.placeholder = i.tra.get('tft_cosmetics_search_placeholder')),
          e.addEventListener('mousedown', (e) => {
            e.stopPropagation();
          }),
          e.addEventListener('search', () => {
            (this._searchString = e.value), this._updateFilter();
          });
      }
      _createActionButtonState() {
        const e = this._inventory.selectedLoadoutItem,
          t = this._hoveredUpgrades;
        let a = g.EQUIP,
          n = i.tra.get('parties_loadouts_equip_label');
        if (!t) return { behavior: a, content: n, disabledState: !1 };
        if (t.owned)
          return {
            behavior: a,
            content: n,
            disabledState: e.contentId === t.contentId,
          };
        if ('companions' !== this._type)
          return {
            behavior: a,
            content: n,
            disabledState: !t.owned || e.contentId === t.contentId,
          };
        const o = (0, c.getBaseLayoutItem)(t, this._inventory),
          s = this._getItemUpgradePath(o),
          l = s.indexOf(t),
          r = 0 < l && s[l - 1].owned,
          m = t.starShardsPrice.price,
          d = this._starShardsAmount;
        m &&
          ((a = g.PURCHASE),
          (n = `<img class="star-shards-icon" src="/fe/lol-static-assets/images/icon-star-shards-36.png"/> ${m}`));
        return {
          behavior: a,
          content: n,
          disabledState: !m || !r || d < m,
          remainingStarShards: d - m,
          prereqOwned: r,
        };
      }
      _retrieveSettingsData() {
        const e = this.shadowRoot.querySelector('#hide_unowned_checkbox');
        (this._hideUnowned = !1),
          this._settingsBinding
            .get('/v2/account/LCUPreferences/cosmetics-settings')
            .then((t) => {
              t &&
                t.data &&
                ((this._cosmeticsSettings = t),
                t.data[this._type] &&
                  t.data[this._type].hideUnowned !== void 0 &&
                  (this._hideUnowned = t.data[this._type].hideUnowned)),
                (e.checked = !this._hideUnowned),
                this._updateFilter();
            });
      }
      _onLoadoutItemHovered(e) {
        this._setFocusedItem(e.detail.item),
          e.detail.item.isRecentItem &&
            this._removeRecentHighlight(e.detail.item),
          this._updateUpgrades(e.detail.item),
          this._updateActionButton();
      }
      _onLoadoutItemClicked(e) {
        let t = (0, c.getBaseLayoutItem)(e.detail.item, this._inventory);
        if (t) {
          const e = this._getItemUpgradePath(t);
          for (let a = e.length - 1; 0 <= a; a--)
            if (e[a].owned) {
              t = e[a];
              break;
            }
          this._selectItem(t);
        }
      }
      _handleActionButtonClicked() {
        const e = this._actionButton;
        if (!e.hasAttribute('disabled')) {
          const t = e.getAttribute('behavior');
          switch (t) {
            case g.PURCHASE:
              this._playClickSoundForItem(this._clickedItem),
                this.dispatchEvent(
                  new CustomEvent('lol-parties-cosmetics-item-purchase-event', {
                    detail: { item: this._clickedItem },
                  }),
                ),
                e.setAttribute('disabled', '');
              break;
            case g.EQUIP:
              this._playClickSoundForItem(this._clickedItem),
                this.dispatchEvent(
                  new CustomEvent('lol-parties-cosmetics-item-select-event', {
                    detail: { item: this._clickedItem },
                  }),
                ),
                e.setAttribute('disabled', '');
              break;
            default:
          }
        }
      }
      _updateActionButton() {
        if (this._clickedItem && this._actionButton && this._inventory) {
          var e = this._createActionButtonState();
          const t = e.behavior,
            a = e.content,
            n = e.disabledState,
            o = e.remainingStarShards,
            s = e.prereqOwned,
            l = this._actionButton,
            r = this.shadowRoot.querySelector('.star-shards-label'),
            c = this.shadowRoot.querySelector('.star-shards-amount');
          this._addClass('hidden', '.star-shards-label-wrapper'),
            t === g.PURCHASE &&
              ((r.innerHTML = i.tra.get(
                'parties_loadouts_remaining_star_shards_label',
              )),
              (c.textContent = this._formatStarShardsAmount(o)),
              this._toggleClass(
                'purchasable',
                '.star-shards-label-wrapper',
                !n,
              ),
              n && !s
                ? (r.innerHTML = i.tra.get(
                    'parties_loadouts_prereq_not_owned_label',
                  ))
                : n &&
                  (r.innerHTML = i.tra.formatString(
                    'parties_loadouts_not_enough_shards_label',
                    {
                      shardImage: `<img class="star-shards-icon" src="/fe/lol-static-assets/images/icon-star-shards-36.png"/>`,
                    },
                  )),
              this._toggleClass('hidden', '.star-shards-amount', n),
              this._removeClass('hidden', '.star-shards-label-wrapper')),
            l.setAttribute('type', t),
            l.setAttribute('behavior', t),
            (l.innerHTML = a),
            l.toggleAttribute('disabled', n),
            l.toggleAttribute('primary', !n);
        }
      }
      _playClickSoundForItem(e) {
        var t = r.default.SFX_URLS;
        const a = t.SFX_LOADOUT_RARITY_CLICK,
          n = t.SFX_COMPANION_PICKER_CLICK,
          o = e.owned ? a : n;
        this._playSound(o);
      }
      _updateFilter() {
        this.shadowRoot
          .querySelectorAll('.cosmetic-option-group')
          .forEach((e) => {
            const t = e.querySelector('.cosmetic-option-list');
            let a = !1;
            t.childNodes.forEach((e) => {
              const t = this._isItemShown(e._data);
              (a = a || t), e.setAttribute('item-shown', t);
            }),
              e.setAttribute('group-shown', a);
          });
      }
      _updateAllStarShardsComponents() {
        const e = this.shadowRoot.querySelector('.currency-ss');
        e &&
          (this._updateStarShardDisplay(),
          this._updateUpgrades(this._clickedItem),
          this._updateActionButton());
      }
      _updateStarShardDisplay() {
        if (this._isShardShardsEnabled) {
          const e = this.shadowRoot.querySelector('.currency-ss');
          if (!e) return;
          const t = this._formatStarShardsAmount(this._starShardsAmount);
          e.textContent = t;
        }
        this._toggleClass(
          'hidden',
          '.currency-ss',
          !this._isShardShardsEnabled,
        );
      }
      _recentlyViewedContentIdsToClear() {
        const e = this._type.toUpperCase().slice(0, this._type.length - 1);
        this._cosmeticsDataBinding.patch(
          '/v1/recent/' + e,
          this._removedRecentHighlighting,
        );
      }
      selectItemById(e) {
        const t = (0, c.getLayoutItemById)(e, this._inventory);
        t && this._selectItem(t);
      }
      _selectItem(e) {
        if (this._clickedItem) {
          const e = (0, c.getBaseLayoutItem)(
            this._clickedItem,
            this._inventory,
          );
          if (!e) return;
          const t = this.shadowRoot.querySelectorAll(
            `[content-id="${e.contentId}"]`,
          );
          t &&
            t.forEach((e) => {
              e.removeAttribute('highlighted');
            });
        }
        this._setFocusedItem(e), (this._clickedItem = e);
        const t = (0, c.getBaseLayoutItem)(e, this._inventory);
        t &&
          this.shadowRoot
            .querySelectorAll(`[content-id="${t.contentId}"]`)
            .forEach((e) => {
              e.setAttribute('highlighted', !0);
            });
      }
      _setFocusedItem(e) {
        e &&
          ((this._hoveredUpgrades = e),
          this._updateSelectedItem(e),
          this._updateUpgrades(e),
          this._updateActionButton());
      }
      _getItemUpgradePath(e) {
        return e.upgrades ? [e].concat(e.upgrades) : [e];
      }
      _updateUpgrades(e) {
        if (this._inventory && this._clickedItem) {
          const t = (0, c.getBaseLayoutItem)(e, this._inventory);
          if (
            t &&
            (this._toggleClass(
              'hidden',
              '.cosmetic-upgrade-container',
              !t || !t.upgrades || 0 === t.upgrades.length,
            ),
            t.upgrades && 0 !== t.upgrades.length)
          ) {
            const e = this._getItemUpgradePath(t);
            let a = 0;
            for (let t = 0; t < e.length; t++) {
              const n = e[t],
                o = n.starShardsPrice ? n.starShardsPrice.price : 0,
                i = n.starShardsPrice && !!n.starShardsPrice.offerId,
                s = this._starShardsAmount,
                l = 0 < t && e[t - 1].owned,
                r = `.cosmetic-upgrade-${t + 1}`,
                c = e[0].owned;
              n.isRecentItem && a++,
                this._toggleClass(
                  'not-enough-shards',
                  r,
                  !n.owned && i && l && o > s,
                ),
                this._toggleClass(
                  'upgradeable',
                  r,
                  !n.owned && c && i && o <= s,
                ),
                this._toggleClass('unowned', r, !n.owned),
                this._toggleClass(
                  'purchasable',
                  r,
                  !n.owned && i && l && o <= s,
                ),
                this._toggleClass('selected', r, n.selected),
                this._toggleClass(
                  'intended',
                  r,
                  n.contentId === this._clickedItem.contentId,
                ),
                this._toggleClass('recent', r, n.isRecentItem),
                this._toggleClass(
                  'equipped',
                  r,
                  n.contentId === this._inventory.selectedLoadoutItem.contentId,
                );
            }
            1 < a &&
              (this._removeRecentHighlight(e[0]),
              this._toggleClass('recent', '.cosmetic-upgrade-1', !1));
          }
        }
      }
      _removeRecentHighlight(e) {
        this.shadowRoot
          .querySelectorAll(`[content-id="${e.contentId}"]`)
          .forEach((e) => {
            e.setAttribute('is-recent-item', !1);
          }),
          (e.isRecentItem = !1);
        const t = (0, c.getBaseLayoutItem)(e, this._inventory);
        if (!t) return;
        let a = t.isRecentItem;
        if (
          (t.upgrades &&
            0 < t.upgrades.length &&
            i.lodash.forEach(t.upgrades, (e) => {
              e.isRecentItem && (a = !0);
            }),
          !a)
        ) {
          const e = this.shadowRoot.querySelector(
            `[content-id="${t.contentId}"]`,
          );
          e.setAttribute('is-recent-item', !1);
        }
        this._removedRecentHighlighting.push(e.contentId);
      }
      setStarShardsAmount(e) {
        if (e !== this._starShardsAmount) {
          const t = this.shadowRoot.querySelector('.currency-upgrade-video');
          if (t && e < this._starShardsAmount) {
            const a = o((this._starShardsAmount - e) / 12);
            (t.src = `/fe/lol-parties/starshards_currency_decrease_${
              this._formatStarShardsAmount(e).length
            }.webm`),
              t.play(),
              this._starShardsTimeout &&
                (clearTimeout(this._starShardsTimeout),
                (this._starShardsTimeout = null));
            const n = () => {
              (this._starShardsAmount -= a),
                this._starShardsAmount < e && (this._starShardsAmount = e),
                this._updateStarShardDisplay(),
                this._starShardsAmount > e &&
                  (this._starShardsTimeout = setTimeout(n, 10));
            };
            n();
          } else this._starShardsAmount = e;
          this._updateAllStarShardsComponents();
        }
      }
      setStarShardsEnabled(e) {
        (this._isShardShardsEnabled = e), this._updateAllStarShardsComponents();
      }
      setInventory(e) {
        (this._inventory = e),
          this._updateInventory(),
          this._updateAllStarShardsComponents();
      }
      _updateInventory() {
        if (!this._inventory) return;
        const e = this.shadowRoot.querySelector(
          '.cosmetic-option-scroller',
        ).scrollTop;
        setTimeout(() => {
          this.shadowRoot.querySelector('.cosmetic-option-scroller').scrollTop =
            e;
        });
        const t = this._getOptionsSection();
        t.innerHTML = '';
        let n;
        const o = i.tra.get('tft_companions_none_label');
        t.appendChild(
          this._createCosmeticOption({
            itemId: 0,
            loadoutsIcon: a(82),
            level: 0,
            contentId: 'NONE_OPTION',
            name: o,
            owned: !0,
          }),
        ),
          i.lodash.forEach(this._inventory.groups, (e) => {
            (n = this._createCosmeticOptionGroup(e)), t.appendChild(n);
          }),
          (this._clickedItem = this._clickedItem
            ? (0, c.getLayoutItemById)(
                this._clickedItem.itemId,
                this._inventory,
              )
            : (0, c.getLayoutItemById)(
                this._inventory.selectedLoadoutItem.itemId,
                this._inventory,
              )),
          (this._hoveredUpgrades = this._hoveredUpgrades
            ? this._hoveredUpgrades
            : this._clickedItem),
          this._setFocusedItem(this._hoveredUpgrades),
          this._selectItem(this._clickedItem);
      }
      _formatStarShardsAmount(e) {
        return isNaN(e)
          ? '0'
          : 1e5 > e
          ? e.toString()
          : ((e = 1e3 * o(e / 1e3)), i.tra.numeral(e).format('0a'));
      }
      _getRecentItems() {
        let e = [];
        new Date();
        return (
          i.lodash.forEach(this._inventory.groups, (t) => {
            i.lodash.forEach(t.items, (t) => {
              let a = !1;
              if ('' !== t.purchaseDate && t.owned) {
                if (t.upgrades && 0 < t.upgrades.length) {
                  a = !0;
                  const n = this._extractUpgrades(t);
                  0 !== n.length && (e = e.concat(n));
                }
                (t.isUpgradable = a),
                  this._numberOfDaysFromToday(t.purchaseDate) < p && e.push(t);
              }
            });
          }),
          e
        );
      }
      _extractUpgrades(e) {
        const t = [];
        return (
          i.lodash.forEach(e.upgrades, (e) => {
            e.owned &&
              ((e.isUpgradable = !0),
              this._numberOfDaysFromToday(e.purchaseDate) < p && t.push(e));
          }),
          t
        );
      }
      _isItemShown(e) {
        const t = e.owned || !this._hideUnowned,
          a = e.name.toLowerCase().includes(this._searchString.toLowerCase());
        return t && a;
      }
      _updateSelectedItem(e) {
        if (e) {
          const t = this.shadowRoot.querySelector('.selected-cosmetic');
          t.setAttribute('content-id', e.contentId);
          const a = this.shadowRoot.querySelector(
            '.selected-cosmetic-header-group',
          );
          this._toggleClass(
            'locked',
            '.selected-cosmetic-header-group',
            !e.owned,
          ),
            (a.style.background = `linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) 60%, rgba(1, 10, 19, .80) 85%, rgba(1, 10, 19, 1) 100%), center/cover no-repeat url(${e.loadoutsIcon})`);
          const n = this.shadowRoot.querySelector('.selected-cosmetic-title'),
            o = e.name;
          (n.innerHTML = o.trim()),
            this._removeClass('rarity-0', '.selected-cosmetic'),
            this._removeClass('rarity-1', '.selected-cosmetic'),
            this._removeClass('rarity-2', '.selected-cosmetic'),
            this._removeClass('rarity-3', '.selected-cosmetic'),
            1 < e.itemId &&
              this._addClass(`rarity-${e.rarityValue}`, '.selected-cosmetic');
        }
      }
      _getMiscSection() {
        return this.shadowRoot.querySelector('div.cosmetic-misc');
      }
      _getOptionsSection() {
        return this.shadowRoot.querySelector('div.cosmetic-option-group-list');
      }
      _createCosmeticGroupHeader(e) {
        const t = document.createElement('div');
        t.className = 'cosmetic-option-group-header';
        const a = document.createElement('div');
        if (
          ((a.className = 'cosmetic-option-group-title'),
          (a.innerHTML = e.groupName),
          t.appendChild(a),
          e.groupId !== u)
        ) {
          const a = document.createElement('div');
          (a.className = 'cosmetic-option-group-info'),
            (a.innerHTML = i.tra.formatString('tft_companions_count_label', {
              owned: e.numOwned,
              available: e.numAvailable,
            })),
            t.appendChild(a);
        }
        return t;
      }
      _createCosmeticOptionGroup(e) {
        const t = document.createElement('div');
        (t.className = 'cosmetic-option-group'),
          t.appendChild(this._createCosmeticGroupHeader(e));
        const a = document.createElement('div');
        (a.className = 'cosmetic-option-list'),
          t.appendChild(a),
          a.addEventListener('mouseleave', (e) => {
            e.stopPropagation(), this._resetSelected();
          });
        let n = !1;
        e.groupId === u && (n = !0);
        let o = !1;
        return (
          i.lodash.forEach(e.items, (e) => {
            const t = this._isItemShown(e);
            o = o || t;
            const i = this._createCosmeticOption(e, n, t);
            a.appendChild(i);
          }),
          t.setAttribute('group-shown', o),
          t
        );
      }
      _createCosmeticOption(e, t, a) {
        const n = document.createElement('lol-parties-cosmetics-renderer');
        return (
          (n.className = 'cosmetic-option'),
          n.setAttribute('data-owned', e.owned),
          n.setAttribute('is-recent-group', t),
          n.setAttribute(
            'is-recent-item',
            e.isRecentItem &&
              !this._removedRecentHighlighting.includes(e.contentId),
          ),
          n.setAttribute('item-shown', a),
          n.setData(e),
          n
        );
      }
      _createLoyaltyMedalElement() {
        const e = document.createElement('div');
        return (e.className = 'cosmetic-option-loyalty'), e;
      }
      _hideUpgradeTooltip() {
        this._addClass('hidden', 'div.cosmetic-upgrade-container');
      }
      _resetSelected() {
        this._inventory &&
          (this._setFocusedItem(this._clickedItem),
          this._updateSelectedItem(this._clickedItem));
      }
      _updateType() {
        this._hideUpgradeTooltip(),
          setTimeout(() => {
            this._toggleClass(
              'star-shards-disabled',
              'div.cosmetic-upgrade-container',
              'companions' !== this._type,
            ),
              'companions' === this._type &&
                this._removeClass('hidden', 'div.cosmetic-upgrade-container');
          }),
          this._retrieveSettingsData();
      }
      static get observedAttributes() {
        return ['type', 'show-none'];
      }
      attributeChangedCallback(e, t, a) {
        'type' === e
          ? ((this._type = a),
            this._updateType(),
            this._clickedItem && this._updateAllStarShardsComponents())
          : 'show-none' === e
          ? ((this._showNoneOption = this.hasAttribute('show-none')),
            this._showNoneOption
              ? this._addClass('show-none', 'div.cosmetic-option-group-list')
              : this._removeClass(
                  'show-none',
                  'div.cosmetic-option-group-list',
                ))
          : void 0;
      }
      _playSound(e) {
        i.Audio.getChannel(r.default.SFX_CHANNEL).playSound(e);
      }
      _setElementText(e, t) {
        const a = this.shadowRoot.querySelector(e);
        a && (a.innerHTML = t);
      }
      _addClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && !a.classList.contains(e) && a.classList.add(e);
      }
      _removeClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && a.classList.contains(e) && a.classList.remove(e);
      }
      _toggleClass(e, t, a) {
        return a ? this._addClass(e, t) : this._removeClass(e, t);
      }
      _attachListener(e, t, a) {
        const n = this.shadowRoot.querySelector(e);
        n && n.addEventListener(t, a);
      }
      _detachListener(e, t, a) {
        const n = this.shadowRoot.querySelector(e);
        n && n.removeEventListener(t, a);
      }
      _numberOfDaysFromToday(e) {
        return (new Date() - this._convertDateStringToDate(e)) / 86400000;
      }
      _convertDateStringToDate(e) {
        if (!/^[0-9]{8}T[0-9]{6}.[0-9]{3}Z$/.test(e)) return new Date(e);
        const t = e.substr(0, 4),
          a = e.substr(4, 2),
          n = e.substr(6, 2),
          o = e.substr(9, 2),
          i = e.substr(11, 2),
          s = e.substr(13, 2);
        return new Date(`${t}-${a}-${n}T${o}:${i}:${s}Z`);
      }
    }
    (b.tagName = 'lol-parties-cosmetics-panel'), (t.default = b);
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-cosmetics-panel">\r\n\t<div class="cosmetic-selection-container">\r\n\t\t<!-- todo JA:, improve filter when box exists -->\r\n\t\t<div class="cosmetic-selection-options-container">\r\n\r\n\t\t\t<lol-uikit-flat-input class="search-container">\r\n\t\t\t\t<input\r\n\t\t\t\t  id="cosmetic_search_bar"\r\n\t\t\t\t  type="search"\r\n\t\t\t\t  name="search"\r\n\t\t\t\t  maxlength="24"\r\n\t\t\t\t/>\r\n\t\t\t  </lol-uikit-flat-input>\r\n\t\t\t<div class="currency-container">\r\n\t\t\t\t<video\r\n\t\t\t        class="currency-upgrade-video"\r\n\t\t\t        preload="auto"\r\n\t\t\t        src="/fe/lol-parties/starstards_currency_decrease.webm">\r\n\t\t\t    </video>\r\n\t\t\t\t<div class="currency-ss hidden"></div>\r\n\t\t    </div>\r\n\t\t</div>\r\n\t\t<lol-uikit-flat-checkbox class="hide-unowned-checkbox-container">\r\n\t\t\t<input id="hide_unowned_checkbox" type="checkbox" slot="input">\r\n\t\t\t<label id="hide_unowned_checkbox_label" for="hide_unowned_checkbox" slot="label"></label>\r\n\t\t</lol-uikit-flat-checkbox>\r\n\t\t<lol-uikit-scrollable overflow-masks="enabled" class="cosmetic-option-scroller">\r\n\t\t\t<div class="cosmetic-scroller-item cosmetic-option-group-list">\r\n\t\t\t\t<!-- Renderer layout example\r\n\t\t\t\t<div class="cosmetic-option-group">\r\n\t\t\t\t\t<div class="cosmetic-option-group-header">\r\n\t\t\t\t\t\t<div class="cosmetic-option-group-title"></div>\r\n\t\t\t\t\t\t<div class="cosmetic-option-group-info"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class="cosmetic-option-list">\r\n\t\t\t\t\t\t<div class="cosmetic-option"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t-->\r\n\t\t\t</div>\r\n\t\t</lol-uikit-scrollable>\r\n\r\n\t</div>\r\n\t<div class="selected-cosmetic">\r\n\t\t<div class="selected-cosmetic-header-group">\r\n\t\t</div>\r\n\t\t<div class="selected-cosmetic-header-group-2">\r\n\t\t\t<div class="selected-cosmetic-rarity"></div>\r\n\t\t\t<div class="selected-cosmetic-title"></div>\r\n\t\t\t<div class="cosmetic-upgrade-container hidden">\r\n\t\t\t\t<div class="cosmetic-upgrade-bounding-container cosmetic-upgrade-1 unowned">\r\n\t\t\t\t\t<div class="cosmetic-upgrade">\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class="cosmetic-upgrade-bounding-container cosmetic-upgrade-2 unowned">\r\n\t\t\t\t\t<div class="cosmetic-upgrade">\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class="cosmetic-upgrade-bounding-container cosmetic-upgrade-3 unowned">\r\n\t\t\t\t\t<div class="cosmetic-upgrade">\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<span class="star-shards-label-wrapper">\r\n\t\t\t\t<span class="star-shards-label"></span>\r\n\t\t\t\t<span class="star-shards-amount"></span>\r\n\t\t\t</span>\r\n\t\t\t<lol-uikit-flat-button class="cosmetic-group-action-button" disabled>\r\n\t\t\t</lol-uikit-flat-button>\r\n\t\t</div>\r\n\r\n\t</div>\r\n</template>';
  },
  function (e, t, a) {
    var n = a(16);
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  font-family: var(--font-display);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-family: var(--font-body);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  -webkit-user-select: none;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: uppercase;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ko-kr),\n:host .cosmetic-selection-options-container .currency-ss:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ja-jp),\n:host .cosmetic-selection-options-container .currency-ss:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(tr-tr),\n:host .cosmetic-selection-options-container .currency-ss:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(el-gr),\n:host .cosmetic-selection-options-container .currency-ss:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(th-th),\n:host .cosmetic-selection-options-container .currency-ss:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(zh-tw) {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  color: #f0e6d2;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 28px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  color: #f0e6d2;\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 22px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  color: #a09b8c;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container .currency-ss {\n  font-size: 14px;\n  font-weight: 700;\n  letter-spacing: 0.075em;\n  color: #cdbe91;\n}\n:host .cosmetic-selection-options-container .currency-ss.active {\n  position: relative;\n  color: #f0e6d2;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  font-family: var(--font-display);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-family: var(--font-body);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  -webkit-user-select: none;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: uppercase;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ko-kr),\n:host .cosmetic-selection-options-container .currency-ss:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ja-jp),\n:host .cosmetic-selection-options-container .currency-ss:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(tr-tr),\n:host .cosmetic-selection-options-container .currency-ss:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(el-gr),\n:host .cosmetic-selection-options-container .currency-ss:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(th-th),\n:host .cosmetic-selection-options-container .currency-ss:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(zh-tw) {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  color: #f0e6d2;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 28px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  color: #f0e6d2;\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 22px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  color: #a09b8c;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container .currency-ss {\n  font-size: 14px;\n  font-weight: 700;\n  letter-spacing: 0.075em;\n  color: #cdbe91;\n}\n:host .cosmetic-selection-options-container .currency-ss.active {\n  position: relative;\n  color: #f0e6d2;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  position: relative;\n}\n:host .cosmetic-selection-options-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-right: 33px;\n  padding-left: 20px;\n  padding-bottom: 10px;\n  position: relative;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input {\n  display: block;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input {\n  display: block;\n  box-sizing: border-box;\n  width: 100%;\n  height: 30px;\n  padding: 0 6px;\n  -webkit-appearance: none;\n  outline: none;\n  color: #f0e6d2;\n  border: thin solid #785a28;\n  background-color: rgba(0,0,0,0.7);\n  box-shadow: 0 0 0 1px rgba(0,0,0,0.25) inset, 0 0 0 1px rgba(0,0,0,0.25);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ar-ae) {\n  direction: rtl;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\'] {\n/* This is a fix for RCBUG-4514, where pasting any text twice\n       * in a row causes it to jump while the input is has focus.\n       * The bug only seems to occur when the line-height is larger\n       * than [height] / 2.\n       */\n  line-height: 15px;\n  padding-left: 24px;\n  background: no-repeat 5px center/16px url("/fe/lol-static-assets/images/uikit/magnifying-glass-icon.png") rgba(0,0,0,0.7);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\']:lang(ar-ae) {\n  direction: rtl;\n  padding: 0 24px 0 6px;\n  background-position: 98% center;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\']:focus {\n  background: no-repeat 5px center/16px url("/fe/lol-static-assets/images/uikit/magnifying-glass-icon.png"), linear-gradient(to bottom, rgba(7,16,25,0.7), rgba(32,39,44,0.7));\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\']:focus:lang(ar-ae) {\n  background-position: 98% center;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:focus {\n  background: linear-gradient(to bottom, rgba(7,16,25,0.7), rgba(32,39,44,0.7));\n  border-image: linear-gradient(to bottom, #785a28, #c8aa6e) 1 stretch;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:disabled {\n  color: #5c5b57;\n  background-color: #1e2328;\n  border-color: #3c3c41;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input::-webkit-input-placeholder {\n  color: #a09b8c;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]::-webkit-search-cancel-button {\n  -webkit-appearance: none;\n  cursor: pointer;\n  height: 18px;\n  width: 18px;\n  margin: 0 0 0 5px;\n  -webkit-mask: url("/fe/lol-uikit/images/search-box-clear.png") no-repeat center;\n  background-color: #cdbe91;\n  -webkit-mask-size: contain;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]::-webkit-search-cancel-button:hover {\n  background-color: #f0e6d2;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]::-webkit-search-cancel-button:active {\n  background-color: #463714;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]:lang(ar-ae)::-webkit-search-cancel-button {\n  margin: 0 5px 0 0;\n}\n:host .cosmetic-selection-options-container .search-container {\n  flex: 0 0 auto;\n  width: 325px;\n}\n:host .cosmetic-selection-options-container .currency-container {\n  position: relative;\n}\n:host .cosmetic-selection-options-container .currency-ss {\n  visibility: visible;\n  position: relative;\n  color: #f0e6d2;\n  padding: 3px 8px 4px 30px;\n  border-radius: 8px;\n  background: rgba(0,0,0,0.5);\n  cursor: pointer;\n}\n:host .cosmetic-selection-options-container .currency-ss.hidden {\n  visibility: hidden;\n}\n:host .cosmetic-selection-options-container .currency-ss::after {\n  content: \'\';\n  position: absolute;\n  left: -2px;\n  top: 0;\n  bottom: 0;\n  width: 35px;\n  background-image: url("/fe/lol-static-assets/images/icon-star-shards-active-88.png");\n  background-position: 0 center;\n  background-size: 35px 35px;\n  background-repeat: no-repeat;\n}\n:host .cosmetic-selection-options-container .currency-upgrade-video {\n  position: absolute;\n  top: -33px;\n  left: -88px;\n  mix-blend-mode: screen;\n  width: 256px;\n  height: 64px;\n}\n:host .hide-unowned-checkbox-container {\n  display: flex;\n  padding-left: 20px;\n}\n:host .hide-unowned-checkbox-container .hide_unowned_checkbox_label {\n  height: 17px;\n}\n:host .selected-cosmetic {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  width: 323px;\n  position: relative;\n  flex: 0 0 auto;\n}\n:host .selected-cosmetic[content-id="NONE_OPTION"] {\n  background-size: 100px;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group {\n  width: 100%;\n  height: 405px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1 1 auto;\n  box-shadow: inset 0 0 20px 1px #010a13, inset 0 0 0 1px #010a13;\n  background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 70%, #000);\n  background-size: cover;\n  background-position: center;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group.locked {\n  filter: grayscale(0.75) brightness(0.85);\n}\n:host .selected-cosmetic.rarity-0 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url(' +
          n(a(251)) +
          ');\n}\n:host .selected-cosmetic.rarity-1 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url(' +
          n(a(252)) +
          ');\n}\n:host .selected-cosmetic.rarity-2 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url(' +
          n(a(253)) +
          ');\n}\n:host .selected-cosmetic.rarity-3 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url(' +
          n(a(254)) +
          ');\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  flex: 0 0 auto;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-icon {\n  width: 16px;\n  height: 16px;\n  position: relative;\n  vertical-align: middle;\n  margin-top: -1px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-action-button {\n  display: flex;\n  min-width: 170px;\n  height: 32px;\n  flex: 0 0 auto;\n  padding-bottom: 24px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-action-button::before {\n  display: inline-block;\n  height: 10px;\n  width: 10px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 12px;\n  line-height: 16px;\n  height: 24px;\n  color: #ff2345;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper.hidden {\n  opacity: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper.purchasable {\n  color: #c8aa6e;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper .star-shards-amount {\n  color: #f0e6d2;\n  margin-left: 0.5em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper .star-shards-amount.hidden {\n  display: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  line-height: 20px;\n  font-size: 21px;\n  letter-spacing: 0.07em;\n  text-align: center;\n  width: 95%;\n  flex: 0 0 auto;\n  margin-top: 14px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url(' +
          n(a(255)) +
          ");\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 150px 30px;\n  width: 100%;\n  height: 30px;\n  flex: 0 0 auto;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  transition: opacity 0.1s linear;\n  margin-bottom: 12px;\n  margin-top: 24px;\n  padding: 0 3px 0 3px;\n  flex: 1 1 auto;\n  position: relative;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container.hidden {\n  opacity: 0;\n  pointer-events: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container {\n  width: 76px;\n  height: 34px;\n  position: relative;\n  background: linear-gradient(#c8aa6e, #785a28);\n  flex: 0 0 auto;\n  border-radius: 21px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:last-child {\n  margin-right: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.recent,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.intended {\n  box-shadow: 0px 0px 5px rgba(255,171,46,0.7), 0px 0px 15px rgba(255,171,46,0.7);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.recent .cosmetic-upgrade,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.intended .cosmetic-upgrade {\n  background: linear-gradient(#1e2328, #585342);\n  background-clip: padding-box; /* !important\xE9 */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.recent .cosmetic-upgrade .cosmetics-modal-star,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.intended .cosmetic-upgrade .cosmetics-modal-star {\n  filter: brightness(1.4);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.equipped .cosmetic-upgrade {\n  background: linear-gradient(#c8aa6e, #785a28);\n  background-clip: padding-box; /* !important\xE9 */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned .cosmetic-upgrade {\n  background: #1e2328;\n  background-clip: padding-box; /* !important\xE9 */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned .cosmetic-upgrade .cosmetics-modal-star {\n  filter: contrast(0) brightness(0.5);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned::after {\n  content: '';\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: translateY(50%);\n  pointer-events: none;\n  height: 40px;\n  background-size: 40px;\n  background-image: url(" +
          n(a(106)) +
          ');\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned.not-enough-shards::before {\n  content: \' \';\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0px;\n  height: 16px;\n  background-image: url("/fe/lol-static-assets/images/icon-star-shards-36.png");\n  background-size: 16px;\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: translateY(-50%);\n  pointer-events: none;\n  z-index: 1;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned.purchasable::before {\n  content: \' \';\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: translateY(-50%);\n  pointer-events: none;\n  height: 35px;\n  background-size: 35px;\n  z-index: 1;\n  background-image: url("/fe/lol-static-assets/images/icon-star-shards-active-88.png");\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned.purchasable::after {\n  opacity: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover.unowned::after {\n  transform: translateY(53%);\n  background-image: url(' +
          n(a(107)) +
          ');\n  height: 54px;\n  background-size: 54px 54px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover.unowned .cosmetic-upgrade .cosmetics-modal-star {\n  filter: contrast(0.2) brightness(0.7);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover .cosmetic-upgrade {\n  background: linear-gradient(#1e2328, #585342);\n  background-clip: padding-box; /* !important\xE9 */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover .cosmetic-upgrade .cosmetics-modal-star {\n  filter: brightness(1.4);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container .cosmetic-upgrade {\n  border-radius: 21px;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  background: #1e2328;\n  background-clip: padding-box; /* !important\xE9 */\n  border: 2px solid transparent;\n  pointer-events: none;\n  position: relative;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container .cosmetic-upgrade .cosmetics-modal-star {\n  width: 18px;\n  height: 18px;\n  display: block;\n  background-image: url(' +
          n(a(108)) +
          ');\n  background-size: contain;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.star-shards-disabled .cosmetic-upgrade::before {\n  opacity: 0;\n}\n:host .cosmetic-selection-container {\n  position: relative;\n  flex: 1 1 auto;\n  overflow: hidden;\n  padding-right: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  border-right: 2px solid transparent;\n  border-left: 2px solid transparent;\n  border-image: linear-gradient(rgba(45,35,17,0.6) 0px, rgba(90,70,34,0.6) 11.46%, rgba(90,70,34,0.6) 88.54%, rgba(45,35,17,0.6) 100%) 1;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller {\n  width: 100%;\n  height: 100%;\n  flex: 1 1 auto;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-scroller-item {\n  padding: 0 10px 0 10px;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-scroller-item:first-child {\n  padding-top: 10px;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-misc {\n  display: flex;\n  flex-direction: row;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  transition: opacity 0.1s linear 0.01s;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list.hidden {\n  opacity: 0;\n  pointer-events: none;\n  height: 10%;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option {\n  transition: opacity 0.05s linear, height 0.05s linear, width 0.01s linear, padding-bottom 0.01s linear;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option[content-id="NONE_OPTION"] {\n  display: none;\n  background-size: 36px;\n  background-repeat: no-repeat;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list.show-none .cosmetic-option[content-id="NONE_OPTION"] {\n  display: flex;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group {\n  display: block;\n  padding-bottom: 13px;\n  transition: opacity 0.1s linear, height 0.1s linear, width 0.01s linear, padding-bottom 0.01s linear;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  display: flex;\n  margin: 5px;\n  opacity: 0.7;\n  color: #f0e6d2;\n  background: linear-gradient(270deg, rgba(90,70,34,0) 0%, #5a4622 52.08%, #ab8e58 92.19%, rgba(90,70,34,0) 100%), linear-gradient(2.02deg, rgba(1,10,19,0) 23.21%, rgba(1,10,19,0.72) 84.16%), linear-gradient(270deg, rgba(55,46,28,0) 0%, #372e1c 71.35%, #372e1c 85.94%, rgba(55,46,28,0) 100%);\n  background-size: 100% 1px, 100% 19px, 100% 19px;\n  background-repeat: no-repeat;\n  background-position: 0 19px, 0 0, 0 0;\n  letter-spacing: 0.05em;\n  padding-bottom: 10px;\n  transition: opacity 0.05s linear;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header .cosmetic-option-group-title {\n  opacity: 1;\n  padding-right: 5px;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-list {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group[group-shown="false"] {\n  opacity: 0;\n  pointer-events: none;\n  height: 0;\n  width: 0;\n  padding-bottom: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group[group-shown="false"] .cosmetic-option-group-header {\n  opacity: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller lol-parties-cosmetics-renderer[item-shown="false"] {\n  opacity: 0;\n  pointer-events: none;\n  height: 0;\n  width: 0;\n  margin: 0;\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    e.exports = a.p + 'common_plating_big.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'epic_plating_big.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'legendary_plating_big.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'mythic_plating_big.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'no_plating_big.png';
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(0),
      i = n(o),
      s = a(13),
      l = n(s);
    class r extends o.webComponents.ShadowElement {
      templateMarkup() {
        return a(257);
      }
      stylesheetMarkup() {
        return a(258);
      }
      constructor() {
        super(),
          (this._onClickBinding = this._onClicked.bind(this)),
          (this._onMouseInBinding = this._onMouseIn.bind(this)),
          (this._eventPreventDefaultCallback = (e) => e.preventDefault());
      }
      connectedCallback() {
        super.connectedCallback(),
          this.addEventListener('click', this._onClickBinding),
          this.addEventListener('mouseenter', this._onMouseInBinding),
          this.addEventListener('mousedown', this._eventPreventDefaultCallback);
      }
      disconnectedCallback() {
        super.disconnectedCallback(),
          this.removeEventListener('click', this._onClickBinding),
          this.removeEventListener('mouseenter', this._onMouseInBinding),
          this.removeEventListener(
            'mousedown',
            this._eventPreventDefaultCallback,
          );
      }
      _onClicked() {
        this._playSound(l.default.SFX_URLS.SFX_COMPANION_PICKER_CLICK),
          this.dispatchEvent(
            new CustomEvent('lol-parties-cosmetics-item-click', {
              composed: !0,
              detail: { item: this._data },
            }),
          );
      }
      _onMouseIn() {
        this._playSound(l.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER),
          this.dispatchEvent(
            new CustomEvent('lol-parties-cosmetics-item-hover', {
              composed: !0,
              detail: { item: this._data },
            }),
          );
      }
      _playSound(e) {
        o.Audio.getChannel(l.default.SFX_CHANNEL).playSound(e);
      }
      setData(e) {
        if (!e) return;
        this._setIconPath(e);
        let t = !1,
          a = !1;
        const n = this.getAttribute('is-recent-group');
        if (e.upgrades && 0 < e.upgrades.length && 'true' !== n)
          for (let n = e.upgrades.length - 1; 0 <= n; n--) {
            const o = e.upgrades[n];
            o.owned && o.selected
              ? this._setIconPath(o)
              : o.owned && !a && !t && this._setIconPath(o),
              (t = t || o.selected),
              (a = a || o.owned),
              o.owned
                ? this._removeClass('unowned', `.rank-${n + 2}`)
                : this._addClass('unowned', `.rank-${n + 2}`),
              t
                ? this._addClass('selected', `.rank-${n + 2}`)
                : this._removeClass('selected', `.rank-${n + 2}`);
          }
        e.selected && e.owned && this._setIconPath(e),
          (t = t || e.selected),
          (a = a || e.owned),
          e.owned
            ? (t
                ? this._addClass('selected', '.rank-1')
                : this._removeClass('selected', '.rank-1'),
              this._removeClass('unowned', '.rank-1'))
            : this._addClass('unowned', '.rank-1'),
          this._data &&
            this._removeClass(
              `rarity-${this._data.rarityValue}`,
              '.cosmetics-renderer-rarity',
            ),
          this._addClass(
            `rarity-${e.rarityValue}`,
            '.cosmetics-renderer-rarity',
          ),
          this._setSelected(t),
          a
            ? (this._addOwned(),
              1 < e.itemId
                ? (this._removeClass('hidden', '.cosmetics-renderer-rarity'),
                  e.upgrades &&
                    0 < e.upgrades.length &&
                    this._removeClass(
                      'hidden',
                      '.cosmetics-renderer-rank-container',
                    ))
                : (this._addClass(
                    'hidden',
                    '.cosmetics-renderer-rank-container',
                  ),
                  this._addClass('hidden', '.cosmetics-renderer-rarity')))
            : (this._removeClass('owned', '.cosmetics-renderer'),
              this._removeClass('owned', '.cosmetics-renderer-filter'),
              this._addClass('hidden', '.cosmetics-renderer-rank-container'),
              this._addClass('hidden', '.cosmetics-renderer-rarity')),
          this._setIds(e),
          this._setLoyalty(e.loyalty),
          n && this._setRecentItemData(e),
          (this._data = e);
      }
      _setRecentItemData(e) {
        e.isUpgradable &&
          this._removeClass('hidden', '.cosmetics-renderer-rank-container');
        for (let t = 1; t <= e.level; t++)
          this._removeClass('unowned', `.rank-${t}`),
            e.selected && this._addClass('selected', `.rank-${t}`);
      }
      _setSelected(e) {
        e
          ? this._addClass('selected', '.cosmetics-renderer')
          : this._removeClass('selected', '.cosmetics-renderer');
      }
      _setLoyalty(e) {
        e
          ? this._removeClass('hidden', '.cosmetics-renderer-loyalty')
          : this._addClass('hidden', '.cosmetics-renderer-loyalty');
      }
      _addOwned() {
        this._addClass('owned', '.cosmetics-renderer'),
          this._addClass('owned', '.cosmetics-renderer-filter');
      }
      _setIds(e) {
        this.setAttribute('content-id', e.contentId),
          this.setAttribute('item-id', e.itemId);
      }
      _setElementText(e, t) {
        const a = this.shadowRoot.querySelector(e);
        a && (a.innerHTML = t);
      }
      _setIconPath(e) {
        const t = this.shadowRoot.querySelector('.cosmetics-renderer-icon');
        t && (t.src = e.loadoutsIcon);
      }
      static get observedAttributes() {
        return ['highlighted', 'is-recent-group'];
      }
      attributeChangedCallback(e, t, a) {
        'highlighted' === e
          ? a
            ? this._addClass('highlighted', '.cosmetics-renderer')
            : this._removeClass('highlighted', '.cosmetics-renderer')
          : void 0;
      }
      _addClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && !a.classList.contains(e) && a.classList.add(e);
      }
      _removeClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && a.classList.contains(e) && a.classList.remove(e);
      }
    }
    (r.tagName = 'lol-parties-cosmetics-renderer'), (t.default = r);
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-cosmetics-renderer">\r\n  <div class="cosmetics-renderer">\r\n    <img class="cosmetics-renderer-icon"/>\r\n    <div class="cosmetics-renderer-filter"></div>\r\n    <div class="cosmetics-renderer-rank-container hidden">\r\n      <div class="cosmetics-renderer-rank-bounding-container">\r\n        <span class=\'cosmetics-renderer-star rank-1 unowned\'></span>\r\n        <span class=\'cosmetics-renderer-star rank-2 unowned\'></span>\r\n        <span class=\'cosmetics-renderer-star rank-3 unowned\'></span>\r\n      </div>\r\n    </div>\r\n    <div class="cosmetics-renderer-rarity"></div>\r\n    <div class="cosmetics-renderer-loyalty hidden"></div>\r\n  </div>\r\n</template>\r\n';
  },
  function (e, t, a) {
    var n = a(16);
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host {\n  --rcp-fe-lol-parties-cosmetics-renderer-border-width: 2px;\n}\n:host {\n  position: relative;\n  width: 64px;\n  height: 72px;\n  margin: 7px;\n  box-sizing: border-box;\n  cursor: pointer;\n}\n:host .cosmetics-renderer {\n  position: relative;\n  width: 100%;\n  height: 64px;\n  box-sizing: border-box;\n  border: thin solid #1e2328;\n}\n:host .cosmetics-renderer.selected {\n  filter: none;\n  border-width: 2px;\n  border: 2px solid #c79a3b;\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container {\n  top: -8px;\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container {\n  background: linear-gradient(#c8aa6e, #785a28);\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star {\n  filter: brightness(0.5);\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star.selected {\n  filter: none;\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity {\n  bottom: -20px;\n  left: 3px;\n  background-image: url(' +
          n(a(46)) +
          ');\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity.rarity-1 {\n  background-image: url(' +
          n(a(47)) +
          ');\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity.rarity-2 {\n  background-image: url(' +
          n(a(48)) +
          ');\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity.rarity-3 {\n  background-image: url(' +
          n(a(49)) +
          ');\n}\n:host .cosmetics-renderer:hover,\n:host .cosmetics-renderer.highlighted {\n  filter: brightness(110%);\n  border-width: 2px;\n  border-image: linear-gradient(to bottom, #f0e6d2, #c89b3c) 1;\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity {\n  bottom: -20px;\n  left: 3px;\n  background-image: url(' +
          n(a(46)) +
          ');\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity.rarity-1,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity.rarity-1 {\n  background-image: url(' +
          n(a(47)) +
          ');\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity.rarity-2,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity.rarity-2 {\n  background-image: url(' +
          n(a(48)) +
          ');\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity.rarity-3,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity.rarity-3 {\n  background-image: url(' +
          n(a(49)) +
          ");\n}\n:host .cosmetics-renderer:hover:not(.selected) .cosmetics-renderer-loyalty::after,\n:host .cosmetics-renderer.highlighted:not(.selected) .cosmetics-renderer-loyalty::after {\n  transform: translate(229%, -336%);\n}\n:host .cosmetics-renderer:not(.owned)::before {\n  content: '';\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background-color: #000;\n  background-size: 100% 100%;\n  opacity: 50%;\n}\n:host .cosmetics-renderer:not(.owned)::before::hover {\n  opacity: 0;\n}\n:host .cosmetics-renderer:not(.owned)::after {\n  content: ' ';\n  position: absolute;\n  width: 100%;\n  height: 40px;\n  top: 0;\n  left: 0;\n  background-image: url(" +
          n(a(106)) +
          ');\n  background-position: center bottom;\n  background-repeat: no-repeat;\n  background-size: 40px 40px;\n  transform: translate(0, -52%) /*rtl:translate(0, -52%)*/;\n}\n:host .cosmetics-renderer:not(.owned):hover::before {\n  background-color: rgba(0,0,0,0.3);\n}\n:host .cosmetics-renderer:not(.owned):hover::after {\n  background-image: url(' +
          n(a(107)) +
          ');\n  height: 54px;\n  background-size: 54px 54px;\n  transform: translate(0, -47%) /*rtl:translate(0, -52%)*/;\n}\n:host .cosmetics-renderer .cosmetics-renderer-filter {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0,0,0,0.6);\n  border: thin solid #000;\n}\n:host .cosmetics-renderer .cosmetics-renderer-filter.owned {\n  background-color: rgba(0,0,0,0);\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container {\n  position: absolute;\n  top: -7px;\n  left: 0;\n  pointer-events: none;\n  display: flex;\n  width: 100%;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container {\n  padding: 1px 6px 1px 6px;\n  border-radius: 100px;\n  box-sizing: border-box;\n  background: #1e2328;\n  border: thin solid #000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star {\n  width: 10px;\n  height: 10px;\n  display: block;\n  background-image: url(' +
          n(a(108)) +
          ');\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: 0 0 auto;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star.unowned {\n  display: none;\n}\n:host .cosmetics-renderer .cosmetics-renderer-icon {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  position: relative;\n}\n:host .cosmetics-renderer .cosmetics-renderer-icon::before {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  box-shadow: inset 0 0 1 10px #000;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity {\n  position: absolute;\n  bottom: -19px;\n  left: 4px;\n  width: 56px;\n  height: 32px;\n  background-image: url(' +
          n(a(259)) +
          ');\n  background-position: center bottom;\n  background-repeat: no-repeat;\n  background-size: contain;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity.rarity-1 {\n  background-image: url(' +
          n(a(260)) +
          ');\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity.rarity-2 {\n  background-image: url(' +
          n(a(261)) +
          ');\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity.rarity-3 {\n  background-image: url(' +
          n(a(262)) +
          ");\n}\n:host .cosmetics-renderer .cosmetics-renderer-loyalty {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n:host .cosmetics-renderer .cosmetics-renderer-loyalty::after {\n  content: ' ';\n  position: absolute;\n  width: 22px;\n  height: 22px;\n  background-image: url(" +
          n(a(263)) +
          ');\n  background-position: center bottom;\n  background-size: 22px 22px;\n  transform: translate(233%, -340%);\n}\n:host .cosmetics-renderer .hidden {\n  visibility: hidden;\n  opacity: 0;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer {\n  border-width: 2px;\n  border-image: linear-gradient(to bottom, #fdfaf1, #78531c) 1;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rank-container {\n  top: -8px;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container {\n  background: linear-gradient(#c8aa6e, #785a28);\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star {\n  filter: contrast(30) brightness(100%);\n  background-image: url(' +
          n(a(264)) +
          ');\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rarity {\n  bottom: -20px;\n  left: 3px;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-icon {\n  filter: drop-shadow(0px 0px 5px rgba(255,193,34,0.25)) drop-shadow(0px 0px 4px rgba(255,184,0,0.25)) drop-shadow(0px 0px 8px #ffcf53);\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    e.exports = a.p + 'common_plating.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'epic_plating.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'legendary_plating.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'mythic_plating.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'Loyalty.png';
  },
  function (e, t, a) {
    e.exports = a.p + 'recent_star.png';
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(0),
      o = a(13),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    class s extends n.webComponents.ShadowElement {
      templateMarkup() {
        return a(266);
      }
      stylesheetMarkup() {
        return a(267);
      }
      constructor() {
        super(), (this._listenersAdded = !1);
      }
      connectedCallback() {
        super.connectedCallback();
        const e = this.shadowRoot.querySelector('#bg-particles-intro');
        this._animationPlaybackStarted ||
          ((e.onAnimationStart = () => {
            n.Audio.getChannel(i.default.SFX_CHANNEL).playSound(
              i.default.SFX_URLS.SFX_STAR_SHARDS_CELEBRATION,
            );
            const e = this.shadowRoot.querySelector('#bg-particles-stars');
            e.play();
            const t = this.shadowRoot.querySelector('.bg-video-intro');
            t.play(),
              t.addEventListener('done', () => {
                const e = this.shadowRoot.querySelector('.bg-video-loop');
                e.play();
              }),
              setTimeout(() => {
                const e = this.shadowRoot.querySelector('.lighting-bolts');
                e.play(),
                  e.addEventListener('done', () => {
                    const e = this.shadowRoot.querySelector('.rarity-bolts');
                    e.play();
                  });
              }, 860),
              setTimeout(() => {
                this._addClass('hidden', '.previous-tier-img');
              }, 1660),
              this._removeClass('hidden', '.little-legend-container');
          }),
          (e.onAnimationComplete = () => {
            const e = this.shadowRoot.querySelector('#bg-particles-loop');
            this._removeClass('hidden', '#bg-particles-loop'), e.play();
          }),
          e.play(),
          (this._animationPlaybackStarted = !0));
      }
      setData({ previousItem: e, newItem: t }) {
        const a = this.shadowRoot.querySelector('.previous-tier-img'),
          n = this.shadowRoot.querySelector('.new-tier-img');
        (a.src = e.loadoutsIcon),
          (n.src = t.loadoutsIcon),
          this._addClass(`rarity-${e.rarityValue}`, '.little-legend-container');
        const o = this.shadowRoot.querySelector('#bg-particles-stars');
        o.setAttribute(
          'src',
          `/fe/lol-parties/lottie/LLUpgradeCeremony_06LevelStarIcons/LLUpgradeCeremony_StarsLv${t.level}.json`,
        );
      }
      _addClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && !a.classList.contains(e) && a.classList.add(e);
      }
      _removeClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && a.classList.contains(e) && a.classList.remove(e);
      }
    }
    (s.tagName = 'lol-parties-cosmetics-upgrade-celebration'), (t.default = s);
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-cosmetics-upgrade-celebration">\r\n    <lol-uikit-lottie id="bg-particles-intro"\r\n                      class="lottie-animation"\r\n                      src="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/LLUpgradeCeremony_Scene_IN.json"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/images/"\r\n                      autoplay="false">\r\n    </lol-uikit-lottie>\r\n    <lol-uikit-lottie id="bg-particles-loop"\r\n                      class="lottie-animation hidden"\r\n                      src="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/LLUpgradeCeremony_Scene_LOOP.json"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/images/"\r\n                      autoplay="false"\r\n                      loop="true">\r\n    </lol-uikit-lottie>\r\n\r\n    <lol-uikit-video class="bg-video bg-video-intro"\r\n                     type="intro"\r\n                     preload\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_02BGParticles/videos/LLUpgradeCeremony_ParticlesBG_IN.webm">\r\n    </lol-uikit-video>\r\n    <lol-uikit-video class="bg-video bg-video-loop"\r\n                     type="idle"\r\n                     preload\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_02BGParticles/videos/LLUpgradeCeremony_ParticlesBG_LOOP.webm">\r\n    </lol-uikit-video>\r\n\r\n\r\n    <div class="little-legend-container hidden">\r\n        <img class="little-legend-img new-tier-img"/>\r\n        <img class="little-legend-img previous-tier-img"/>\r\n        <div class="little-legend-overlay"></div>\r\n    </div>\r\n\r\n    <lol-uikit-video class="bg-video lighting-bolts"\r\n                     type="intro"\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_04FGLightning/videos/LLUpgradeCeremony_BoltsFG.webm">\r\n    </lol-uikit-video>\r\n\r\n    <lol-uikit-video class="rarity-bolts"\r\n                     type="intro"\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_05RarityBolts/videos/LLUpgradeCeremony_RarityBolts.webm">\r\n    </lol-uikit-video>\r\n    <lol-uikit-lottie id="bg-particles-stars"\r\n                      class="lottie-animation"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeCeremony_06LevelStarIcons/images/"\r\n                      autoplay="false"\r\n                      >\r\n    </lol-uikit-lottie>\r\n</template>';
  },
  function (e, t, a) {
    var n = a(16);
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host {\n  width: 1280px;\n  height: 720px;\n  position: relative;\n}\n:host .hidden {\n  visibility: hidden;\n}\n:host .lottie-animation {\n  position: absolute;\n  width: 1280px;\n  height: 720px;\n}\n:host .bg-video {\n  position: absolute;\n  width: 720px;\n  height: 720px;\n  left: 280px;\n  top: 0;\n  mix-blend-mode: screen;\n}\n:host .rarity-bolts {\n  position: absolute;\n  width: 96px;\n  height: 96px;\n  left: 592px;\n  top: 408px;\n}\n:host .little-legend-container {\n  position: absolute;\n  width: 208px;\n  height: 208px;\n  left: 532px;\n  top: 236px;\n  border: 4px solid;\n  border-image: linear-gradient(180deg, #c8aa6e 0%, #c89b3c 48.96%, #785a28 100%) 50 stretch stretch;\n}\n:host .little-legend-container:before {\n  position: absolute;\n  content: " ";\n  left: -5px;\n  right: -5px;\n  bottom: -5px;\n  top: -5px;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-container:after {\n  position: absolute;\n  content: "";\n  bottom: -43px;\n  left: 48px;\n  width: 112px;\n  height: 64px;\n  background-size: 100% 100%;\n  background-image: url(' +
          n(a(46)) +
          ');\n}\n:host .little-legend-container.rarity-1:after {\n  background-image: url(' +
          n(a(47)) +
          ');\n}\n:host .little-legend-container.rarity-2:after {\n  background-image: url(' +
          n(a(48)) +
          ');\n}\n:host .little-legend-container.rarity-3:after {\n  background-image: url(' +
          n(a(49)) +
          ');\n}\n:host .little-legend-img {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  box-sizing: border-box;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-overlay {\n  position: absolute;\n  height: 83px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.77) 66.15%);\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(0);
    const o = (0, n.getProvider)().getSocket();
    class i extends n.webComponents.ShadowElement {
      templateMarkup() {
        return a(269);
      }
      stylesheetMarkup() {
        return a(270);
      }
      constructor() {
        super(),
          (this._selectedSeries = ''),
          (this._selectedOuterRadius = '44px'),
          (this._selectedInnerRadius = '38px'),
          (this._dataBinding = (0, n.dataBinding)('/lol-missions', o)),
          (this._created = !0);
      }
      connectedCallback() {
        this.addEventListener('click', () => {
          n.Navigation.showTracker(this._selectedSeries);
        }),
          (this._selectedSeries = this.getAttribute('series')),
          (this._selectedOuterRadius = this.getAttribute('outerRadius')
            ? this.getAttribute('outerRadius')
            : this._selectedOuterRadius),
          (this._selectedInnerRadius = this.getAttribute('innerRadius')
            ? this.getAttribute('innerRadius')
            : this._selectedInnerRadius);
        const e = this.shadowRoot.querySelector('.series-button-container');
        e.style.setProperty('--outer-radius', this._selectedOuterRadius),
          e.style.setProperty('--inner-radius', this._selectedInnerRadius),
          this._dataBinding.observe(
            '/v1/series',
            this,
            this._handleSeriesChanged,
          ),
          this._dataBinding.observe(
            '/v1/missions',
            this,
            this._handleMissionsChanged,
          ),
          (this.shadowRoot.querySelector('.series-tracker-label').innerHTML =
            n.tra.get('missions_series_button_text'));
      }
      disconnectedCallback() {
        this.removeEventListener('click', () => {
          n.Navigation.showTracker(this._selectedSeries);
        }),
          this._dataBinding.unobserve(this);
      }
      _handleMissionsChanged(e) {
        if (
          ((this._missions = e),
          !e ||
            !this._series ||
            0 === e.length ||
            0 === this._series.length ||
            !this._selectedSeriesNames)
        )
          return;
        this._seriesSeriesMissions = [];
        let t = 0;
        n.lodash.forEach(e, (e) => {
          ('' === this._selectedSeries ||
            'all_missions' === this._selectedSeries ||
            -1 < this._selectedSeriesNames.indexOf(e.seriesName)) &&
            e.display &&
            -1 < e.display.locations.indexOf('LCU_TRACKER') &&
            (this._seriesSeriesMissions.push(e), e.isNew && t++);
        }),
          0 < t
            ? ((this.shadowRoot.querySelector(
                '.series-tracker-reminder-label',
              ).innerHTML = t),
              this._removeClass('hidden', '.series-tracker-reminder-label'))
            : this._addClass('hidden', '.series-tracker-reminder-label');
      }
      _handleSeriesChanged(e) {
        if (
          ((this._series = e),
          e && this._missions && 0 !== e.length && 0 !== this._missions.length)
        ) {
          this._selectedSeriesNames = [];
          const e = n.lodash.keyBy(this._series, 'internalName');
          for (const t in e) {
            let a = e[t].parentInternalName;
            for (; e[a]; ) a = e[a].parentInternalName;
            ('' === this._selectedSeries ||
              'all_missions' === this._selectedSeries ||
              t === this._selectedSeries ||
              a === this._selectedSeries) &&
              this._selectedSeriesNames.push(t);
          }
          this._handleMissionsChanged(this._missions);
        }
      }
      _updateType(e) {
        this._type = e;
      }
      static get observedAttributes() {
        return ['series', 'type'];
      }
      attributeChangedCallback(e, t, a) {
        'series' === e
          ? ((this._selectedSeries = a),
            this._handleSeriesChanged(this._series))
          : 'type' == e && this._updateType(a);
      }
      _addClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && !a.classList.contains(e) && a.classList.add(e);
      }
      _removeClass(e, t) {
        const a = this.shadowRoot.querySelector(t);
        a && a.classList.contains(e) && a.classList.remove(e);
      }
      _attachListener(e, t, a) {
        const n = this.shadowRoot.querySelector(e);
        n && n.addEventListener(t, a);
      }
      _detachListener(e, t, a) {
        const n = this.shadowRoot.querySelector(e);
        n && n.removeEventListener(t, a);
      }
    }
    (i.tagName = 'lol-parties-series-button'), (t.default = i);
  },
  function (e) {
    e.exports =
      '<template id="lol-parties-template-series-button">\r\n\t<div class="series-button-container">\r\n        <div class="series-tracker-label"></div>\r\n\t\t<div class="series-tracker-button">\r\n        </div>\r\n\t\t<div class="series-tracker-reminder-label hidden"></div>\r\n\t</div>\r\n</template>\r\n';
  },
  function (e, t, a) {
    (t = e.exports = a(8)(!1)),
      t.push([
        e.i,
        ':host .series-button-container .series-tracker-reminder-label {\n  font-family: var(--font-display);\n}\n:host .series-button-container .series-tracker-label {\n  font-family: var(--font-body);\n}\n:host .series-button-container .series-tracker-label,\n:host .series-button-container .series-tracker-reminder-label {\n  -webkit-user-select: none;\n}\n:host .series-button-container .series-tracker-label,\n:host .series-button-container .series-tracker-reminder-label {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .series-button-container .series-tracker-reminder-label {\n  text-transform: uppercase;\n}\n:host .series-button-container .series-tracker-reminder-label:lang(ko-kr),\n:host .series-button-container .series-tracker-reminder-label:lang(ja-jp),\n:host .series-button-container .series-tracker-reminder-label:lang(tr-tr),\n:host .series-button-container .series-tracker-reminder-label:lang(el-gr),\n:host .series-button-container .series-tracker-reminder-label:lang(th-th),\n:host .series-button-container .series-tracker-reminder-label:lang(zh-tw) {\n  text-transform: none;\n}\n:host .series-button-container .series-tracker-reminder-label {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .series-button-container .series-tracker-reminder-label:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .series-button-container .series-tracker-reminder-label:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .series-button-container .series-tracker-label {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.1em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .series-button-container .series-tracker-label:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .series-button-container .series-tracker-label:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host([type="simple"]) .series-button-container .series-tracker-label {\n  display: none;\n}\n:host([type="simple"]) .series-button-container .series-tracker-button {\n  transform: none;\n}\n:host([type="simple"]) .series-button-container .series-tracker-reminder-label {\n  transform: none;\n}\n:host {\n  height: 48px;\n}\n:host .series-button-container {\n  height: var(--outer-radius);\n  position: relative;\n  margin-right: 8px;\n  margin-top: 4px;\n  display: flex;\n  align-items: center;\n}\n:host .series-button-container .series-tracker-label {\n  height: 29px;\n  border-radius: 10px;\n  background: rgba(0,0,0,0.54);\n  text-align: right;\n  padding-right: 25px;\n  padding-left: 15px;\n  line-height: 29px;\n  flex: 0 0 auto;\n  cursor: pointer;\n}\n:host .series-button-container .series-tracker-button {\n  position: relative;\n  width: var(--outer-radius);\n  height: var(--outer-radius);\n  border: 1px solid rgba(0,0,0,0.35);\n  border-radius: 50%;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(#c1a05e, #6c5228);\n  flex: 0 0 auto;\n  transform: translateX(-35%);\n  cursor: pointer;\n}\n:host .series-button-container .series-tracker-button::before {\n  content: "";\n  position: absolute;\n  width: var(--inner-radius);\n  height: var(--inner-radius);\n  box-sizing: border-box;\n  border: 1px solid rgba(0,0,0,0.35);\n  background-image: url("/lol-game-data/assets/ASSETS/Missions/TFT/Battlepass/common/series_icon.svg");\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 45%;\n  background-color: #1e2328;\n  border-radius: 50%;\n}\n:host .series-button-container .series-tracker-reminder-label {\n  width: 21px;\n  height: 18px;\n  position: absolute;\n  background: #c89b3c;\n  border-radius: 4px;\n  right: -4px;\n  top: -4px;\n  font-size: 12px;\n  line-height: 18px;\n  letter-spacing: 0.03em;\n  text-align: center;\n  color: #000;\n  box-shadow: 0 0 0 #c89b3c;\n  animation: flash 1s infinite alternate;\n  transform: translateX(-35%);\n}\n:host .series-button-container .series-tracker-reminder-label.hidden {\n  opacity: 0;\n}\n@-moz-keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n@-webkit-keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n@-o-keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n@keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n:host .series-button-container:hover {\n  filter: brightness(125%);\n}\n:host .series-button-container:hover .series-tracker-reminder-label {\n  animation: none;\n}\n',
        '',
      ]);
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(25),
      i = n(o),
      s = a(2),
      l = n(s),
      r = a(0),
      c = n(r),
      m = a(272),
      d = n(m),
      p = a(274),
      u = n(p),
      g = a(275),
      b = n(g),
      h = a(276),
      f = n(h),
      y = a(109),
      _ = n(y),
      v = a(22),
      S = n(v),
      x = a(30),
      E = n(x),
      k = a(110),
      C = n(k),
      I = a(6),
      P = n(I),
      T = a(7),
      w = a(3),
      R = n(w),
      L = a(278),
      M = n(L),
      A = a(15),
      D = n(A),
      O = a(279),
      N = n(O),
      B = a(280),
      F = n(B);
    const G = '/lol-summoner/v1/current-summoner',
      q = (0, R.default)('plugin:parties:party-api:warn'),
      U = (0, R.default)('plugin:parties:party-api:error'),
      j = c.default.getProvider(),
      Q = j.getSocket(),
      H = r.Navigation.getFullPageModalManager(),
      z = r.UIKit.getModalManager();
    e.exports = class {
      constructor() {
        (this._currentParty = null),
          (this._currentPlayer = null),
          (this._selected = null),
          (this._application = null),
          (this._lastGameflowPhase = null),
          (this._factoryRegistered = !1),
          (this._restoreNavigationState = null),
          (this._applicationRegisteredPromise = null),
          (this._partyCreatedCallback = null),
          (this._lobbiesObserver = !1),
          (this._gameflowObserver = !1),
          (this._queues = E.default),
          (this._platformConfigSingleton = P.default),
          (this._showingState = f.default.create());
        const e = r.Viewport.getApiKey(
          'rcp-fe-lol-parties - bump/release parties',
        );
        D.default.set('viewportApiKey', e),
          (this._screenRoot = r.Viewport.main().getScreenRoot(
            e,
            'rcp-fe-lol-parties',
          )),
          this._connectViewportIsShowing(),
          this._connectToPatcher(),
          (this._requirements = { login: !1, summoner: !1 }),
          (this._binding = r.dataBinding.bindTo(
            (0, r.getProvider)().getSocket(),
          )),
          this._binding.addObserver(G, this, this._updateSummoner),
          (this._readyCheckNotifications = new N.default());
      }
      show() {
        return new l.default((e, t) => {
          this._createApplication().then(
            () => {
              q('BUMPING PARTIES SCREEN ROOT'),
                this._ensureSomethingVisible(),
                (this._restoreNavigationState = r.Navigation.clearActive()),
                this._screenRoot.bump().then(() => {
                  q('PARTIES VISIBLE IN SCREEN ROOT'),
                    this._showingState.set('isInViewport', !0);
                }),
                e();
            },
            (a) => {
              t(a);
            },
          );
        });
      }
      showParty(e = !1) {
        return this._currentParty || e
          ? (this._showingState.showParty(),
            this.show().catch((t) => {
              U(`ERROR SHOWING PARTY: ${t}`);
            }))
          : (U('ASKED TO SHOW PARTY BUT NOT ATTACHED TO PARTY'),
            l.default.reject());
      }
      showGameSelect() {
        return (
          q('SHOWING GAME SELECT'),
          this._showingState.showGameSelect(),
          this.show().catch((t) => {
            U(`ERROR SHOWING GAME SELECT: ${t}`);
          })
        );
      }
      showGameSelectPreselected(e) {
        this._setSelectedAndShowGameSelect(e);
      }
      hide() {
        this._showingState.get('isInViewport') &&
          (this._restoreNavigationState &&
            (this._restoreNavigationState(),
            (this._restoreNavigationState = null)),
          this._showingState.set('isInViewport', !1)),
          q('RELEASING PARTIES SCREEN ROOT'),
          this._screenRoot.release();
      }
      canInvitePlayer(e) {
        return C.default.canInvitePlayer(e);
      }
      invitePlayer(e, t) {
        return C.default.invitePlayer(e, t);
      }
      subscribeCanInvite(e) {
        return C.default.subscribeCanInvite(e);
      }
      unsubscribeCanInvite(e) {
        return C.default.unsubscribeCanInvite(e);
      }
      createLobby(e) {
        return new l.default(
          (t, a) => (
            this._currentParty ||
              (this._partyCreatedCallback = () => {
                t();
              }),
            this._currentPlayer
              ? this._currentParty && !this._currentParty.localMember.isLeader
                ? void a(new Error('NOT_LEADER'))
                : void (this._lobbiesObserver.createLobby(e),
                  this._currentParty && t())
              : void a('NOT_SIGNED_IN')
          ),
        );
      }
      _connectViewportIsShowing() {
        this._screenRoot.on('show', () => {
          this._showingState.set('isInViewport', !0),
            D.default.set('isShowing', !0);
        }),
          this._screenRoot.on('hide', () => {
            this._showingState.set('isInViewport', !1),
              D.default.set('isShowing', !1),
              this._screenRoot.release();
          });
      }
      _connectToPatcher() {
        r.Navigation.playButtonSubscribe(() => {
          this._playButtonClicked();
        }),
          r.Navigation.lobbyButtonSubscribe(() => {
            this._lobbyButtonClicked();
          }),
          r.Navigation.tftLobbySubscribe(() => {
            this._showTftLobby();
          }),
          this._screenRoot.on('show', () => {
            q('LOCKING PLAY BUTTON'), r.Navigation.setIsShowingLobby(!0);
          }),
          this._screenRoot.on('hide', () => {
            (this._restoreNavigationState = null),
              q('UNLOCKING PLAY BUTTON'),
              r.Navigation.setIsShowingLobby(!1);
          });
      }
      _updateSummoner(e) {
        if (e) {
          const t = !e.unnamed && !e.nameChangeFlag;
          t && this._updateRequirements({ summoner: e });
        }
      }
      _updateRequirements(e) {
        (this._requirements = r.lodash.assign(this._requirements, e)),
          this._requirements.summoner &&
            (this._clearBindings(),
            this._handleNewSession(this._requirements.summoner));
      }
      _clearBindings() {
        this._binding.removeObserver(G, this);
      }
      _handleNewSession(e) {
        (this._currentPlayer = e),
          (this._lobbiesObserver = new d.default(
            this._currentPlayer,
            this._partyCreated.bind(this),
            this._partyDestroyed.bind(this),
            this._partyKicked.bind(this),
            this._partyTimeout.bind(this),
            this._partyGameStartError.bind(this),
            this._partyServiceShutdown.bind(this),
            this._partyServiceUnavailable.bind(this),
          )),
          (this._gameflowObserver = new u.default(
            this._gameflowPhaseChanged.bind(this),
          ));
      }
      _partyCreated(e) {
        if (
          ((this._currentParty = e), this._ensureSelectedExists(), e.gameConfig)
        ) {
          const t = e.gameConfig.isCustom;
          this._selected.set('isTrainingGame', !1),
            this._selected.set('isCreatingCustomGame', t),
            this._selected.set('queueId', e.gameConfig.queueId),
            t
              ? this._selected.set('mapId', e.gameConfig.mapId)
              : S.default.checkForRankedDivisionRestriction(e);
        } else U(`COULD NOT FIND party.gameConfig: ${(0, i.default)(e)}`);
        q(`PARTY CREATED (${this._selected.get('queueId')})`),
          this._selected.get('isUpdatingSelection') ||
            (T.TUTORIAL_QUEUE_IDS.includes(this._selected.get('queueId'))
              ? this._showNewPlayerExperience()
              : this.showParty()),
          this._partyCreatedCallback &&
            (this._partyCreatedCallback(), (this._partyCreatedCallback = null));
      }
      _partyDestroyed() {
        this._ensureSelectedExists(),
          this._selected.isUpdatingSelection ||
            (this.hide(),
            this.navigateHomeIfPartyEndedInLobby(),
            (this._currentParty = null));
      }
      navigateHomeIfPartyEndedInLobby() {
        return (0, r.dataBinding)('/lol-gameflow', Q)
          .get('/v1/gameflow-phase')
          .then(function (e) {
            ('Lobby' === e || 'None' === e) && r.Navigation.showHome();
          });
      }
      _partyKicked() {
        (0, M.default)('parties_kicked_confirmation_body');
      }
      _partyTimeout() {
        (0, M.default)('parties_timeout_confirmation_body');
      }
      _partyGameStartError() {
        (0, M.default)(
          'parties_game_start_error_confirmation_body',
          'parties_game_start_error_confirmation_ok',
        );
      }
      _partyServiceShutdown() {
        (0, M.default)('parties_service_shutdown_error_confirmation_body');
      }
      _partyServiceUnavailable() {
        (0, M.default)('parties_service_unavailable_error_confirmation_body');
      }
      _playButtonClicked() {
        q('PLAY BUTTON CLICKED'), this._setSelectedAndShowGameSelect();
      }
      _setSelectedAndShowGameSelect(e) {
        let t;
        if (e) {
          const a = this._platformConfigSingleton.get('defaultGameQueues');
          t = this._getFirstEligibleQueue(e, a);
        } else t = this._getLastSelected();
        t.then(
          (e) => {
            this._ensureSelectedExists(),
              this._selected.set('queueId', e),
              this._selected.set('needsAdditionalGameConfig', !1),
              this._selected.set('isCreatingCustomGame', !1),
              this._selected.set('isJoiningCustomGame', !1),
              this._selected.set('isTrainingGame', !1),
              this.showGameSelect();
          },
          (t) => {
            U('FAILED TO SHOW GAME SELECT: ' + t), a(304)();
          },
        );
      }
      _showTftLobby() {
        this._lobbiesObserver.createLobby(T.DEFAULT_TFT_QUEUE_ID);
      }
      _lobbyButtonClicked() {
        q('LOBBY BUTTON CLICKED'), this.showParty();
      }
      _getNpeQueueDefault() {
        return (0, r.dataBinding)('lol-settings').get(
          '/v2/account/LCUPreferences/lol-npe-first-touch',
        );
      }
      _ensureSelectedExists() {
        this._selected ||
          (this._selected = b.default.create({ queues: this._queues }));
      }
      _getLastSelected() {
        return this._queueIdIfAlreadyPlayed().then((e) => {
          const t = this._platformConfigSingleton.get('defaultGameQueues');
          return e
            ? (q('Found last-played-queue of: ', e, ' checking eligibility...'),
              this._getFirstEligibleQueue(e, t))
            : this._getFirstEligibleQueue(null, t);
        });
      }
      _queueIdIfAlreadyPlayed() {
        return this._lobbiesObserver
          ? this._lobbiesObserver.lastLobbyQueueId()
          : l.default.resolve(null);
      }
      _getFirstEligibleQueue(e, t = []) {
        return new l.default((a) => {
          l.default
            .all([S.default.fetchEligibilities(), this._getNpeQueueDefault()])
            .then((n) => {
              const o = S.default.get('eligibilities');
              if (e && o[e] && o[e].eligible) return void a(e);
              const s = t.slice(),
                l =
                  n && 1 < n.length && n[1].data ? n[1].data.modeSelected : '';
              l &&
                l === T.NPE_FIRST_TOUCH_QUEUE_SELECT_ID.TFT &&
                s.unshift(T.DEFAULT_TFT_QUEUE_ID),
                s.push(T.DEFAULT_QUEUE_ID);
              for (let e = 0; e < s.length; e++) {
                const t = s[e];
                if (o[t] && o[t].eligible) return void a(t);
              }
              for (const e in o)
                if (o[e].eligible)
                  return (
                    q(
                      'NOT ELIGIBLE FOR DEFAULT QUEUES, SELECTING FIRST ELIGIBLE QUEUE FOUND:',
                      e,
                    ),
                    void a(parseInt(e, 10))
                  );
              U(
                `COULD NOT FIND ELIGIBLE QUEUE OUT OF THOSE ENABLED: ${(0,
                i.default)(o)}`,
              ),
                a(T.DEFAULT_QUEUE_ID);
            });
        });
      }
      _registerApplication() {
        return this._factoryRegistered
          ? l.default.resolve()
          : new l.default((e) => {
              const t = a(305);
              t().then(() => {
                (this._factoryRegistered = !0), e();
              });
            });
      }
      _createApplication() {
        if (this._application) return l.default.resolve(this._application);
        if (this._applicationRegisteredPromise)
          return this._applicationRegisteredPromise;
        const e = (e, t) => {
          this._registerApplication()
            .then(() => {
              (this._applicationRegisteredPromise = null),
                this._ensureSelectedExists(),
                (this._application = r.ComponentFactory.create(
                  'PartiesScreen',
                  {
                    showingState: this._showingState,
                    selected: this._selected,
                    queues: this._queues,
                  },
                )),
                this._application.domNode
                  ? (this._screenRoot
                      .getElement()
                      .appendChild(this._application.domNode),
                    e(this._application))
                  : (U('FAILED TO INITIALIZE PARTIES SCREEN'),
                    t(
                      new Error(
                        'PartiesScreen application failed to initialize.',
                      ),
                    ));
            })
            .catch((a) => {
              (this._applicationRegisteredPromise = null),
                U(`ERROR REGISTERING PARTIES APPLICATION: ${a}`),
                t(a);
            });
        };
        return (
          (this._applicationRegisteredPromise = new l.default(function (t, a) {
            e(t, a);
          })),
          this._applicationRegisteredPromise
        );
      }
      _destroyApplication() {
        this._application &&
          (this._application.domNode &&
            this._screenRoot
              .getElement()
              .removeChild(this._application.domNode),
          this._application.onRemove(),
          delete this.application,
          (this.application = !1));
      }
      _gameflowPhaseChanged(e, t) {
        const a = -1 !== ['Lobby', 'Matchmaking', 'ReadyCheck'].indexOf(e);
        'ChampSelect' === t && 'Lobby' === e && _.default.handlePartyDodge(),
          ('EndOfGame' === t && 'Lobby' === e) || ('ChampSelect' === t && a)
            ? this.showParty(!0)
            : 'ChampSelect' == e && this.hide();
      }
      _ensureSomethingVisible() {
        this._showingState.get('isShowingParty') ||
          this._showingState.get('isShowingGameSelect') ||
          (this._currentParty
            ? this._showingState.showParty()
            : this._showingState.showGameSelect());
      }
      _showGameModeTutorialIfNeeded(e, t, a, n, o, i) {
        if (!e || !t || !a) return;
        const s = (0, r.dataBinding)('/lol-settings');
        s.get('/v1/account/lol-tutorial').then((l) => {
          const r = n
            ? `Map${e}_${t}_${n}_TutorialSeen`
            : `Map${e}_${t}_TutorialSeen`;
          if (!(l && l.data && l.data[r])) {
            const e = this._showGameModeTutorial(t, a, o, i),
              n = (e) => {
                'ok-button' !== e ||
                  (!l.data && (l.data = {}),
                  (l.data[r] = !0),
                  s.patch('/v1/account/lol-tutorial', {
                    data: l.data,
                    schemaVersion: l.schemaVersion,
                  }));
              };
            e ? e.then(n) : n('ok-button');
          }
        });
      }
      _showGameModeTutorial(e, t, a, n) {
        const o = 'TFT' === e,
          i = o
            ? 'GameModeOnePageTutorialComponent'
            : 'GameModeTutorialComponent',
          s = r.ComponentFactory.create(
            i,
            r.Ember.Object.create({ title: a, subheader: n, tutorialCards: t }),
          ),
          l = r.ComponentFactory.getDOMNode(s);
        let c;
        if (!o) {
          H.open({ data: { contents: l } });
        } else {
          const e = z.add({
            type: 'DialogAlert',
            data: {
              contents: l,
              okText: r.tra.get('tft_tutorial_close'),
              dismissible: !0,
            },
          });
          c = e.okPromise;
        }
        return c;
      }
      _showNewPlayerExperience() {
        (0, r.getProvider)()
          .getProxiedContract('rcp-fe-lol-new-player-experience')
          .then((e) => {
            e.show();
          });
      }
      _showFlexRestrictionModalIfNeeded() {
        const e = this._flexRestrictionModal
          ? this._flexRestrictionModal
          : new F.default();
        e.tryShow(),
          this._flexRestrictionModal || (this._flexRestrictionModal = e);
      }
      loadQueueEligibilitiesIfDirty() {
        const e = this._platformConfigSingleton.get('defaultGameQueues');
        return this._getFirstEligibleQueue(null, e);
      }
    };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(25),
      i = n(o),
      s = a(0),
      l = n(s),
      r = a(22),
      c = n(r),
      m = a(273),
      d = n(m),
      p = a(3),
      u = n(p);
    const g = l.default.getProvider(),
      b = g.getSocket(),
      h = (0, u.default)('plugin:parties:lobbies-observer');
    t.default = class {
      constructor(e, t, a, n, o, i, l, r) {
        (this._lobbyData = !1),
          (this._currentPlayer = e),
          (this._partyCreated = t),
          (this._partyDestroyed = a),
          (this._partyKicked = n),
          (this._partyTimeout = o),
          (this._partyGameStartError = i),
          (this._partyServiceShutdown = l),
          (this._partyServiceUnavailable = r),
          (this._lobbyBinding = (0, s.dataBinding)('/lol-lobby', b)),
          (this._gameflowBinding = (0, s.dataBinding)('/lol-gameflow', b)),
          this._observeLobbies(),
          this._observeEligibilitiesReady(),
          this._observeLobbyNotifications();
      }
      createLobby(e) {
        return this._lobbyBinding.post('v2/lobby', { queueId: e });
      }
      _observeLobbies() {
        this._lobbyBinding.observe('v2/lobby', (e) => {
          h('/v2/lobby returned data', (0, i.default)(e)),
            this._handleLobbyData(e);
        });
      }
      _observeEligibilitiesReady() {
        this._lobbyBinding.observe(
          'v2/eligibility/initial-configuration-complete',
          (e) => {
            this._handleEligibilityReady(e);
          },
        );
      }
      _observeLobbyNotifications() {
        this._lobbyBinding.observe('v2/notifications', (e) => {
          h('/v2/notifications returned data', (0, i.default)(e)),
            this._handleLobbyNotification(e);
        });
      }
      _getPlayerStatus() {
        return d.default.getWithTimeout(
          this._gameflowBinding,
          'v1/gameflow-metadata/player-status',
          50,
        );
      }
      lastLobbyQueueId() {
        return this._getPlayerStatus().then((e) => {
          let t = null;
          return (
            e &&
              e.lastQueuedLobbyStatus &&
              e.lastQueuedLobbyStatus.queueId &&
              (t = e.lastQueuedLobbyStatus.queueId),
            t
          );
        });
      }
      _handleLobbyData(e) {
        this._lobbyData ? !e && this._deletedLobby() : e && this._newLobby(e);
      }
      _handleLobbyNotification(e) {
        if (!e || !e.length) return;
        const t = e[e.length - 1];
        let a = !0;
        if (
          ('KICKED' === t.notificationReason
            ? this._partyKicked()
            : 'Timeout' === t.notificationReason
            ? this._partyTimeout()
            : 'GameStartError' === t.notificationReason
            ? this._partyGameStartError()
            : 'ServiceShutdown' === t.notificationReason
            ? this._partyServiceShutdown()
            : 'SERVICE_UNAVAILABLE' === t.notificationReason
            ? this._partyServiceUnavailable()
            : (a = !1),
          a)
        ) {
          const e = `v2/notifications/${t.notificationId}`;
          this._lobbyBinding.delete(e);
        }
      }
      _deletedLobby() {
        this._partyDestroyed(), (this._lobbyData = !1);
      }
      _newLobby(e) {
        (this._lobbyData = e), this._partyCreated(this._lobbyData);
      }
      _handleEligibilityReady(e) {
        e && c.default.fetchEligibilities();
      }
    };
  },
  function (e, t, a) {
    'use strict';
    var n = a(2),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    e.exports = {
      getWithTimeout: function (e, t, a) {
        return new o.default((n) => {
          let o, i;
          e.get(t).then((e) => {
            clearTimeout(o), i || n(e);
          }),
            (o = setTimeout(() => {
              (i = !0), n(null);
            }, a));
        });
      },
    };
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(0),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    const i = o.default.getProvider(),
      s = i.getSocket();
    t.default = class {
      constructor(e) {
        (this._lastPhase = null),
          (this._gameflowBinding = (0, n.dataBinding)('/lol-gameflow', s)),
          (this._gameflowPhaseChangeCallback = e),
          this._observeSession();
      }
      _observeSession() {
        this._gameflowBinding.observe('v1/session', (e) => {
          this._handleGameflowData(e);
        });
      }
      _handleGameflowData(e) {
        if (e && e.phase) {
          const t = e.phase;
          t !== this._lastPhase &&
            (this._gameflowPhaseChangeCallback &&
              this._gameflowPhaseChangeCallback(t, this._lastPhase),
            (this._lastPhase = t));
        }
      }
    };
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(7);
    const i = n.EmberAddons.EmberLifeline.RunMixin;
    e.exports = n.Ember.Object.extend(i, {
      queues: null,
      animationLock: !1,
      isCreatingCustomGame: !1,
      needsAdditionalGameConfig: !1,
      isJoiningCustomGame: !1,
      isTrainingGame: !1,
      _trainingGameMode: null,
      trainingGameMode: n.Ember.computed({
        get: function () {
          return this.get('_trainingGameMode');
        },
        set: function (e, t) {
          return (
            this.set('_trainingGameMode', t),
            o.TUTORIAL_TYPE_MAPS[t] &&
              (this.set('mapId', o.TUTORIAL_TYPE_MAPS[t]),
              this.set('gameMode', t),
              this.set('assetMutator', null)),
            t
          );
        },
      }),
      _queueId: null,
      queueId: n.Ember.computed({
        get: function () {
          return this.get('_queueId');
        },
        set: function (e, t) {
          this.set('_queueId', t);
          const a = this.get('queues');
          if (a) {
            const e = a.getQueueById(t);
            e && e.category && this.set('category', e.category),
              e &&
                e.mapId &&
                (this.set('mapId', e.mapId),
                this.set('gameMode', e.gameMode),
                this.set('assetMutator', e.assetMutator));
          }
          return t;
        },
      }),
      queue: n.Ember.computed('queues.queuesById', 'queueId', function () {
        const e = this.get('queueId'),
          t = this.get('queues');
        return null !== e && t ? t.getQueueById(e) : null;
      }),
      category: '',
      mapId: 11,
      map: n.Ember.computed('mapId', 'queues.mapsInfo', function () {
        const e = this.get('queue.mapId'),
          t = this.get('queues');
        return e && t ? t.getMapInfoById(e) : null;
      }),
      gameMode: !1,
      assetMutator: !1,
      pickType: n.Ember.computed('queues.queuesById', 'queueId', function () {
        return this.get('queues').getPickTypeForQueue(this.get('queueId'));
      }),
      botDifficulty: n.Ember.computed(
        'queues.queuesById',
        'queueId',
        function () {
          return '';
        },
      ),
      isUpdatingSelection: !1,
      maxPlaying: n.Ember.computed('queue.numPlayersPerTeam', function () {
        return parseInt(this.get('queue.numPlayersPerTeam'), 10);
      }),
      gameConfig: n.Ember.computed(
        'queueId',
        'queue.category',
        'botDifficulty',
        'maxPlaying',
        function () {
          return {
            gameCategory: this.get('queue.category'),
            botDifficulty: this.get('botDifficulty'),
            queueId: this.get('queueId'),
            maxPlaying: this.get('maxPlaying'),
          };
        },
      ),
      isEqual(e) {
        return (
          !!(e instanceof n.Ember.Object && e.get) &&
          this.get('queueId') === e.get('queueId')
        );
      },
      animationLockTimeout: 1200,
      animationLockObserver: n.Ember.on(
        'init',
        n.Ember.observer('animationLock', function () {
          this.get('animationLock') &&
            this.runTask(function () {
              this.set('animationLock', !1);
            }, this.get('animationLockTimeout'));
        }),
      ),
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    const o = {
      PARTY: 'party',
      GAME_SELECT: 'gameselect',
      TRANSITION_TO_GAME_SELECT: 'transition->gameselect',
      TRANSITION_TO_PARTY: 'transition->lobby',
    };
    e.exports = n.Ember.Object.extend({
      showVerticalAnimation: !1,
      showing: null,
      isShowingParty: n.Ember.computed.equal('showing', o.PARTY),
      isShowingGameSelect: n.Ember.computed.equal('showing', o.GAME_SELECT),
      isInViewport: !1,
      showParty: function () {
        this.set('showing', o.PARTY);
      },
      showGameSelect: function () {
        this.set('showing', o.GAME_SELECT);
      },
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(1),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    const s = (0, n.emberDataBinding)({
      Ember: n.Ember,
      websocket: (0, n.getProvider)().getSocket(),
      logPrefix: 'service:game-select',
      basePaths: {
        gameflow: '/lol-gameflow',
        summoner: '/lol-summoner',
        lobby: '/lol-lobby',
      },
      boundProperties: {
        gameflowSession: { api: 'gameflow', path: '/v1/session' },
        lobby: { api: 'lobby', path: '/v2/lobby' },
        currentSummoner: { api: 'summoner', path: '/v1/current-summoner' },
      },
    });
    e.exports = n.Ember.Object.extend(s, i.default, {
      gameflowPhase: n.Ember.computed.alias('gameflowSession.phase'),
      currentSummonerId: n.Ember.computed.alias('currentSummoner.summonerId'),
      _inLobby: !1,
      _chatRoomId: null,
      _lobbyMembers: n.Ember.A(),
      _playedInviteSound: n.Ember.A(),
      _shouldPlay: n.Ember.A(),
      _didPlay: n.Ember.A(),
      shouldPlay: function (e) {
        if (((e = this._castId(e)), this._checkIfDidPlayForMember(e)))
          return !1;
        const t = -1 < this._shouldPlayIndexOf(e);
        return t;
      },
      didPlay: function (e) {
        e = this._castId(e);
        const t = this._shouldPlayIndexOf(e);
        -1 === t ||
          (this.get('_shouldPlay').splice(t, 1), this.get('_didPlay').push(e));
      },
      handlePartyDodge: function () {
        const e = this.get('_lobbyMembers');
        for (let t = 0; t < e.length; t++) this.get('_shouldPlay').push(e[t]);
      },
      pendingInvites: n.Ember.computed.filterBy(
        'lobby.invitations',
        'state',
        'Pending',
      ),
      pendingInvitesObserver: n.Ember.on(
        'init',
        n.Ember.observer('pendingInvites.[]', function () {
          n.Ember.run.once(this, function () {
            const e = this.get('pendingInvites');
            this.pendingInvitesChanged(e);
          });
        }),
      ),
      pendingInvitesChanged: function (e) {
        const t = this.get('_playedInviteSound'),
          a = n.Ember.A();
        let o = !1;
        e.forEach((e) => {
          let n = e.get('toSummonerId');
          (n = this._castId(n)), -1 === t.indexOf(n) && (o = !0), a.push(n);
        }),
          this.set('_playedInviteSound', a),
          o &&
            this.playSound(
              '/fe/lol-parties/sfx-parties-member-banner-invited.ogg',
            );
      },
      _lobbyMembersChangedObserver: n.Ember.on(
        'init',
        n.Ember.observer(
          'lobby',
          'lobby.members.[]',
          'lobby.members.@each.summonerId',
          'lobby.members.@each.ready',
          function () {
            n.Ember.run.once(this, function () {
              const e = this.get('lobby');
              this._lobbyChanged(e);
            });
          },
        ),
      ),
      _lobbyChanged: function (e) {
        const t = this.get('_inLobby');
        if (t && !e) return this._handleLobbyDeleted();
        return !t && e
          ? this._handleNewLobby(e)
          : t && e
          ? this._handleLobbyUpdated(e)
          : void 0;
      },
      _handleLobbyDeleted: function () {
        this.set('_inLobby', !1),
          this.set('_shouldPlay', n.Ember.A()),
          this.set('_didPlay', n.Ember.A()),
          this.set('_lobbyMembers', n.Ember.A()),
          this.set('_chatRoomId', null),
          this.set('_playedInviteSound', n.Ember.A());
      },
      _handleNewLobby: function (e) {
        const t = this._castId(this.get('currentSummonerId'));
        this.get('_shouldPlay').push(t),
          this._updateMemberCache(e),
          this.set('_inLobby', !0),
          this.set('_chatRoomId', e.get('chatRoomId'));
        const a = n.Ember.A();
        for (let n = 0; n < e.members.length; n++) {
          const o = e.members[n];
          o.get('summonerId') !== t &&
            o.get('ready') &&
            a.push(o.get('summonerId'));
        }
        this.set('_didPlay', a);
        const o = e.get('invitations');
        if (o && o.length) {
          const e = n.Ember.A(),
            t = o.filterBy('state', 'Pending');
          for (let a = 0; a < t.length; a++)
            e.push(this._castId(t[a].get('toSummonerId')));
          this.set('_playedInviteSound', e);
        }
      },
      _handleLobbyUpdated: function (e) {
        if ('Matchmaking' !== this.get('gameflowPhase')) {
          if (this._isNewLobby(e)) return void this._handleNewLobby(e);
          const t = e.get('members');
          if (t && t.length)
            for (let e = 0; e < t.length; e++)
              this._checkIfShouldPlayForMember(t[e]);
          this._updateMemberCache(e),
            this.set('_chatRoomId', e.get('chatRoomId'));
        }
      },
      _checkIfShouldPlayForMember(e) {
        const t = this._castId(e.get('summonerId'));
        if (!this._checkIfDidPlayForMember(t)) {
          const a = e.get('ready'),
            n = this._lookupInMemberCache(t),
            o = n && !n.ready && a;
          ((!n && a) || o) && this.get('_shouldPlay').push(t);
        }
      },
      _checkIfDidPlayForMember(e) {
        return -1 < this.get('_didPlay').indexOf(e);
      },
      _isNewLobby(e) {
        const t = e.get('chatRoomId');
        return !!(t && t !== this._chatRoomId) && 1 < e.get('members.length');
      },
      _updateMemberCache: function (e) {
        if (e) {
          const t = e.get('members');
          if (t && t.length) {
            const e = this.get('_didPlay'),
              a = n.Ember.A(),
              o = {};
            for (let n = 0; n < t.length; n++) {
              const i = this._castId(t[n].get('summonerId')),
                s = t[n].get('ready');
              (o[i] = { ready: s }), -1 < e.indexOf(i) && a.push(i);
            }
            this.set('_lobbyMembers', o), this.set('_didPlay', a);
          }
        }
      },
      _lookupInMemberCache: function (e) {
        const t = this.get('_lobbyMembers');
        return t ? ((e = this._castId(e)), t[e] ? t[e] : null) : null;
      },
      _shouldPlayIndexOf: function (e) {
        return (e = this._castId(e)), this.get('_shouldPlay').indexOf(e);
      },
      _castId: function (e) {
        return parseInt(e, 10);
      },
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    const i = o.default.getProvider(),
      s = i.getSocket(),
      l = n.UIKit.getModalManager(),
      r = n.UIKit.getToastManager(),
      c = n.UIKit.getTemplateHelper();
    e.exports = function (e, t) {
      return n.tra.ready().then(() => {
        const a = n.tra.get(e),
          o = c.contentBlockNotification(a);
        if (t) {
          const e = n.tra.get(t);
          l.add({ type: 'DialogAlert', data: { contents: a, okText: e } });
        } else
          r.add({ type: 'DialogToast', data: { contents: o }, timing: 'slow' });
      });
    };
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(0),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    const i = o.default.dataBinding,
      s = o.default.tra,
      l = o.default.UIKit,
      r = o.default.getProvider,
      c = r().getSocket();
    t.default = class {
      constructor() {
        (this.hasProcessedNotifications = !1),
          (this.toastManager = l.getToastManager()),
          (this.templateHelper = l.getTemplateHelper()),
          (this.modalManager = l.getModalManager()),
          (this.handleReadyCheckData = this.handleReadyCheckData.bind(this)),
          (this.matchMakingBinding = i('/lol-matchmaking', c)),
          this.matchMakingBinding.observe(
            '/v1/ready-check',
            this.handleReadyCheckData,
          );
      }
      handleReadyCheckData(e) {
        return e && e.state !== 'InProgress'
          ? void (
              this.hasProcessedNotifications ||
              (e.dodgeWarning === 'None' && e.playerResponse === 'Declined') ||
              this.processNotifications(e)
            )
          : void (this.hasProcessedNotifications = !1);
      }
      processNotifications(e) {
        e.state === 'PartyNotReady' && this.handlePartyNotReady(e),
          e.state === 'StrangerNotReady' && this.handleStrangerNotReady(),
          e.dodgeWarning === 'Warning' && this.handleDodgeWarning(),
          e.dodgeWarning === 'Penalty' && this.handleDodgePenalty(),
          (this.hasProcessedNotifications = !0);
      }
      handlePartyNotReady(e) {
        const t = e.declinerIds && e.declinerIds[0];
        return t
          ? i('/lol-summoner/v1', c)
              .get('/summoners/' + t)
              .then((e) => {
                const t = this.templateHelper.contentBlockNotification(
                  s.formatString('ready_check_reject_party_notification', {
                    summonerName: e && e.displayName,
                  }),
                  'lol-ready-check-notification-party-reject',
                );
                this.toastManager.add({
                  type: 'DialogToast',
                  data: { contents: t, dismissable: !0 },
                  timing: 'slow',
                });
              })
              .catch((t) => {
                throw (
                  (o.default.logError('failed to handlePartyNotReady', t), t)
                );
              })
          : void o.default.logError(
              '/lol-matchmaking/v1/ready-check had state PartyNotReady with no declinerIds',
            );
      }
      handleStrangerNotReady() {
        const e = this.templateHelper.contentBlockNotification(
          s.get('ready_check_reject_stranger_notification'),
          'lol-ready-check-notification-stranger-reject',
        );
        this.toastManager.add({
          type: 'DialogToast',
          data: { contents: e, dismissable: !0 },
          timing: 'slow',
        });
      }
      handleDodgeWarning() {
        const e = this.templateHelper.contentBlockDialogSimple(
          s.get('ready_check_dodge_warning_notification'),
          'dialog-medium',
          'lol-ready-check-notification-dodge-warning',
        );
        this.modalManager.add({
          type: 'DialogAlert',
          data: { contents: e, okText: s.get('lib_ui_dialog_alert_ok') },
        });
      }
      handleDodgePenalty() {
        const e = this.templateHelper.contentBlockDialogSimple(
          s.get('ready_check_dodge_penalty_notification'),
          'dialog-medium',
          'lol-ready-check-notification-dodge-penalty',
        );
        this.modalManager.add({
          type: 'DialogAlert',
          data: { contents: e, okText: s.get('lib_ui_dialog_alert_ok') },
        });
      }
    };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(281),
      i = n(o),
      s = a(2),
      l = n(s),
      r = a(0);
    a(285);
    const c = '/v1/account/lol-leagues',
      m = 'hasSeenFlexRestrictionModal',
      d = r.UIKit.getModalManager(),
      p = a(286);
    t.default = class {
      constructor() {
        this._hasShownThisSession = !1;
      }
      tryShow() {
        if (this._hasShownThisSession) return;
        const e = (0, r.dataBinding)('/lol-settings'),
          t = (0, r.dataBinding)('/lol-summoner'),
          a = (0, r.dataBinding)('/lol-platform-config'),
          n = l.default.all([
            e.get('/v2/ready'),
            e.get(c, { skipCache: !0 }),
            t.get('/v1/current-summoner'),
            a.get('/v1/namespaces/LeagueConfig/FlexRestrictionModalEnabled'),
            a.get('/v1/namespaces/LeagueConfig/FlexRestrictionModalMinLevel'),
          ]);
        n.then((t) => {
          var a = (0, i.default)(t, 5);
          const n = a[0],
            o = a[1],
            s = a[2],
            l = a[3],
            r = a[4];
          if (n && l && o && s) {
            const t = o.data && o.data[m],
              a = s.summonerLevel || 0;
            if (!t && a >= (r || 30)) {
              const t = this._createFlexRestrictionModal();
              t.okPromise.then(() => {
                this._hasShownThisSession = !0;
                const t = {};
                return (t[m] = !0), e.patch(c, { data: t, schemaVersion: 1 });
              });
            } else this._hasShownThisSession = !0;
          }
        });
      }
      _createFlexRestrictionModal() {
        let e = document.createElement('div');
        return (
          (e.innerHTML = p({
            title: r.tra.get('game_select_flex_restrictions_disabled_title'),
            description: r.tra.get(
              'game_select_flex_restrictions_disabled_body',
            ),
          })),
          (e = e.firstChild),
          d.add({
            type: 'DialogAlert',
            data: {
              contents: e,
              okText: r.tra.get('lib_ui_dialog_alert_ok'),
              dismissible: !0,
              dismissibleType: 'inside',
            },
          })
        );
      }
    };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    t.__esModule = !0;
    var o = a(282),
      s = n(o),
      i = a(27),
      l = n(i);
    t.default = (function () {
      function e(e, t) {
        var a = [],
          n = !0,
          o = !1,
          i = void 0;
        try {
          for (
            var s = (0, l.default)(e), r;
            !(n = (r = s.next()).done) &&
            (a.push(r.value), !(t && a.length === t));
            n = !0
          );
        } catch (e) {
          (o = !0), (i = e);
        } finally {
          try {
            !n && s['return'] && s['return']();
          } finally {
            if (o) throw i;
          }
        }
        return a;
      }
      return function (t, a) {
        if (Array.isArray(t)) return t;
        if ((0, s.default)(Object(t))) return e(t, a);
        throw new TypeError(
          'Invalid attempt to destructure non-iterable instance',
        );
      };
    })();
  },
  function (e, t, a) {
    e.exports = { default: a(283), __esModule: !0 };
  },
  function (e, t, a) {
    a(41), a(35), (e.exports = a(284));
  },
  function (e, t, a) {
    var n = a(44),
      o = a(10)('iterator'),
      i = a(28);
    e.exports = a(4).isIterable = function (e) {
      var t = Object(e);
      return t[o] !== void 0 || '@@iterator' in t || i.hasOwnProperty(n(t));
    };
  },
  function () {},
  function (e, t, a) {
    var n = a(287);
    e.exports = (n['default'] || n).template({
      compiler: [7, '>= 4.0.0'],
      main: function (e, t, a, n, o) {
        var i = null == t ? e.nullContext || {} : t,
          s = a.helperMissing,
          l = 'function',
          r = e.escapeExpression,
          c;
        return (
          '<lol-uikit-dialog-frame>\r\n  <lol-uikit-content-block type="dialog-large" class="flex-restriction-modal">\r\n    <div class="flex-restriction-modal-title">' +
          r(
            ((c = null == (c = a.title || (null == t ? t : t.title)) ? s : c),
            typeof c == l
              ? c.call(i, { name: 'title', hash: {}, data: o })
              : c),
          ) +
          '</div>\r\n    <div class="flex-restriction-modal-body">' +
          r(
            ((c =
              null == (c = a.description || (null == t ? t : t.description))
                ? s
                : c),
            typeof c == l
              ? c.call(i, { name: 'description', hash: {}, data: o })
              : c),
          ) +
          '</div>\r\n  </lol-uikit-content-block>\r\n</lol-uikit-dialog-frame>\r\n'
        );
      },
      useData: !0,
    });
  },
  function (e, t, a) {
    e.exports = a(288)['default'];
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function o(e) {
      if (e && e.__esModule) return e;
      var t = {};
      if (null != e)
        for (var a in e)
          Object.prototype.hasOwnProperty.call(e, a) && (t[a] = e[a]);
      return (t['default'] = e), t;
    }
    function i() {
      var e = new l.HandlebarsEnvironment();
      return (
        u.extend(e, l),
        (e.SafeString = c['default']),
        (e.Exception = d['default']),
        (e.Utils = u),
        (e.escapeExpression = u.escapeExpression),
        (e.VM = b),
        (e.template = function (t) {
          return b.template(t, e);
        }),
        e
      );
    }
    t.__esModule = !0;
    var s = a(111),
      l = o(s),
      r = a(300),
      c = n(r),
      m = a(39),
      d = n(m),
      p = a(18),
      u = o(p),
      g = a(301),
      b = o(g),
      h = a(302),
      f = n(h),
      y = i();
    (y.create = i),
      f['default'](y),
      (y['default'] = y),
      (t['default'] = y),
      (e.exports = t['default']);
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    (t.__esModule = !0),
      (t.registerDefaultHelpers = function (e) {
        i['default'](e),
          l['default'](e),
          c['default'](e),
          d['default'](e),
          u['default'](e),
          b['default'](e),
          f['default'](e);
      });
    var o = a(290),
      i = n(o),
      s = a(291),
      l = n(s),
      r = a(292),
      c = n(r),
      m = a(293),
      d = n(m),
      p = a(294),
      u = n(p),
      g = a(295),
      b = n(g),
      h = a(296),
      f = n(h);
  },
  function (e, t, a) {
    'use strict';
    t.__esModule = !0;
    var n = a(18);
    (t['default'] = function (e) {
      e.registerHelper('blockHelperMissing', function (t, a) {
        var o = a.inverse,
          i = a.fn;
        if (!0 === t) return i(this);
        if (!1 === t || null == t) return o(this);
        if (n.isArray(t))
          return 0 < t.length
            ? (a.ids && (a.ids = [a.name]), e.helpers.each(t, a))
            : o(this);
        if (a.data && a.ids) {
          var s = n.createFrame(a.data);
          (s.contextPath = n.appendContextPath(a.data.contextPath, a.name)),
            (a = { data: s });
        }
        return i(t, a);
      });
    }),
      (e.exports = t['default']);
  },
  function (e, t, a) {
    'use strict';
    t.__esModule = !0;
    var n = a(18),
      o = a(39),
      s = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    (t['default'] = function (e) {
      e.registerHelper('each', function (e, t) {
        function a(t, a, s) {
          c &&
            ((c.key = t),
            (c.index = a),
            (c.first = 0 === a),
            (c.last = !!s),
            m && (c.contextPath = m + t)),
            (i += o(e[t], {
              data: c,
              blockParams: n.blockParams([e[t], t], [m + t, null]),
            }));
        }
        if (!t) throw new s['default']('Must pass iterator to #each');
        var o = t.fn,
          l = t.inverse,
          r = 0,
          i = '',
          c,
          m;
        if (
          (t.data &&
            t.ids &&
            (m = n.appendContextPath(t.data.contextPath, t.ids[0]) + '.'),
          n.isFunction(e) && (e = e.call(this)),
          t.data && (c = n.createFrame(t.data)),
          e && 'object' == typeof e)
        )
          if (n.isArray(e))
            for (var d = e.length; r < d; r++)
              r in e && a(r, r, r == e.length - 1);
          else {
            var p;
            for (var u in e)
              e.hasOwnProperty(u) &&
                (void 0 !== p && a(p, r - 1), (p = u), r++);
            void 0 !== p && a(p, r - 1, !0);
          }
        return 0 == r && (i = l(this)), i;
      });
    }),
      (e.exports = t['default']);
  },
  function (e, t, a) {
    'use strict';
    t.__esModule = !0;
    var n = a(39),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    (t['default'] = function (e) {
      e.registerHelper('helperMissing', function () {
        if (1 !== arguments.length)
          throw new o['default'](
            'Missing helper: "' + arguments[arguments.length - 1].name + '"',
          );
      });
    }),
      (e.exports = t['default']);
  },
  function (e, t, a) {
    'use strict';
    t.__esModule = !0;
    var n = a(18);
    (t['default'] = function (e) {
      e.registerHelper('if', function (e, t) {
        return (
          n.isFunction(e) && (e = e.call(this)),
          (t.hash.includeZero || e) && !n.isEmpty(e)
            ? t.fn(this)
            : t.inverse(this)
        );
      }),
        e.registerHelper('unless', function (t, a) {
          return e.helpers['if'].call(this, t, {
            fn: a.inverse,
            inverse: a.fn,
            hash: a.hash,
          });
        });
    }),
      (e.exports = t['default']);
  },
  function (e, t) {
    'use strict';
    (t.__esModule = !0),
      (t['default'] = function (e) {
        e.registerHelper('log', function () {
          for (
            var t = [void 0], a = arguments[arguments.length - 1], n = 0;
            n < arguments.length - 1;
            n++
          )
            t.push(arguments[n]);
          var o = 1;
          null == a.hash.level
            ? a.data && null != a.data.level && (o = a.data.level)
            : (o = a.hash.level),
            (t[0] = o),
            e.log.apply(e, t);
        });
      }),
      (e.exports = t['default']);
  },
  function (e, t) {
    'use strict';
    (t.__esModule = !0),
      (t['default'] = function (e) {
        e.registerHelper('lookup', function (e, t) {
          return e
            ? 'constructor' !== t || e.propertyIsEnumerable(t)
              ? e[t]
              : void 0
            : e;
        });
      }),
      (e.exports = t['default']);
  },
  function (e, t, a) {
    'use strict';
    t.__esModule = !0;
    var n = a(18);
    (t['default'] = function (e) {
      e.registerHelper('with', function (e, t) {
        n.isFunction(e) && (e = e.call(this));
        var a = t.fn;
        if (!n.isEmpty(e)) {
          var o = t.data;
          return (
            t.data &&
              t.ids &&
              ((o = n.createFrame(t.data)),
              (o.contextPath = n.appendContextPath(
                t.data.contextPath,
                t.ids[0],
              ))),
            a(e, {
              data: o,
              blockParams: n.blockParams([e], [o && o.contextPath]),
            })
          );
        }
        return t.inverse(this);
      });
    }),
      (e.exports = t['default']);
  },
  function (e, t, a) {
    'use strict';
    (t.__esModule = !0),
      (t.registerDefaultDecorators = function (e) {
        o['default'](e);
      });
    var n = a(298),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
  },
  function (e, t, a) {
    'use strict';
    t.__esModule = !0;
    var n = a(18);
    (t['default'] = function (e) {
      e.registerDecorator('inline', function (e, t, a, o) {
        var i = e;
        return (
          t.partials ||
            ((t.partials = {}),
            (i = function (o, i) {
              var s = a.partials;
              a.partials = n.extend({}, s, t.partials);
              var l = e(o, i);
              return (a.partials = s), l;
            })),
          (t.partials[o.args[0]] = o.fn),
          i
        );
      });
    }),
      (e.exports = t['default']);
  },
  function (e, t, a) {
    'use strict';
    t.__esModule = !0;
    var n = a(18),
      o = {
        methodMap: ['debug', 'info', 'warn', 'error'],
        level: 'info',
        lookupLevel: function (e) {
          if ('string' == typeof e) {
            var t = n.indexOf(o.methodMap, e.toLowerCase());
            e = 0 <= t ? t : parseInt(e, 10);
          }
          return e;
        },
        log: function (e) {
          if (
            ((e = o.lookupLevel(e)),
            'undefined' != typeof console && o.lookupLevel(o.level) <= e)
          ) {
            var t = o.methodMap[e];
            console[t] || (t = 'log');
            for (
              var a = arguments.length, n = Array(1 < a ? a - 1 : 0), i = 1;
              i < a;
              i++
            )
              n[i - 1] = arguments[i];
            console[t].apply(console, n);
          }
        },
      };
    (t['default'] = o), (e.exports = t['default']);
  },
  function (e, t) {
    'use strict';
    function a(e) {
      this.string = e;
    }
    (t.__esModule = !0),
      (a.prototype.toString = a.prototype.toHTML =
        function () {
          return '' + this.string;
        }),
      (t['default'] = a),
      (e.exports = t['default']);
  },
  function (e, t, a) {
    'use strict';
    function n(e, t, a, n, o, i, l) {
      function r(t) {
        var o =
            1 >= arguments.length || void 0 === arguments[1]
              ? {}
              : arguments[1],
          s = l;
        return (
          l &&
            t != l[0] &&
            (t !== e.nullContext || null !== l[0]) &&
            (s = [t].concat(l)),
          a(
            e,
            t,
            e.helpers,
            e.partials,
            o.data || n,
            i && [o.blockParams].concat(i),
            s,
          )
        );
      }
      return (
        (r = s(a, r, e, l, n, i)),
        (r.program = t),
        (r.depth = l ? l.length : 0),
        (r.blockParams = o || 0),
        r
      );
    }
    function o() {
      return '';
    }
    function i(e, t) {
      return (
        (t && 'root' in t) || ((t = t ? d.createFrame(t) : {}), (t.root = e)), t
      );
    }
    function s(e, t, a, n, o, i) {
      if (e.decorator) {
        var s = {};
        (t = e.decorator(t, s, a, n && n[0], o, i, n)), r.extend(t, s);
      }
      return t;
    }
    (t.__esModule = !0),
      (t.checkRevision = function (e) {
        var t = (e && e[0]) || 1,
          a = d.COMPILER_REVISION;
        if (t !== a)
          if (t < a) {
            var n = d.REVISION_CHANGES[a],
              o = d.REVISION_CHANGES[t];
            throw new m['default'](
              'Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (' +
                n +
                ') or downgrade your runtime to an older version (' +
                o +
                ').',
            );
          } else
            throw new m['default'](
              'Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (' +
                e[1] +
                ').',
            );
      }),
      (t.template = function (e, t) {
        function a(t) {
          function n(t) {
            return '' + e.main(o, t, o.helpers, o.partials, r, c, m);
          }
          var l =
              1 >= arguments.length || void 0 === arguments[1]
                ? {}
                : arguments[1],
            r = l.data;
          a._setup(l), !l.partial && e.useData && (r = i(t, r));
          var c = e.useBlockParams ? [] : void 0,
            m;
          return (
            e.useDepths &&
              (l.depths
                ? (m = t == l.depths[0] ? l.depths : [t].concat(l.depths))
                : (m = [t])),
            (n = s(e.main, n, o, l.depths || [], r, c)),
            n(t, l)
          );
        }
        if (!t) throw new m['default']('No environment passed to template');
        if (!e || !e.main)
          throw new m['default']('Unknown template object: ' + typeof e);
        (e.main.decorator = e.main_d), t.VM.checkRevision(e.compiler);
        var o = {
          strict: function (e, t) {
            if (!(t in e))
              throw new m['default']('"' + t + '" not defined in ' + e);
            return e[t];
          },
          lookup: function (e, t) {
            for (var a = e.length, n = 0; n < a; n++)
              if (e[n] && null != e[n][t]) return e[n][t];
          },
          lambda: function (e, t) {
            return 'function' == typeof e ? e.call(t) : e;
          },
          escapeExpression: r.escapeExpression,
          invokePartial: function (a, n, o) {
            o.hash && ((n = r.extend({}, n, o.hash)), o.ids && (o.ids[0] = !0)),
              (a = t.VM.resolvePartial.call(this, a, n, o));
            var s = t.VM.invokePartial.call(this, a, n, o);
            if (
              (null == s &&
                t.compile &&
                ((o.partials[o.name] = t.compile(a, e.compilerOptions, t)),
                (s = o.partials[o.name](n, o))),
              null != s)
            ) {
              if (o.indent) {
                for (
                  var c = s.split('\n'), d = 0, i = c.length;
                  d < i && (c[d] || d + 1 !== i);
                  d++
                )
                  c[d] = o.indent + c[d];
                s = c.join('\n');
              }
              return s;
            }
            throw new m['default'](
              'The partial ' +
                o.name +
                ' could not be compiled when running in runtime-only mode',
            );
          },
          fn: function (t) {
            var a = e[t];
            return (a.decorator = e[t + '_d']), a;
          },
          programs: [],
          program: function (e, t, a, o, i) {
            var s = this.programs[e],
              l = this.fn(e);
            return (
              t || i || o || a
                ? (s = n(this, e, l, t, a, o, i))
                : !s && (s = this.programs[e] = n(this, e, l)),
              s
            );
          },
          data: function (e, t) {
            for (; e && t--; ) e = e._parent;
            return e;
          },
          merge: function (e, t) {
            var a = e || t;
            return e && t && e !== t && (a = r.extend({}, t, e)), a;
          },
          nullContext: Object.seal({}),
          noop: t.VM.noop,
          compilerInfo: e.compiler,
        };
        return (
          (a.isTop = !0),
          (a._setup = function (a) {
            a.partial
              ? ((o.helpers = a.helpers),
                (o.partials = a.partials),
                (o.decorators = a.decorators))
              : ((o.helpers = o.merge(a.helpers, t.helpers)),
                e.usePartial && (o.partials = o.merge(a.partials, t.partials)),
                (e.usePartial || e.useDecorators) &&
                  (o.decorators = o.merge(a.decorators, t.decorators)));
          }),
          (a._child = function (t, a, i, s) {
            if (e.useBlockParams && !i)
              throw new m['default']('must pass block params');
            if (e.useDepths && !s)
              throw new m['default']('must pass parent depths');
            return n(o, t, e[t], a, 0, i, s);
          }),
          a
        );
      }),
      (t.wrapProgram = n),
      (t.resolvePartial = function (e, t, a) {
        return (
          e
            ? !e.call && !a.name && ((a.name = e), (e = a.partials[e]))
            : '@partial-block' === a.name
            ? (e = a.data['partial-block'])
            : (e = a.partials[a.name]),
          e
        );
      }),
      (t.invokePartial = function (e, t, a) {
        var n = a.data && a.data['partial-block'];
        (a.partial = !0),
          a.ids && (a.data.contextPath = a.ids[0] || a.data.contextPath);
        var i;
        if (
          (a.fn &&
            a.fn !== o &&
            (function () {
              a.data = d.createFrame(a.data);
              var e = a.fn;
              (i = a.data['partial-block'] =
                function (t) {
                  var a =
                    1 >= arguments.length || void 0 === arguments[1]
                      ? {}
                      : arguments[1];
                  return (
                    (a.data = d.createFrame(a.data)),
                    (a.data['partial-block'] = n),
                    e(t, a)
                  );
                }),
                e.partials &&
                  (a.partials = r.extend({}, a.partials, e.partials));
            })(),
          void 0 === e && i && (e = i),
          void 0 === e)
        )
          throw new m['default'](
            'The partial ' + a.name + ' could not be found',
          );
        else if (e instanceof Function) return e(t, a);
      }),
      (t.noop = o);
    var l = a(18),
      r = (function (e) {
        if (e && e.__esModule) return e;
        var t = {};
        if (null != e)
          for (var a in e)
            Object.prototype.hasOwnProperty.call(e, a) && (t[a] = e[a]);
        return (t['default'] = e), t;
      })(l),
      c = a(39),
      m = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(c),
      d = a(111);
  },
  function (e, t, a) {
    'use strict';
    (function (a) {
      (t.__esModule = !0),
        (t['default'] = function (e) {
          var t = 'undefined' == typeof a ? window : a,
            n = t.Handlebars;
          e.noConflict = function () {
            return t.Handlebars === e && (t.Handlebars = n), e;
          };
        }),
        (e.exports = t['default']);
    }.call(t, a(303)));
  },
  function (e) {
    var t = (function () {
      return this;
    })();
    try {
      t = t || Function('return this')() || (1, eval)('this');
    } catch (a) {
      'object' == typeof window && (t = window);
    }
    e.exports = t;
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    const o = n.UIKit.getModalManager();
    e.exports = function () {
      const e = n.tra.get('parties_unknown_error'),
        t = n.tra.get('parties_kicked_confirmation_ok'),
        a = o.add({ type: 'DialogAlert', data: { contents: e, okText: t } });
      a.domNode.classList.add('parties-unknown-error-modal');
    };
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function o(e) {
      const t = (0, c.default)(l.Ember, l.tra);
      var n = l.SharedComponents.getSharedEmberComponents();
      const o = n.ArrowFooterComponent,
        i = n.CallToActionPipComponent,
        r = n.HextechLoadingAnimationComponent;
      var m = l.SharedComponents.getApi_SharedChallengesComponents();
      const d = m.ChallengeBannerTokenComponent,
        p = m.ChallengeItemTooltipComponent,
        u = m.ChallengeItemFooterComponent,
        g = m.RiotclientService,
        b = m.GameDataService,
        h = m.SummonerService,
        f = a(307),
        y = a(308),
        _ = a(309),
        v = a(310),
        S = a(311),
        x = a(312),
        E = a(313),
        k = a(314),
        C = a(315),
        I = a(316),
        P = a(317),
        T = a(319).default,
        w = a(320),
        R = a(321),
        L = a(323),
        M = a(324),
        A = a(325);
      l.EmberApplicationFactory.setFactoryDefinition({
        name: 'PartiesScreen',
        tra: t,
        ComponentFactory: l.ComponentFactory,
        PartiesScreenComponent: a(326),
        PartiesAmbienceComponent: a(329),
        PartiesBackgroundComponent: a(333),
        PartiesHeaderComponent: a(336),
        PartiesDebugToolsComponent: a(339),
        PartiesDebugCustomLobbyComponent: a(342),
        PartiesDebugQueueLobbyComponent: a(346),
        MatchmakingErrorsComponent: a(349),
        PartiesFooterNotificationsComponent: a(350),
        PartiesNotificationsComponent: a(353),
        PartiesRootComponent: a(116),
        PartiesFooterComponent: a(357),
        LowerSectionComponent: a(360),
        PlaceholderBannerComponent: a(364),
        PlayerBannerComponent: a(367),
        PlayerPartyControlsComponent: a(370),
        PlayerPositionsComponent: a(373),
        InviteButtonComponent: a(376),
        InviteInfoPanelComponent: a(378),
        InviteInfoPanelPlayerComponent: a(381),
        InviteInfoPanelTftProgressionComponent: a(384),
        PlayerManagementButtonComponent: a(387),
        PointEligibilityComponent: a(390),
        ArrowFooterComponent: o,
        DisbandCountdownComponent: a(393),
        OpenPartyToggleComponent: a(396),
        GameSelectRootComponent: a(399),
        GameSelectFooterComponent: a(402),
        GameTypeSelectComponent: a(405),
        GameTypeCardComponent: a(408),
        GameTypeIconComponent: a(411),
        GameTypeCategorySelectComponent: a(414),
        CategorySelectComponent: a(417),
        PlayableCategoryComponent: a(419),
        CustomGameSetupComponent: a(421),
        CustomGameSubcategoryCardComponent: a(424),
        CustomGameRootComponent: a(426),
        SpectatorInfoComponent: a(429),
        SpectatorMemberComponent: a(432),
        CustomTeamsComponent: a(435),
        CustomTeamMemberComponent: a(438),
        CustomGameListComponent: a(445),
        CustomGameTournamentCodeComponent: a(449),
        CustomGameRowComponent: a(452),
        TftLobbyComponent: a(454),
        TftPlayerCardComponent: a(457),
        TftPlayerCardCosmeticsComponent: a(478),
        SocialLeaderboardButtonComponent: a(481),
        CallToActionPipComponent: i,
        V2BannerComponent: a(484),
        V2FooterComponent: a(487),
        V2FooterNotificationsComponent: a(490),
        V2HeaderComponent: a(493),
        V2PartiesRootComponent: a(496),
        V2PlayerManagementButtonComponent: a(499),
        V2PlayerPartyControlsComponent: a(502),
        V2PointEligibilityComponent: a(505),
        V2PositionSelectorComponent: a(508),
        V2HorizontalOptionsShowcaseComponent: a(511),
        V2PositionIconComponent: a(514),
        V2BannerPositionIconComponent: a(517),
        V2PositionSelectorButtonComponent: a(520),
        V2PositionSelectorOptionComponent: a(523),
        V2PositionSelectorModalComponent: a(526),
        V2InviteInfoPanelComponent: a(529),
        V2InviteInfoPanelPlayerComponent: a(532),
        V2InviteInfoPanelTftProgressionComponent: a(535),
        V2BannerCrystalComponent: a(538),
        V2BannerCrystalTooltipComponent: a(541),
        V2BannerPlaceholderComponent: a(544),
        IdentityTooltipComponent: a(547),
        RankIdentityTooltipComponent: a(550),
        SummonerIconIdentityTooltipComponent: a(553),
        GenericButtonComponent: a(556),
        ChallengeBannerTokenComponent: d,
        ChallengeItemTooltipComponent: p,
        ChallengeItemFooterComponent: u,
        LobbiesService: v,
        AssetsService: f,
        ChatService: y,
        PartySettingsService: C,
        MatchmakingService: S,
        SummonerService: _,
        QueueEligibilityService: E,
        GameflowService: k,
        CustomGamesService: I,
        CustomGameListService: P,
        PatcherService: T,
        InvitesService: w,
        EternalsService: x,
        TftService: R,
        TftCosmeticsService: L,
        SocialLeaderboardService: M,
        ChallengesService: A,
        RiotclientService: g,
        GameDataService: b,
      }),
        l.EmberApplicationFactory.setFactoryDefinition({
          name: 'TftRewardCelebration',
          tra: t,
          ComponentFactory: l.ComponentFactory,
          TftRewardCelebrationComponent: a(560).default,
        }),
        l.EmberApplicationFactory.setFactoryDefinition({
          name: 'PartyQueueErrorDialogComponent',
          tra: t,
          ComponentFactory: l.ComponentFactory,
          PartyQueueErrorDialogComponent: a(563),
          PartyQueueErrorDialogGenericComponent: a(565),
          PartyQueueErrorDialogMinLevelComponent: a(567),
          PartyQueueErrorDialogLeaverBustedComponent: a(569),
          PartyQueueErrorDialogLeaverBusterLockoutComponent: a(571),
          PartyQueueErrorDialogLeaverBusterTaintedWarningComponent: a(574),
          PartyQueueErrorDialogQueueDodgeComponent: a(576),
          PartyQueueErrorDialogPrerequisiteQueuesNotPlayedComponent: a(579),
        }),
        l.EmberApplicationFactory.setFactoryDefinition({
          name: 'PartiesInviteDialog',
          tra: t,
          ComponentFactory: l.ComponentFactory,
          PartiesInviteDialogComponent: a(581),
          InviteDialogGroupComponent: a(585),
          LobbiesService: v,
          ChatService: y,
          MatchmakingService: S,
          SummonerService: _,
          QueueEligibilityService: E,
          CustomGamesService: I,
          InvitesService: w,
        }),
        l.EmberApplicationFactory.setFactoryDefinition({
          name: 'PositionSelector',
          tra: t,
          ComponentFactory: l.ComponentFactory,
          PositionSelectorComponent: a(588),
          GameflowService: k,
        }),
        l.EmberApplicationFactory.setFactoryDefinition({
          name: 'LowPriorityQueueToastComponent',
          tra: t,
          ComponentFactory: l.ComponentFactory,
          LowPriorityQueueToastComponent: a(591),
        }),
        l.EmberApplicationFactory.setFactoryDefinition({
          name: 'LowPriorityQueueModalComponent',
          tra: t,
          ComponentFactory: l.ComponentFactory,
          LowPriorityQueueToastComponent: a(594),
        }),
        l.EmberApplicationFactory.setFactoryDefinition({
          name: 'AutofillSettingComponent',
          tra: t,
          ComponentFactory: l.ComponentFactory,
          AutofillSettingComponent: a(596),
        }),
        l.EmberApplicationFactory.setFactoryDefinition({
          name: 'GameModeTutorialComponent',
          tra: t,
          ComponentFactory: l.ComponentFactory,
          GameModeTutorialComponent: a(599),
        }),
        l.EmberApplicationFactory.setFactoryDefinition({
          name: 'GameModeOnePageTutorialComponent',
          tra: t,
          ComponentFactory: l.ComponentFactory,
          GameModeTutorialComponent: a(602),
        }),
        l.EmberApplicationFactory.setFactoryDefinition(
          (0, s.default)(
            {
              name: 'SocialLeaderboardFeatureFlyoutComponent',
              tra: t,
              ComponentFactory: l.ComponentFactory,
              SocialLeaderboardFeatureFlyoutComponent: a(605),
              SocialLeaderboardHeaderComponent: a(608),
              SocialLeaderboardCountdownTimerComponent: a(611),
              SocialLeaderboardTableComponent: a(614),
              SocialLeaderboardRowComponent: a(617),
              SocialLeaderboardFriendFilterComponent: a(620),
              SocialLeaderboardFriendNotFoundComponent: a(623),
              SocialLeaderboardNotEnoughFriendsComponent: a(626),
              SocialLeaderboardErrorStateComponent: a(629),
              HextechLoadingAnimationComponent: r,
              LobbiesService: v,
              SummonerService: _,
              QueueEligibilityService: E,
              MatchmakingService: S,
              ChatService: y,
              SocialLeaderboardService: M,
              InvitesService: w,
            },
            e,
          ),
        );
    }
    var i = a(112),
      s = n(i),
      l = a(0),
      r = a(306),
      c = n(r);
    (e.exports = function () {
      return (0, l.getProvider)()
        .getProxiedContract('rcp-fe-lol-social')
        .then(function (e) {
          return e.getHovercardComponent().then(function (e) {
            o(e);
          });
        });
    }),
      (e.exports.registerApplication = o);
  },
  function (e) {
    function t(e) {
      const a = {};
      for (const n in e) a[n] = 'object' == typeof e[n] ? t(e[n]) : e[n];
      return a;
    }
    function a(e, t, a) {
      const { regions: n, region: o, locale: i } = e.metadata();
      if (
        ((a = a.get('metadata.' + t)), a && 'region' === t && a.id !== o.id)
      ) {
        const t = n[a.id],
          o = t.defaultLocale ? t.defaultLocale.id : t.availableLocales[0].id;
        e.setLocale(o, a.id);
      } else a && 'locale' === t && a.id !== i.id && e.setLocale(a.id);
    }
    e.exports = function (e, n, o) {
      let i;
      const s = { metadata: !0, moment: !0 };
      return (
        (n = n.observe(() => {
          if (i) {
            const e = t(n.metadata());
            i.set('metadata', e),
              i.beginPropertyChanges(),
              Object.keys(s).forEach((e) => {
                i.propertyWillChange(e), i.propertyDidChange(e);
              }),
              i.endPropertyChanges();
          }
        })),
        (i = e.Service.extend({
          setLocale: n.setLocale.bind(n),
          formatString: n.formatString.bind(n),
          metadata: t(n.metadata()),
          unknownProperty(e) {
            return (s[e] = !0), n.get(e);
          },
          ready: () => n.ready(),
          getAsync: (e) => n.getAsync(e),
          exists: (e) => n.exists(e),
          existsAsync: (e) => n.existsAsync(e),
          willDestroy: () => n.unregister(),
          moment: function () {
            return n.moment.apply(n.moment, arguments);
          },
          numeral: (e) => n.numeral(e),
        }).create()),
        i.set('service', i),
        i.addObserver('metadata.region', a.bind(null, n, 'region')),
        i.addObserver('metadata.locale', a.bind(null, n, 'locale')),
        o &&
          (o.register('tra:main', i, { instantiate: !1 }),
          o.inject('component', 'tra', 'tra:main'),
          o.inject('controller', 'tra', 'tra:main'),
          o.inject('view', 'tra', 'tra:main'),
          o.inject('model', 'tra', 'tra:main'),
          o.inject('route', 'tra', 'tra:main'),
          o.inject('service', 'tra', 'tra:main')),
        i
      );
    };
  },
  function (e, t, a) {
    'use strict';
    var n = a(27),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n),
      i = a(0),
      s = a(113);
    const l = (0, i.getProvider)().getSocket(),
      r = (0, i.emberDataBinding)({
        Ember: i.Ember,
        websocket: l,
        logPrefix: 'service:assets',
        basePaths: { gameflow: '/lol-gameflow', gameData: '/lol-game-data' },
        boundProperties: {
          gameflowSession: {
            api: 'gameflow',
            path: '/v1/session',
            default: {},
          },
          summonerIcons: {
            api: 'gameData',
            path: '/assets/v1/summoner-icons.json',
          },
          regionLocale: '/riotclient/get_region_locale',
        },
      });
    e.exports = i.Ember.Service.extend(r, {
      init() {
        this._super(...arguments), this.set('maps', []), this._initObservers();
      },
      _initObservers() {
        (0, i.dataBinding)('/lol-maps', l).observe('/v2/maps', this, (e) => {
          e && this.set('maps', e);
        });
      },
      currentMapId: i.Ember.computed.alias('gameflowSession.map.id'),
      currentGameMode: i.Ember.computed.alias('gameflowSession.map.gameMode'),
      currentQueueId: i.Ember.computed.alias(
        'gameflowSession.gameData.queue.id',
      ),
      backgroundAssets: i.Ember.computed(
        'availableMaps.@each.id',
        'availableMaps.[]',
        function () {
          const e = i.Ember.A();
          return (
            this.get('availableMaps').forEach((t) => {
              if (t.assets) {
                let a, n, o, i;
                (n = !1),
                  (i = s.SIDEBAR_BACKGROUND_COLORS.DEFAULT),
                  t.assets['parties-background-video']
                    ? ((a = !0), (o = t.assets['parties-background-video']))
                    : ((a = !1), (o = t.assets['parties-background'])),
                  o && (n = `/${o}`),
                  o &&
                    s.SIDEBAR_BACKGROUND_COLORS[t.gameMode] &&
                    s.SIDEBAR_BACKGROUND_COLORS[t.gameMode][t.id] &&
                    (i = s.SIDEBAR_BACKGROUND_COLORS[t.gameMode][t.id]),
                  e.pushObject({
                    id: t.id,
                    isDefault: t.isDefault,
                    gameMode: t.gameMode,
                    gameMutator: t.gameMutator,
                    url: n,
                    isVideo: a,
                    sidebarBackgroundColor: i,
                  });
              }
            }),
            e
          );
        },
      ),
      availableMaps: i.Ember.computed('maps.@each.id', 'maps.[]', function () {
        const e = this.get('maps');
        return e ? e : [];
      }),
      getMap: function (e, t, a) {
        const n = this.get('maps');
        return this._getMap(n, e, t, a);
      },
      getBackgroundAsset: function (e, t, a) {
        const n = this.get('backgroundAssets');
        return this._getMap(n, e, t, a);
      },
      _getMap: function (e, t, a, n) {
        let i = !1,
          s = !1;
        var l = !0,
          r = !1,
          c = void 0;
        try {
          for (
            var m = (0, o.default)(e), d;
            !(l = (d = m.next()).done);
            l = !0
          ) {
            const e = d.value;
            if (
              (e.id === t && e.isDefault && (s = e),
              e.id === t && e.gameMode === a && !e.gameMutator)
            )
              i = e;
            else if (
              e.id === t &&
              e.gameMode === a &&
              n &&
              e.gameMutator === n
            ) {
              i = e;
              break;
            }
          }
        } catch (e) {
          (r = !0), (c = e);
        } finally {
          try {
            !l && m.return && m.return();
          } finally {
            if (r) throw c;
          }
        }
        return i ? i : s;
      },
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(114),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    const s = (0, n.emberDataBinding)({
      Ember: n.Ember,
      websocket: (0, n.getProvider)().getSocket(),
      logPrefix: 'service:chat',
      basePaths: { chat: '/lol-chat' },
      boundProperties: {
        me: { api: 'chat', path: '/v1/me' },
        friends: {
          api: 'chat',
          path: '/v1/friends',
          objectTypes: { '[]': i.default },
        },
        groups: { api: 'chat', path: '/v1/friend-groups' },
      },
    });
    e.exports = n.Ember.Service.extend(s, {
      friends: n.Ember.A(),
      isFriend: function (e) {
        const t = this.get('friends');
        return !!(t && 0 < t.length) && t.isAny('summonerId', e);
      },
      getFriend: function (e) {
        const t = this.get('friends');
        return t && t.findBy('summonerId', e);
      },
      sendFriendRequest: function (e) {
        this.get('api.chat').post('/v1/friend-requests', e);
      },
      sendChatMessage: function (e, t) {
        const a = `/v1/conversations/${t}/messages`;
        return this.get('api.chat').post(a, { body: e, type: 'information' });
      },
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    const o = (0, n.emberDataBinding)({
      Ember: n.Ember,
      websocket: (0, n.getProvider)().getSocket(),
      logPrefix: 'service:summoner',
      basePaths: { summoner: '/lol-summoner' },
      boundProperties: {
        currentSummoner: { api: 'summoner', path: '/v1/current-summoner' },
      },
    });
    e.exports = n.Ember.Service.extend(o, {
      localSummonerId: n.Ember.computed.alias('currentSummoner.summonerId'),
      localDisplayName: n.Ember.computed.alias('currentSummoner.displayName'),
      localProfileIconId: n.Ember.computed.alias(
        'currentSummoner.profileIconId',
      ),
      getSummoner: function (e) {
        const t = `/v1/summoners/${e}`;
        return this.get('api.summoner').get(t);
      },
      getSummonerByName: function (e) {
        e = encodeURIComponent(e);
        const t = `/v1/summoners?name=${e}`;
        return this.get('api.summoner').get(t);
      },
      getSummonersByNames: function (e) {
        return this.get('api.summoner').post('/v2/summoners/names', e);
      },
      getSummonersByPuuid: function (e) {
        return this.get('api.summoner').post('/v2/summoners/puuid', e);
      },
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(40),
      r = a(17),
      c = a(3),
      m = n(c),
      d = a(6),
      p = n(d);
    const u = (0, m.default)('plugin:parties:lobbies-service:warn'),
      g = (0, s.emberDataBinding)({
        Ember: s.Ember,
        websocket: (0, s.getProvider)().getSocket(),
        logPrefix: 'service:game-select',
        basePaths: {
          gameQueues: '/lol-game-queues',
          login: '/lol-login',
          lobby: '/lol-lobby',
          summoner: '/lol-summoner',
          suggestedPlayers: '/lol-suggested-players',
          chat: '/lol-chat',
          regalia: '/lol-regalia',
          featuredModes: '/lol-featured-modes',
        },
        boundProperties: {
          queues: { api: 'gameQueues', path: '/v1/queues', default: [] },
          lobby: { api: 'lobby', path: '/v2/lobby' },
          lobbyTimer: { api: 'lobby', path: '/v2/lobby/countdown' },
          localSummonerData: { api: 'login', path: '/v1/session' },
          currentSummoner: { api: 'summoner', path: '/v1/current-summoner' },
          availability: { api: 'lobby', path: '/v1/lobby/availability' },
          invitations: { api: 'lobby', path: '/v1/lobby/invitations' },
          suggestedPlayers: {
            api: 'suggestedPlayers',
            path: '/v1/suggested-players',
          },
          chatConversations: { api: 'chat', path: '/v1/conversations' },
          chatParticipants: {
            api: 'chat',
            path: '/v1/conversations/{{chatConversationId}}/participants',
          },
          me: { api: 'chat', path: '/v1/me' },
          notifications: { api: 'lobby', path: '/v2/notifications' },
          gameSelectEligibilityHash: {
            api: 'lobby',
            path: '/v2/eligibility/game-select-eligibility-hash',
          },
          regaliaConfig: { api: 'regalia', path: '/v2/config' },
          featuredModesEntitledFeatures: {
            api: 'featuredModes',
            path: '/v1/entitled-feature/{{queueId}}',
          },
        },
      });
    e.exports = s.Ember.Service.extend(g, {
      matchmakingService: s.Ember.inject.service('matchmaking'),
      eligibilityService: s.Ember.inject.service('queue-eligibility'),
      platformConfig: p.default,
      chatConversationId: s.Ember.computed(
        'lobby.chatRoomId',
        'chatConversations.@each.id',
        function () {
          let e = this.get('lobby.chatRoomId');
          if (!e) return '';
          e = e.split('@')[0];
          const t = this.get('chatConversations'),
            a = t && t.find((t) => t.id.split('@')[0] === e);
          return a && a.id ? encodeURIComponent(a.id) : '';
        },
      ),
      partyId: s.Ember.computed.alias('lobby.partyId'),
      queueId: s.Ember.computed.alias('lobby.gameConfig.queueId'),
      gameConfig: s.Ember.computed.alias('lobby.gameConfig'),
      inLobby: s.Ember.computed.notEmpty('lobby.gameConfig.queueId'),
      isCustom: s.Ember.computed.bool('lobby.gameConfig.isCustom'),
      currentPlayer: s.Ember.computed.alias('lobby.localMember'),
      currentPartyMembers: s.Ember.computed.alias('lobby.members'),
      currentPartyMemberIds: s.Ember.computed.mapBy(
        'currentPartyMembers',
        'summonerId',
      ),
      isCurrentPlayerPartyLeader: s.Ember.computed.bool(
        'lobby.localMember.isLeader',
      ),
      isCurrentPlayerPartyMember: s.Ember.computed.not(
        'isCurrentPlayerPartyLeader',
      ),
      autoFillEligible: s.Ember.computed.alias(
        'lobby.localMember.autoFillEligible',
      ),
      currentPartyIsNotFull: s.Ember.computed.not('currentPartyIsFull'),
      premadeSizeAllowed: s.Ember.computed.alias(
        'lobby.gameConfig.premadeSizeAllowed',
      ),
      allowablePremadeSizes: s.Ember.computed.alias(
        'lobby.gameConfig.allowablePremadeSizes',
      ),
      isDraft: s.Ember.computed.alias('lobby.gameConfig.showPositionSelector'),
      showPositionSelector: s.Ember.computed.alias(
        'lobby.gameConfig.showPositionSelector',
      ),
      currentPartySize: s.Ember.computed.alias('lobby.members.length'),
      lobbyTimerEnabled: s.Ember.computed.alias('lobbyTimer.enabled'),
      lobbyTimerCountdown: s.Ember.computed.alias('lobbyTimer.countdown'),
      maxTeamSize: s.Ember.computed.alias('lobby.gameConfig.maxTeamSize'),
      restrictions: s.Ember.computed.alias('lobby.restrictions'),
      warnings: s.Ember.computed.alias('lobby.warnings'),
      partyType: s.Ember.computed.alias('lobby.partyType'),
      isLobbyFull: s.Ember.computed.alias('lobby.gameConfig.isLobbyFull'),
      isOpenPartyDisabled: s.Ember.computed.equal('lobby.partyType', ''),
      isOpenPartyEnabled: s.Ember.computed.not('isOpenPartyDisabled'),
      isMap21: s.Ember.computed.equal('lobby.gameConfig.mapId', 21),
      isTFT: s.Ember.computed.equal('lobby.gameConfig.gameMode', 'TFT'),
      isSolo: s.Ember.computed('lobby.members.length', function () {
        const e = this.get('lobby');
        return !(e && e.members && 1 < e.members.length);
      }),
      maxLobbySize: s.Ember.computed(
        'lobby.gameConfig.maxLobbySize',
        'isTFT',
        function () {
          const e = this.get('lobby.gameConfig.maxLobbySize');
          return e
            ? e
            : this.get('isTFT')
            ? l.TFT_MAX_PARTY_SIZE
            : l.NORMAL_MAX_PARTY_SIZE;
        },
      ),
      currentPartyIsFull: s.Ember.computed(
        'currentPartySize',
        'maxLobbySize',
        'isCustom',
        function () {
          if (this.get('isCustom')) return !1;
          const e = this.get('maxLobbySize');
          return this.get('currentPartySize') >= e;
        },
      ),
      memberNameHash: s.Ember.computed(
        'lobby.members.@each.summonerName',
        'currentSummoner.summonerId',
        function () {
          const e = {},
            t = this.get('currentSummoner');
          t && (e[t.summonerId] = t.displayName);
          const a = this.get('lobby.members');
          if (a && 0 < a.length) {
            const t = a.length;
            for (let n = 0; n < t; n++) {
              const t = a[n];
              e[t.summonerId] = t.summonerName;
            }
          }
          return e;
        },
      ),
      hasLobbyRestrictions: s.Ember.computed.gt('restrictions.length', 0),
      currentTeamIsFull: s.Ember.computed(
        'currentPartyMembers.length',
        'maxTeamSize',
        function () {
          return (
            this.get('currentPartyMembers.length') >= this.get('maxTeamSize')
          );
        },
      ),
      otherCurrentPartyMembers: s.Ember.computed(
        'currentPartyMembers.@each.summonerId',
        'currentPlayer.summonerId',
        function () {
          const e = this.get('currentPartyMembers'),
            t = this.get('currentPlayer.summonerId'),
            a = e ? s.Ember.A(e.rejectBy('summonerId', t)) : void 0;
          return a || s.Ember.A();
        },
      ),
      currentPartyLeader: s.Ember.computed(
        'currentPartyMembers.@each.isLeader',
        function () {
          const e = this.get('currentPartyMembers');
          return !!e && e.findBy('isLeader');
        },
      ),
      invites: s.Ember.computed.alias('lobby.invitations'),
      pendingInvites: s.Ember.computed(
        'lobby.invitations.[]',
        'lobby.invitations.@each.state',
        function () {
          const e = this.get('lobby.invitations') || s.Ember.A();
          return e.filter(
            (e) => 'Pending' === e.state || 'Requested' === e.state,
          );
        },
      ),
      invitedPlayerIds: s.Ember.computed.mapBy(
        'lobby.invitations',
        'toSummonerId',
      ),
      currentPlayerAcceptedInvitation: s.Ember.computed(
        'lobby.invitations.[]',
        'lobby.invitations.@each.state',
        'currentPlayer.summonerId',
        function () {
          const e = this.get('lobby.invitations'),
            t = this.get('currentPlayer');
          if (e && t) {
            const a = e.findBy('toSummonerId', t.get('summonerId'));
            if (a && a.state) return a.state === l.INVITED_ROLES.ACCEPTED;
          }
          return !1;
        },
      ),
      currentPartySuggestedPlayers: s.Ember.computed.alias('suggestedPlayers'),
      currentPlayerCanInvite: s.Ember.computed.and(
        'currentPlayer.allowedInviteOthers',
        'matchmakingService.isNotSearching',
        'currentPartyIsNotFull',
      ),
      createLobbyWithQueueId: function (e) {
        return (
          u(`Creating new lobby with queueId: ${e}`),
          this.get('api.lobby').post('v2/lobby', { queueId: e })
        );
      },
      isPlayerInLobby: function (e) {
        const t = this.get('currentPlayer');
        if (t && t.get('summonerId') === e) return !0;
        const a = this.get('invites'),
          n = a.find(
            (t) =>
              t.get('toSummonerId') === e &&
              t.get('state') !== l.INVITED_ROLES.KICKED &&
              t.get('state') !== l.INVITED_ROLES.DECLINED,
          );
        return !!n;
      },
      invitePlayer: function (e) {
        return this.isPlayerInLobby(e) || this.get('currentPartyIsFull')
          ? i.default.reject()
          : this.get('api.lobby').post('/v2/lobby/invitations', [
              { toSummonerId: e },
            ]);
      },
      invitePlayers: function (e) {
        if (this.get('currentPartyIsFull')) return i.default.reject();
        const t = [];
        return (
          e.forEach((e) => {
            this.isPlayerInLobby(e) || t.push({ toSummonerId: e });
          }),
          0 === t.length
            ? i.default.reject()
            : this.get('api.lobby').post('/v2/lobby/invitations', t)
        );
      },
      transferLeadershipToPlayer: function (e) {
        return this._postMemberAction(e, 'promote');
      },
      leaveParty: function () {
        return (
          this.cancelMatchmakingSearch(),
          this.leaveLobby().then(() => {
            this.get('eligibilityService').refreshEligibilities();
          })
        );
      },
      leaveLobby: function () {
        return this.get('api.lobby').delete('/v2/lobby');
      },
      removePlayerFromParty: function (e) {
        return this._postMemberAction(e, 'kick');
      },
      removeSuggestedPlayer: function (e) {
        return this.get('api.suggestedPlayers').delete(
          `/v1/suggested-players/${e}`,
        );
      },
      sendInvitePrivilegeAction: function (e, t) {
        return this.get('api.lobby').post(`/v2/lobby/members/${e}/${t}`);
      },
      _postMemberAction: function (e, t) {
        if (!e)
          throw new Error(
            'Attempting to act on invalid lobby summoner id: ' + e,
          );
        else if (!t)
          throw new Error(
            'Attempting to post invalid lobby summoner action: ' + t,
          );
        const a = `/v2/lobby/members/${e}/${t}`;
        return this.get('api.lobby').post(a);
      },
      setPositionPreferences: function (e) {
        return this.get('api.lobby').put(
          '/v1/lobby/members/localMember/position-preferences',
          e,
        );
      },
      canStartMatchmaking: s.Ember.computed.alias('lobby.canStartActivity'),
      isPremadeRestrictedFives: s.Ember.computed(
        'premadeSizeAllowed',
        'allowablePremadeSizes.[]',
        function () {
          const e = this.get('allowablePremadeSizes'),
            t = this.get('premadeSizeAllowed');
          return !!(e && 1 === e.length && 5 === e[0] && !1 === t);
        },
      ),
      chatParticipantsObserver: s.Ember.computed(
        'chatConversationId',
        'chatParticipants.@each.{id,icon,availability}',
        function () {
          return this.get('chatParticipants');
        },
      ),
      startMatchmakingSearch: function () {
        return this.get('api.lobby').post('/v2/lobby/matchmaking/search');
      },
      cancelMatchmakingSearch: function () {
        return this.get('api.lobby').delete('/v2/lobby/matchmaking/search');
      },
      deleteNotification: function (e) {
        return e
          ? this.get('api.lobby').delete(`/v2/notifications/${e}`)
          : i.default.reject();
      },
      setPartyType: function (e) {
        const t = this.get('api.lobby').put('/v2/lobby/partyType', e);
        return t;
      },
      isLobbyDisabled: function (e) {
        return !!(
          e &&
          r.GAME_AVAILABILITY_TYPES[e] &&
          'disabled' === r.GAME_AVAILABILITY_TYPES[e]
        );
      },
      queueAvailabilityWarningTooltip: s.Ember.computed(
        'queueId',
        'isCustom',
        'inLobby',
        'availability',
        'tra.ready',
        'tra.parties_queue_disbanded_tooltip',
        function () {
          if (!this.get('isCustom') && this.get('inLobby')) {
            const e = this.get('availability');
            if (this.isLobbyDisabled(e))
              return this.get('tra.parties_queue_disbanded_tooltip');
          }
          return '';
        },
      ),
      hasQueueAvailabilityWarning: s.Ember.computed.gt(
        'queueAvailabilityWarningTooltip.length',
        0,
      ),
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(38);
    const i = a(50),
      s = (0, n.emberDataBinding)({
        Ember: n.Ember,
        websocket: (0, n.getProvider)().getSocket(),
        logPrefix: 'parties:service:matchmaking',
        basePaths: { matchmaking: '/lol-matchmaking', lobby: '/lol-lobby' },
        boundProperties: {
          matchmakingSearch: { api: 'matchmaking', path: '/v1/search' },
          matchmakingSearchState: {
            api: 'lobby',
            path: '/v2/lobby/matchmaking/search-state',
          },
          currentSummoner: 'lol-summoner/v1/current-summoner',
        },
      });
    e.exports = n.Ember.Service.extend(s, {
      lobbiesService: n.Ember.inject.service('lobbies'),
      currentPartyMembers: n.Ember.computed.alias(
        'lobbiesService.currentPartyMembers',
      ),
      matchmakingErrors: n.Ember.computed.alias(
        'matchmakingSearchState.errors',
      ),
      matchmakingErrorState: n.Ember.computed.alias(
        'matchmakingSearchState.searchState',
      ),
      validSearchErrors: n.Ember.computed(
        'matchmakingErrors.@each.id',
        'currentPartyMembers.@each.summonerId',
        function () {
          const e = this.get('currentPartyMembers');
          if (!e) return n.Ember.A();
          const t = n.Ember.A(e.mapBy('summonerId')),
            a = this.get('matchmakingErrors'),
            o = n.Ember.A(
              n.lodash.filter(a, (e) => !!t.contains(e.penalizedSummonerId)),
            );
          return o;
        },
      ),
      validSearchErrorIds: n.Ember.computed('validSearchErrors', function () {
        return this.get('validSearchErrors').map((e) => e.get('id'));
      }),
      longestSearchError: n.Ember.computed('validSearchErrors', function () {
        const e = this.get('validSearchErrors'),
          t = n.lodash.orderBy(e, ['penaltyTimeRemaining'], ['desc']);
        return !!t.length && t[0];
      }),
      longestSearchErrorPenaltyTimeRemaining: n.Ember.computed.readOnly(
        'longestSearchError.penaltyTimeRemaining',
      ),
      longestSearchErrorPenaltyTimeRemainingFormatted: n.Ember.computed(
        'longestSearchErrorPenaltyTimeRemaining',
        function () {
          return i.formatThreeLargestUnits(
            this.get('longestSearchErrorPenaltyTimeRemaining'),
          );
        },
      ),
      searchState: n.Ember.computed.alias('matchmakingSearch.searchState'),
      isSearching: n.Ember.computed.equal(
        'searchState',
        o.MATCHMAKING_STATES.SEARCHING,
      ),
      isNotSearching: n.Ember.computed.not('isSearching'),
      isMatchFound: n.Ember.computed.equal(
        'searchState',
        o.MATCHMAKING_STATES.FOUND,
      ),
      isMatchNotFound: n.Ember.computed.not('isMatchFound'),
      isInQueue: n.Ember.computed.or('isSearching', 'isMatchFound'),
      lowPriorityData: n.Ember.computed.readOnly(
        'matchmakingSearch.lowPriorityData',
      ),
      isLowPriorityQueue: n.Ember.computed.gt('lowPriorityData.penaltyTime', 0),
      isQueueDelay: n.Ember.computed.equal(
        'lowPriorityData.reason',
        o.LOW_PRIORITY_REASONS.QUEUE_DELAY,
      ),
      hasLowPriorityPenaltyTimeRemaining: n.Ember.computed.gt(
        'lowPriorityData.penaltyTimeRemaining',
        0,
      ),
      isSelfInLowPriorityQueue: n.Ember.computed(
        'lowPriorityData.penalizedSummonerIds',
        'currentSummoner.summonerId',
        function () {
          const e = this.get('lowPriorityData.penalizedSummonerIds');
          return (
            e &&
            !(1 > e.length) &&
            e.contains(this.get('currentSummoner.summonerId'))
          );
        },
      ),
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    const o = (0, n.emberDataBinding)({
      Ember: n.Ember,
      websocket: (0, n.getProvider)().getSocket(),
      logPrefix: 'service:eternals',
      basePaths: { eternals: '/lol-statstones' },
      boundProperties: {
        enabledQueues: {
          api: 'eternals',
          path: '/v1/statstones-enabled-queue-ids',
        },
      },
    });
    e.exports = n.Ember.Service.extend(o);
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(22),
      r = n(l),
      c = a(7),
      m = a(30),
      d = n(m);
    const p = (0, s.emberDataBinding)({
      Ember: s.Ember,
      websocket: (0, s.getProvider)().getSocket(),
      logPrefix: 'service:queue-eligibility',
      basePaths: { login: '/lol-login', champions: '/lol-champions' },
      boundProperties: { loginSession: { api: 'login', path: '/v1/session' } },
    });
    e.exports = s.Ember.Service.extend(p, {
      lobbies: s.Ember.inject.service('lobbies'),
      gameflowService: s.Ember.inject.service('gameflow'),
      summoner: s.Ember.inject.service('summoner'),
      queues: d.default,
      eligibilitiesEntity: r.default,
      loginConnected: s.Ember.computed.alias('loginSession.connected'),
      loading: s.Ember.computed.readOnly('eligibilitiesEntity.loading'),
      eligibilities: s.Ember.computed.readOnly(
        'eligibilitiesEntity.eligibilities',
      ),
      currentPartyMembers: s.Ember.computed.alias(
        'lobbies.currentPartyMembers',
      ),
      isSolo: s.Ember.computed.alias('lobbies.isSolo'),
      refreshEligibilities: function () {
        return this.get('eligibilitiesEntity').fetchEligibilities();
      },
      generateDisabledReasonForParty: function (e) {
        return new i.default((t) => {
          (!e.restrictions || 1 > e.restrictions.length) && t('');
          const a = [];
          let n = !1;
          const o = this.groupMissingTokenRestrictions(e.restrictions);
          o.forEach((t) => {
            (t.queueId = e.queueId),
              c.TENCENT_MINOR_RESTRICTIONS.includes(t.restrictionCode)
                ? !n && ((n = !0), a.push(this.generateRestrictionForParty(t)))
                : a.push(this.generateRestrictionForParty(t));
          }),
            i.default.all(a).then((e) => {
              t(e);
            });
        });
      },
      groupMissingTokenRestrictions: function (e) {
        return this.get('eligibilitiesEntity').groupMissingTokenRestrictions(e);
      },
      generateRestrictionForParty: function (e) {
        return new i.default((t) => {
          const a = this.get('summoner');
          let n;
          if (e.summonerIds) {
            const t = this.get('lobbies.memberNameHash'),
              o = [];
            e.summonerIds.forEach((e) => {
              const n = t[e];
              n
                ? o.push(i.default.resolve({ displayName: n }))
                : o.push(a.getSummoner(e));
            }),
              (n = i.default.all(o));
          } else n = i.default.resolve([]);
          n.then((a) => {
            t(this._generateMessageForParty(e, a, ', '));
          });
        });
      },
      _generateMessageForParty: function (e, t, a = '<br>') {
        const n = e.restrictionCode || 'QueueDisabled';
        let o = e.restrictionArgs || {};
        const i = [];
        t.forEach((e) => {
          i.push(e.displayName);
        }),
          (o.players = i.join(a));
        let s = !1;
        if (
          'PlayerMinLevelRestriction' === e.restrictionCode ||
          'PlayerAvailableChampionRestriction' === e.restrictionCode ||
          'PrerequisiteQueuesNotPlayedRestriction' === e.restrictionCode ||
          'PlayerTimePlayedRestriction' === e.restrictionCode ||
          'PlayerMinorRestriction' === e.restrictionCode
        ) {
          const t = this.get('queues'),
            a = t.getQueueById(e.queueId),
            o = t.getMapModeInfo(a.mapId, a.gameMode);
          if (
            'PlayerTimePlayedRestriction' === e.restrictionCode ||
            'PlayerMinorRestriction' === e.restrictionCode
          )
            s = `game_select_queue_restriction_party_${n.toLowerCase()}`;
          else if (
            'PrerequisiteQueuesNotPlayedRestriction' !== e.restrictionCode &&
            o &&
            o.isRGM
          )
            s = `game_select_queue_restriction_${n.toLowerCase()}_featured`;
          else {
            const a = t.getQueueTypeForQueue(e.queueId),
              o = t.getPickTypeForQueue(e.queueId);
            s = `game_select_queue_restriction_${n.toLowerCase()}_${a}_${o}`;
          }
          this.get('tra').exists(s) ||
            (s = `game_select_queue_restriction_${n.toLowerCase()}_generic`);
        } else if ('QueueEntryNotEntitledRestriction' === e.restrictionCode)
          s = `game_select_queue_restriction_${n.toLowerCase()}_${e.queueId}`;
        else if ('MissingToken' === e.restrictionCode)
          s = `game_select_queue_restriction_${n.toLowerCase()}`;
        else if ('TeamMaxSizeRestriction' === e.restrictionCode)
          s = 'parties_premade_size_restriction';
        else if ('PlayerRankSoloOnlyRestriction' === e.restrictionCode) {
          const t = r.default.getLocInfoForPlayerRankSoloOnlyRestriction(e);
          (s = t.key), (o = t.args);
        } else s = `game_select_queue_restriction_party_${n.toLowerCase()}`;
        const l = this.get('tra.formatString');
        return l(s, o);
      },
      _arrayLength: function (e) {
        return (e && e.length) || 0;
      },
      getTeamQueueEligibilities: function (e) {
        const t = this.get('eligibilities'),
          a = this._arrayLength(e);
        if (0 === a || !t) return s.Ember.A([]);
        const n = [];
        for (let o = 0; o < a; o++) {
          const a = e[0];
          if (t[a] && !t[a].eligible) {
            const e = [],
              o = this._arrayLength(t[a].restrictions);
            for (let n = 0; n < o; n++) {
              const o = t[a].restrictions[n];
              this.get('eligibilitiesEntity').isTeamRestriction(o) && e.push(o);
            }
            0 < e.length && ((t[a].restrictions = e), n.push(t[a]));
          }
        }
        return s.Ember.A(n);
      },
      getSoloEligibilities: function (e) {
        const t = [];
        if (e) {
          let a = this.get('eligibilities');
          if (a && a[e] && !a[e].eligible) {
            a = a[e];
            const n = [],
              o = this._arrayLength(a.restrictions);
            for (let e = 0; e < o; e++) {
              const t = a.restrictions[e];
              this.get('eligibilitiesEntity').isTeamRestriction(t) || n.push(t);
            }
            0 < n.length && ((a.restrictions = n), t.push(a));
          }
        }
        return s.Ember.A(t);
      },
      restrictionsForQueue: function (e) {
        return this.get('eligibilitiesEntity').restrictionsForQueue(e);
      },
      getSoloIneligibleQueues: function (e) {
        const t = s.Ember.A();
        return (
          e &&
            e.forEach((e) => {
              const a = this.getSoloEligibilities(e)[0];
              a && !a.eligible && t.push(a);
            }),
          t
        );
      },
      isTutorialRestricted: function () {
        const e = this.get('eligibilities');
        if (e)
          for (let t = 0; t < c.TUTORIAL_QUEUE_IDS.length; t++) {
            const a = c.TUTORIAL_QUEUE_IDS[t],
              n = e[a];
            if (
              n &&
              this.get('eligibilitiesEntity').hasMinorRestriction(
                n.restrictions,
              )
            )
              return !0;
          }
        return !1;
      },
      getIneligibleQueues: function (e) {
        const t = s.Ember.A(),
          a = this.get('eligibilities');
        return (
          e &&
            a &&
            e.forEach((e) => {
              const n = a[e];
              n && !n.eligible && t.push(n);
            }),
          t
        );
      },
      getQueueEligibilities: function (e) {
        const t = s.Ember.A(),
          a = this.get('eligibilities');
        return d.default && 0 !== d.default.length && a
          ? (e &&
              a &&
              e.forEach((e) => {
                const n = a[e];
                n && t.push(n);
              }),
            t)
          : s.Ember.A();
      },
      isSummonerRestricted: function (e, t) {
        if (!e) return !0;
        if (e.eligible) return !1;
        const a = e.restrictions || [],
          n = a.length;
        for (let o = 0; o < n; o++) {
          const e = a[o];
          if (-1 !== e.summonerIds.indexOf(t)) return !0;
        }
        return !1;
      },
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    const o = (0, n.emberDataBinding)({
      Ember: n.Ember,
      websocket: (0, n.getProvider)().getSocket(),
      logPrefix: 'service:gameflow',
      basePaths: { gameflow: '/lol-gameflow', lobby: '/lol-lobby' },
      boundProperties: { session: { api: 'gameflow', path: '/v1/session' } },
    });
    e.exports = n.Ember.Service.extend(o, {
      phase: n.Ember.computed.alias('session.phase'),
      isLobby: n.Ember.computed.equal('phase', 'Lobby'),
      isMatchmaking: n.Ember.computed.equal('phase', 'Matchmaking'),
      isReadyCheck: n.Ember.computed.equal('phase', 'ReadyCheck'),
      isChampSelect: n.Ember.computed.equal('phase', 'ChampSelect'),
      isPhasePostGame: n.Ember.computed('phase', function () {
        const e = this.get('phase');
        return (
          'WaitingForStats' === e || 'PreEndOfGame' === e || 'EndOfGame' === e
        );
      }),
      currentQueueId: n.Ember.computed.alias('session.gameData.queue.id'),
      startBasicTutorial: function () {
        return this.get('api.lobby')
          .delete('/v2/lobby')
          .catch(() => {})
          .then(() => this.get('api.gameflow').post('v1/basic-tutorial/start'));
      },
      startBattleTraining: function () {
        return this.get('api.lobby')
          .delete('/v2/lobby')
          .catch(() => {})
          .then(() =>
            this.get('api.gameflow').post('v1/battle-training/start'),
          );
      },
      startTutorialFlow: function () {
        (0, n.getProvider)()
          .getProxiedContract('rcp-fe-lol-new-player-experience')
          .then((e) => {
            e.show();
          });
      },
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(6),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    const s = n.bluebird.Promise,
      l = 1,
      r = (0, n.emberDataBinding)({
        Ember: n.Ember,
        websocket: (0, n.getProvider)().getSocket(),
        logPrefix: 'service:parties:settings',
        basePaths: { settings: '/lol-settings', party: '/lol-lobby' },
        boundProperties: {
          localParties: { api: 'settings', path: '/v1/local/lol-parties' },
          accountParties: { api: 'settings', path: '/v1/account/lol-parties' },
          tft: { api: 'settings', path: '/v2/account/LCUPreferences/lol-tft' },
        },
      });
    e.exports = n.Ember.Service.extend(r, {
      platformConfigSingleton: i.default,
      uxSettings: null,
      _bannerAnimationsEnabled: !0,
      bannerAnimationsEnabled: n.Ember.computed.and(
        'largeAreaAnimationsEnabled',
        '_bannerAnimationsEnabled',
      ),
      largeAreaAnimationsEnabled: n.Ember.computed(
        'uxSettings.largeAreaAnimationsEnabled',
        'platformConfigSingleton.potatoModeForced',
        function () {
          return (
            !this.get('platformConfigSingleton.potatoModeForced') &&
            this.get('uxSettings.largeAreaAnimationsEnabled')
          );
        },
      ),
      animationsEnabled: n.Ember.computed.alias('largeAreaAnimationsEnabled'),
      init: function () {
        this._super(),
          this.set('uxSettingsListener', this.uxSettingsObserver.bind(this)),
          n.UXSettings.addObserver(this.get('uxSettingsListener'));
      },
      willDestroy: function () {
        this._super(),
          n.UXSettings.removeObserver(this.get('uxSettingsListener'));
      },
      permanentHideAutofillModal: n.Ember.computed(
        'localParties.permanentHideAutofillModal',
        {
          get() {
            return !!this.get('localParties.data.permanentHideAutofillModal');
          },
          set(e, t) {
            return this.get('api.settings')
              .patch('/v1/local/lol-parties', {
                data: { permanentHideAutofillModal: t },
                schemaVersion: l,
              })
              .then(() => t);
          },
        },
      ),
      shouldHideAutofillModal: function () {
        return this.sessionPromise().then((e) =>
          e
            ? s.resolve(!0)
            : this.permanentPromise().then((e) =>
                e && e.data && e.data.permanentHideAutofillModal
                  ? s.resolve(!0)
                  : s.resolve(!1),
              ),
        );
      },
      sessionHideAutofillModal: n.Ember.computed({
        get() {
          return this.sessionPromise();
        },
        set() {
          return this.get('api.party').put('/v1/autofill-displayed');
        },
      }),
      permanentPromise: function () {
        return this.get('api.settings').get('/v1/local/lol-parties');
      },
      sessionPromise: function () {
        return this.get('api.party').get('/v1/autofill-displayed');
      },
      hideAutofillModal: n.Ember.computed.or(
        'permanentHideAutofillModal',
        'sessionHideAutofillModal',
      ),
      uxSettingsObserver: function (e) {
        this.set('uxSettings', e);
      },
      hasSeenOpenPartyFirstExperience: n.Ember.computed(
        'accountParties.data.hasSeenOpenPartyFirstExperience',
        {
          get() {
            return !!this.get(
              'accountParties.data.hasSeenOpenPartyFirstExperience',
            );
          },
          set(e, t) {
            return this.get('api.settings')
              .patch('/v1/account/lol-parties', {
                data: { hasSeenOpenPartyFirstExperience: t },
                schemaVersion: l,
              })
              .then(() => t);
          },
        },
      ),
      iconOverride: n.Ember.computed('tft.data.iconOverride', {
        get() {
          return this.get('tft.data.iconOverride');
        },
        set(e, t) {
          return this.get('api.settings')
            .patch('/v2/account/LCUPreferences/lol-tft', {
              data: { iconOverride: t },
              schemaVersion: l,
            })
            .then(() => t);
        },
      }),
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(25),
      i = n(o),
      s = a(2),
      l = n(s),
      r = a(0),
      c = a(17),
      m = a(3),
      d = n(m),
      p = a(6),
      u = n(p),
      g = a(7),
      b = a(17);
    const h = (0, d.default)('plugin:parties:custom-games-service:warn');
    h.log = d.default.consoleWrap('debug');
    const f = (0, d.default)('plugin:parties:custom-games-service:error');
    f.log = d.default.consoleWrap('error');
    const y = (0, r.emberDataBinding)({
      Ember: r.Ember,
      websocket: (0, r.getProvider)().getSocket(),
      logPrefix: 'service:custom-games',
      basePaths: {
        gameQueues: '/lol-game-queues',
        lobby: '/lol-lobby',
        summoner: '/lol-summoner',
        suggestedPlayers: '/lol-suggested-players',
        chat: '/lol-chat',
        platformConfig: '/lol-platform-config',
        sanitizer: '/sanitizer',
        gameData: '/lol-game-data',
        gameFlow: '/lol-gameflow',
      },
      boundProperties: {
        queues: { api: 'gameQueues', path: '/v1/custom' },
        nonDefaultQueues: { api: 'gameQueues', path: '/v1/custom-non-default' },
        lobby: { api: 'lobby', path: '/v2/lobby' },
        customBotsEnabled: {
          api: 'lobby',
          path: '/v2/lobby/custom/bots-enabled',
        },
        customAvailableBots: {
          api: 'lobby',
          path: '/v2/lobby/custom/available-bots',
        },
        currentSummoner: { api: 'summoner', path: '/v1/current-summoner' },
        chatParticipants: {
          api: 'chat',
          path: '/v1/conversations/{{chatConversationId}}/participants',
        },
        clientSystemStatesJMX: {
          api: 'platformConfig',
          path: '/v1/namespaces/ClientSystemStates',
        },
        gameflowSession: { api: 'gameFlow', path: '/v1/session' },
        championSummary: {
          api: 'gameData',
          path: '/assets/v1/champion-summary.json',
        },
      },
    });
    e.exports = r.Ember.Service.extend(y, {
      nameError: null,
      isSwitchingTeamsOrSpectating: !1,
      preventTeamChanges: !1,
      platformConfigSingleton: u.default,
      playerInputs: r.Ember.Object.create({
        name: '',
        subcategoryIndex: 0,
        mutatorId: 1,
        numPlayersPerTeam: 5,
        gameServerRegion: '',
        password: '',
        spectatorType: 'AllAllowed',
      }),
      availability: r.Ember.computed.alias('queues.queueAvailability'),
      available: r.Ember.computed.equal('availability', 'Available'),
      shownCustomSubcategories: r.Ember.computed.alias('queues.subcategories'),
      subcategories: r.Ember.computed.union(
        'queues.subcategories',
        'nonDefaultQueues.subcategories',
      ),
      spectatorTypes: r.Ember.computed.alias('queues.spectatorPolicies'),
      customSpectatorSlotLimit: r.Ember.computed.alias(
        'queues.spectatorSlotLimit',
      ),
      lobbySpectatorSlotLimit: r.Ember.computed(
        'lobby.gameConfig.maxLobbySize',
        'lobby.gameConfig.maxTeamSize',
        function () {
          return (
            this.get('lobby.gameConfig.maxLobbySize') -
            this.get('lobby.gameConfig.maxTeamSize')
          );
        },
      ),
      spectatorSlotLimit: r.Ember.computed(
        'customSpectatorSlotLimit',
        'lobbySpectatorSlotLimit',
        'isCustom',
        function () {
          return this.get('isCustom')
            ? this.get('customSpectatorSlotLimit')
            : this.get('lobbySpectatorSlotLimit');
        },
      ),
      gameName: r.Ember.computed.alias('lobby.gameConfig.customLobbyName'),
      teamSize: r.Ember.computed.alias('lobby.gameConfig.maxTeamSize'),
      isCustomUI: r.Ember.computed.or('isCustom', 'isSpectatorCustom'),
      isSpectatorCustom: r.Ember.computed(
        'lobby.gameConfig.customSpectatorPolicy',
        function () {
          const e = this.get('lobby.gameConfig.customSpectatorPolicy');
          return e && e !== b.CUSTOM_GAME_SPECTATOR_VALUES.NotAllowed;
        },
      ),
      isCustom: r.Ember.computed.alias('lobby.gameConfig.isCustom'),
      mutatorName: r.Ember.computed.alias('lobby.gameConfig.customMutatorName'),
      spectatorPolicy: r.Ember.computed.alias(
        'lobby.gameConfig.customSpectatorPolicy',
      ),
      rewardsDisabledReasons: r.Ember.computed.alias(
        'lobby.gameConfig.customRewardsDisabledReasons',
      ),
      isLobbyFull: r.Ember.computed.alias('lobby.gameConfig.isLobbyFull'),
      isTFT: r.Ember.computed.equal(
        'lobby.gameConfig.gameMode',
        g.GAME_MODES.TFT,
      ),
      team100: r.Ember.computed.alias('lobby.gameConfig.customTeam100'),
      team200: r.Ember.computed.alias('lobby.gameConfig.customTeam200'),
      customBotsDisabled: r.Ember.computed.not('customBotsEnabled'),
      minPlayers: r.Ember.computed.alias(
        'clientSystemStatesJMX.minNumPlayersForPracticeGame',
      ),
      aggressiveScanning: r.Ember.computed.alias(
        'platformConfigSingleton.aggressiveScanning',
      ),
      currentPlayer: r.Ember.computed.alias('lobby.localMember'),
      currentPlayerIsSpectator: r.Ember.computed.equal(
        'currentPlayersTeam',
        'spectator',
      ),
      localSummonerName: r.Ember.computed.alias('currentSummoner.displayName'),
      localSummonerLevel: r.Ember.computed.alias(
        'currentSummoner.summonerLevel',
      ),
      haveNameError: r.Ember.computed.notEmpty('nameError'),
      gameMapMinPlayers: r.Ember.computed(
        'clientSystemStatesJMX.gameMapEnabledDTOList',
        function () {
          const e = this.get('clientSystemStatesJMX.gameMapEnabledDTOList');
          return e ? r.Ember.A(e) : r.Ember.A([]);
        },
      ),
      selectedSubcategory: r.Ember.computed(
        'playerInputs.subcategoryIndex',
        'subcategories.[]',
        function () {
          const e = this.get('subcategories');
          if (!e || 1 > e.length) return null;
          const t = this.get('playerInputs.subcategoryIndex'),
            a = e[t];
          return a;
        },
      ),
      subcategoriesObserver: r.Ember.computed(
        'subcategories.@each.queueAvailability',
        function () {
          const e = this.get('subcategories');
          if (e && !(1 > e.length)) {
            const t = this.get('playerInputs.subcategoryIndex'),
              a = e[t];
            (a &&
              'available' ===
                c.GAME_AVAILABILITY_TYPES[a.get('queueAvailability')]) ||
              this.resetSelectedSubcategory();
          }
        },
      ),
      gameServerRegions: r.Ember.computed.alias('queues.gameServerRegions'),
      updatePlayerInputServerRegionObserver: r.Ember.on(
        'init',
        r.Ember.observer('queues.gameServerRegions.[]', function () {
          r.Ember.run.once(this, () => {
            this._updatePlayerSelectedRegion(
              this.get('queues.gameServerRegions'),
            );
          });
        }),
      ),
      spectators: r.Ember.computed(
        'lobby.gameConfig.customSpectators.[]',
        'lobby.gameConfig.customSpectators.@each.summonerId',
        function () {
          return this.get('lobby.gameConfig.customSpectators') || r.Ember.A();
        },
      ),
      currentNumPlayers: r.Ember.computed(
        'team100.[]',
        'team200.[]',
        function () {
          const e = this.get('team100').filterBy('isBot', !1).length,
            t = this.get('team200').filterBy('isBot', !1).length;
          return e + t;
        },
      ),
      currentPlayersTeam: r.Ember.computed(
        'currentPlayer',
        'team100',
        'team100.[]',
        'team100.@each.summonerId',
        'team200',
        'team200.[]',
        'team200.@each.summonerId',
        'spectators',
        function () {
          const e = this.get('currentPlayer'),
            t = this.get('team100'),
            a = this.get('team200'),
            n = this.get('spectators');
          return e && e.summonerId
            ? this._isOnTeam(e, t)
              ? 1
              : this._isOnTeam(e, a)
              ? 2
              : this._isOnTeam(e, n)
              ? 'spectator'
              : 0
            : 0;
        },
      ),
      gameflowPhaseObserver: r.Ember.computed(
        'gameflowSession.phase',
        function () {
          'Lobby' === this.get('gameflowSession.phase') &&
            this.set('preventTeamChanges', !1);
        },
      ),
      availableBots: r.Ember.computed('customAvailableBots', function () {
        const e = this.get('customAvailableBots'),
          t = e ? r.Ember.A(e) : r.Ember.A();
        return (
          t.forEach((e) => {
            e.botDifficulties = e.botDifficulties
              ? r.Ember.A(e.botDifficulties)
              : r.Ember.A();
          }),
          t
        );
      }),
      availableBotDetails: r.Ember.computed(
        'availableBots',
        'availableBots.[]',
        'championSummary',
        function () {
          const e = r.Ember.A(),
            t = this.get('championSummary');
          if (t)
            return (
              this.get('availableBots').forEach((a) => {
                let n = '';
                const o = t.findBy('id', a.id);
                o && o.squarePortraitPath && (n = o.squarePortraitPath);
                const i = {
                  id: a.id,
                  name: a.name,
                  botDifficulties: r.Ember.A(),
                  selected: null,
                  botIconUrl: n,
                };
                a.botDifficulties &&
                  a.botDifficulties.forEach((e) => {
                    const t = this.getDifficultyDisplayName(e);
                    i.botDifficulties.pushObject({
                      difficulty: e,
                      difficultyDisplayName: t,
                    });
                  }),
                  e.pushObject(i);
              }),
              e
            );
        },
      ),
      defaultGameName: r.Ember.computed(
        'tra.ready',
        'localSummonerName',
        function () {
          const e = this.get('localSummonerName');
          if (!e) return '';
          const t = this.get('tra.formatString'),
            a = t('custom_game_setup_name_default', { summonerName: e });
          return this.set('playerInputs.name', a), a;
        },
      ),
      gameServerRegionOptions: r.Ember.computed(
        'playerInputs.gameServerRegion',
        'gameServerRegions',
        'gameServerRegions.[]',
        function () {
          const e = this.get('gameServerRegions');
          if (!e || !e.length) return r.Ember.A([]);
          const t = this.get('playerInputs.gameServerRegion'),
            a = [];
          for (let n = 0; n < e.length; n++) {
            const o = e[n] === t;
            a.push({ value: e[n], isSelected: o });
          }
          return r.Ember.A(a);
        },
      ),
      getRewardsDisabledReasons: function () {
        const e = this.get('rewardsDisabledReasons');
        if (e && e instanceof Array) return e;
        return this.areTeamsImbalanced() ? ['UNBALANCED_TEAMS'] : [];
      },
      _isOnTeam: function (e, t) {
        if (e && t && t.length) {
          const a = t.findBy('summonerId', e.summonerId);
          if (a) return !0;
        }
        return !1;
      },
      getDifficultyDisplayName: function (e) {
        return this.get(`tra.custom_game_bot_skill_level_${e.toLowerCase()}`);
      },
      areTeamsImbalanced: function () {
        return this.get('team100.length') !== this.get('team200.length');
      },
      getSubCategoryIndex: function (e, t) {
        const a = this.get('subcategories');
        for (let n = 0; n < a.length; n++) {
          const o = a[n];
          if (o.get('mapId') === e && o.get('gameMode') === t) return n;
        }
        return -1;
      },
      resetSelectedSubcategory: function () {
        const e = this.get('subcategories');
        for (let t = 0; t < e.length; t++) {
          const a = e[t],
            n = a.get('queueAvailability');
          if ('available' === c.GAME_AVAILABILITY_TYPES[n]) {
            this.selectSubcategory(t);
            break;
          }
        }
      },
      selectSubcategoryByMapMode: function (e, t) {
        const a = this.getSubCategoryIndex(e, t);
        0 <= a && this.selectSubcategory(a);
      },
      subCategoryExists: function (e, t) {
        const a = this.getSubCategoryIndex(e, t);
        return !!(0 <= a);
      },
      selectSubcategory: function (e) {
        const t = this.get('subcategories'),
          a = t[e];
        if (!a) return !1;
        const n = t[this.get('playerInputs.subcategoryIndex')],
          o = this.get('playerInputs.numPlayersPerTeam'),
          i = n.get('numPlayersPerTeam'),
          s = a.get('numPlayersPerTeam');
        (o === i || o > s) && this.set('playerInputs.numPlayersPerTeam', s);
        const l = a.get('mutators'),
          r = this.get('playerInputs.mutatorId');
        if (0 < l.length && !l.findBy('id', r)) {
          const e = l[0].get('id');
          this.set('playerInputs.mutatorId', e),
            this.set('playerInputs.queueId', this.getQueueId(e));
        }
        return this.set('playerInputs.subcategoryIndex', e), !0;
      },
      getQueueId: function (e) {
        return g.TFT_CUSTOM_QUEUE_IDS[e] || g.INVALID_QUEUE_ID;
      },
      generateCustomGamePayload: function () {
        const e = this.get('playerInputs.subcategoryIndex'),
          t = this.get('subcategories');
        if (!t[e])
          return (
            f(
              `Tried to create custom game with invalid subcategory index: ${e}`,
            ),
            !1
          );
        const a = t[e];
        return this._gameIsPracticeTool(a.get('gameMode'))
          ? this._generatePracticeToolPayload(a)
          : this._generateCustomGamePayload(a);
      },
      _generateCustomGamePayload: function (e) {
        let t = this.get('playerInputs.password').trim();
        '' === t && (t = null);
        const a = this.get('playerInputs.queueId') || g.INVALID_QUEUE_ID;
        return {
          customGameLobby: {
            configuration: {
              gameMode: e.get('gameMode'),
              gameMutator: '',
              gameServerRegion: this.get('playerInputs.gameServerRegion'),
              mapId: e.get('mapId'),
              mutators: { id: this.get('playerInputs.mutatorId') },
              spectatorPolicy: this.get('playerInputs.spectatorType'),
              teamSize: this.get('playerInputs.numPlayersPerTeam'),
            },
            lobbyName:
              this.get('playerInputs.name') || this.get('defaultGameName'),
            lobbyPassword: t,
          },
          isCustom: a === g.INVALID_QUEUE_ID,
          queueId: a,
        };
      },
      _generatePracticeToolPayload: function () {
        return {
          customGameLobby: {
            configuration: {
              gameMode: 'PRACTICETOOL',
              gameMutator: '',
              gameServerRegion: this.get('playerInputs.gameServerRegion'),
              mapId: 11,
              mutators: { id: 1 },
              spectatorPolicy: 'AllAllowed',
              teamSize: 1,
            },
            lobbyName: this.get('defaultGameName'),
            lobbyPassword: null,
          },
          isCustom: !0,
        };
      },
      _gameIsPracticeTool: function (e) {
        return 'PRACTICETOOL' === e;
      },
      changeQueueToCustom: function () {
        return new l.default((e, t) => {
          if (this.get('nameError')) return t('nameError');
          const a = this.generateCustomGamePayload();
          if (!1 === a) return t();
          const n = 'v2/lobby';
          h(
            `Creating custom-game using /lol-lobby/${n} endpoint: ${(0,
            i.default)(a)}`,
          ),
            this.get('api.lobby')
              .post(n, a)
              .then(
                () => {
                  e();
                },
                (e) => {
                  const a = this.getErrorTypeFromCreateResponse(e);
                  t(a);
                },
              );
        });
      },
      getErrorTypeFromCreateResponse: function (e) {
        let t = 500;
        e && e.status && (t = e.status);
        const a = c.CUSTOM_GAME_ERROR_CODES[t]
          ? c.CUSTOM_GAME_ERROR_CODES[t]
          : 'UnknownException';
        return (
          f('Creating custom game received error:', a, t, e),
          'GameNameNotUniqueException' === a &&
            this.set('nameError', 'duplicate'),
          'InvalidCustomGameNameException' === a &&
            this.set('nameError', 'invalid'),
          a
        );
      },
      enterChampSelect: function () {
        this.set('preventTeamChanges', !0);
        return this.get('api.lobby').post(
          '/v1/lobby/custom/start-champ-select',
        );
      },
      teamToString: function (e) {
        let t = '';
        return (
          1 === e || '100' === e
            ? (t = 'one')
            : (2 === e || '200' === e) && (t = 'two'),
          t
        );
      },
      teamToStringQueue: function (e) {
        return 1 === e || '100' === e
          ? 'TEAM1'
          : 2 === e || '200' === e
          ? 'TEAM2'
          : '';
      },
      teamToStringId: function (e) {
        let t = '';
        return (
          1 === e || 'one' === e
            ? (t = '100')
            : (2 === e || 'two' === e) && (t = '200'),
          t
        );
      },
      switchTeams: function (e) {
        this.set('isSwitchingTeamsOrSpectating', !0);
        const t = this.get('isCustom'),
          a = t ? this.teamToString(e) : this.teamToStringQueue(e);
        if ((h(`Current player switching to team ${a}`), 0 !== a.length)) {
          const e = t
            ? `/v1/lobby/custom/switch-teams?team=${a}`
            : `/v2/lobby/team/${a.toUpperCase()}`;
          return this.get('api.lobby')
            .post(e)
            .then(() => {
              this.set('isSwitchingTeamsOrSpectating', !1);
            })
            .catch((t) => {
              t.text &&
                f(
                  'an error has occurred when switching teams',
                  JSON.parse(t.text),
                ),
                this.set('isSwitchingTeamsOrSpectating', !1);
            });
        }
      },
      joinSpectators: function () {
        this.set('isSwitchingTeamsOrSpectating', !0),
          h('Current player switching to spectator');
        const e = this.get('isCustom')
          ? '/v1/lobby/custom/switch-teams?team=spectator'
          : '/v2/lobby/team/SPECTATOR';
        return this.get('api.lobby')
          .post(e)
          .then(() => {
            this.set('isSwitchingTeamsOrSpectating', !1);
          })
          .catch((t) => {
            t.text &&
              f(
                'an error has occurred when moving to spectator',
                JSON.parse(t.text),
              ),
              this.set('isSwitchingTeamsOrSpectating', !1);
          });
      },
      findMinPlayersForMap: function (e) {
        let t = 1;
        const a = this.get('gameMapMinPlayers');
        if (e && a && 0 < a.length) {
          const n = a.findBy('gameMapId', e);
          n && n.minPlayers && (t = n.minPlayers);
        }
        return t;
      },
      addBot: function (e, t, a) {
        const n = this.teamToStringId(e);
        if (0 !== n.length) {
          const e = a ? a : 'NONE';
          this._createTempBot(n, t, e);
          return this.get('api.lobby')
            .post('/v1/lobby/custom/bots', {
              botDifficulty: e,
              championId: t,
              teamId: n,
            })
            .catch((t) => {
              t.text &&
                f(
                  'an error has occurred when adding a bot',
                  JSON.parse(t.text),
                ),
                this._removeTempBots();
            });
        }
      },
      changeBot: function (e, t, a, n) {
        const o = `/v1/lobby/custom/bots/${e}`,
          i = this.teamToStringId(t);
        if (0 !== i.length) {
          const t = n ? n : 'NONE';
          this._removeBotByBotId(e), this._createTempBot(i, a, t);
          return this.get('api.lobby')
            .post(o, { botDifficulty: t, championId: a, teamId: i })
            .catch((t) => {
              t.text &&
                f(
                  'an error has occurred when changing a bot',
                  JSON.parse(t.text),
                ),
                this._removeTempBots();
            });
        }
      },
      removeBot: function (e) {
        this._removeBotByBotId(e);
        const t = `/v1/lobby/custom/bots/${e}`;
        return this.get('api.lobby')
          .delete(t)
          .catch((t) => {
            t.text &&
              f(
                'an error has occurred when removing a bot',
                JSON.parse(t.text),
              );
          });
      },
      _createTempBot: function (e, t, a) {
        const n = r.Ember.Object.create({
          summonerId: -1,
          botChampionId: t,
          botDifficulty: a,
          isBot: !0,
        });
        '100' === e
          ? this.get('team100').addObject(n)
          : this.get('team200').addObject(n);
      },
      _removeBotByBotId: function (e) {
        const t = ['team100', 'team200'];
        for (let a = 0; a < t.length; a++) {
          const n = this.get(t[a]),
            o = n.findBy('botId', e);
          if (o) return void n.removeObject(o);
        }
      },
      _removeTempBots: function () {
        const e = ['team100', 'team200'];
        for (let t = 0; t < e.length; t++) {
          const a = this.get(e[t]);
          a.forEach((e) => {
            -1 === e.get('summonerId') && e.get('isBot') && a.removeObject(e);
          });
        }
      },
      getSubcategoryMinLevel: function (e, t) {
        const a = this.getSubCategoryIndex(e, t);
        if (0 <= a) {
          const e = this.get('subcategories'),
            t = e[a];
          if (t) return t.get('minLevel');
        }
        return 1;
      },
      _updatePlayerSelectedRegion: function (e) {
        const t = this.get('playerInputs.gameServerRegion');
        !t ||
          (e &&
            e.some(function (e) {
              return e === t;
            })) ||
          this.set('playerInputs.gameServerRegion', ''),
          !this.get('playerInputs.gameServerRegion') &&
            e &&
            e.length &&
            this.set('playerInputs.gameServerRegion', e[0]);
      },
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(115),
      r = n(l),
      c = a(318),
      m = n(c),
      d = a(3),
      p = n(d);
    const u = (0, p.default)('plugin:parties:custom-game-list:warn'),
      g = (0, p.default)('plugin:parties:custom-game-list:error'),
      b = (0, s.emberDataBinding)({
        Ember: s.Ember,
        websocket: (0, s.getProvider)().getSocket(),
        logPrefix: 'service:custom-game-list',
        basePaths: { lobby: '/lol-lobby' },
        boundProperties: {
          tournamentShortCodesEnabled:
            '/lol-platform-config/v1/namespaces/ClientSystemStates/tournamentShortCodesEnabled',
        },
      });
    e.exports = s.Ember.Service.extend(s.Ember.Evented, b, {
      selectedCustomGame: null,
      modalManager: s.UIKit.getModalManager(),
      customGameListDataBindingSetup: !1,
      customGames: s.Ember.A(),
      noSelectedGame: s.Ember.computed.empty('selectedCustomGame'),
      isSelectedCustomGameFull: s.Ember.computed(
        'selectedCustomGame',
        'selectedCustomGame.filledPlayerSlots',
        'selectedCustomGame.maxPlayerSlots',
        function () {
          const e = this.get('selectedCustomGame.maxPlayerSlots'),
            t = this.get('selectedCustomGame.filledPlayerSlots');
          return t >= e;
        },
      ),
      isSelectedCustomGameSpectatorsFull: s.Ember.computed(
        'selectedCustomGame',
        'selectedCustomGame.filledSpectatorSlots',
        'selectedCustomGame.maxSpectatorSlots',
        function () {
          const e = this.get('selectedCustomGame.maxSpectatorSlots'),
            t = this.get('selectedCustomGame.filledSpectatorSlots');
          return t >= e;
        },
      ),
      confirmButtonText: s.Ember.computed(
        'selectedCustomGame',
        'selectedCustomGame.filledPlayerSlots',
        'selectedCustomGame.maxPlayerSlots',
        'selectedCustomGame.filledSpectatorSlots',
        'selectedCustomGame.maxSpectatorSlots',
        'tra.custom_game_join',
        'tra.custom_game_spectate',
        function () {
          const e = !this.get('selectedCustomGame'),
            t = !this.get('isSelectedCustomGameFull');
          return e || t
            ? this.get('tra.custom_game_join')
            : this.get('isSelectedCustomGameSpectatorsFull')
            ? this.get('tra.custom_game_join')
            : this.get('tra.custom_game_spectate');
        },
      ),
      confirmButtonEnabled: s.Ember.computed.bool('selectedCustomGame'),
      joinCustomGame: function (e) {
        let t;
        return e
          ? e.id || e.partyId
            ? ((t = e.hasPassword
                ? this.promptPasswordModal()
                : i.default.resolve()),
              t.then((t) => {
                const a = { asSpectator: !!e.spectator };
                !t || (a.password = t),
                  u(
                    `JOINING CUSTOM GAME FROM LIST (${
                      e.id ? e.id : e.partyId
                    })`,
                  );
                const n = e.partyId
                  ? `/v2/party/${e.partyId}/join`
                  : `/v1/custom-games/${e.id}/join`;
                return (0, s.dataBinding)('lol-lobby')
                  .post(n, a)
                  .catch((e) => {
                    const t = [401, 403, 404, 432, 438, 500].includes(e.status)
                      ? this.get(`tra.custom_game_list_error_${e.status}`)
                      : this.get(`tra.custom_game_list_error_generic`);
                    return (
                      r.default.promptJoinErrorModal(t), i.default.reject(e)
                    );
                  });
              }))
            : void g('joinCustomGame options needs to have an id defined')
          : void g('joinCustomGame options not defined');
      },
      createCustomListBind: function () {
        const e = { objectTypes: { '[]': m.default }, root: this };
        this.dataBindProperty('lobby', '/v1/custom-games', 'customGames', e),
          this.set('customGameListDataBindingSetup', !0);
      },
      refreshGameList: function () {
        const e = this.get('customGameListDataBindingSetup');
        return !1 === e
          ? (this.createCustomListBind(), i.default.resolve())
          : (0, s.dataBinding)('lol-lobby')
              .post('/v1/custom-games/refresh')
              .catch(function () {
                return i.default.reject();
              });
      },
      joinWithTournamentCode: function (e) {
        if (!e)
          return i.default.reject(
            new Error('No tournament code provided to joinWithTournamentCode'),
          );
        const t =
            /[A-Z]{2,4}[0-9a-fA-F]{5}-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/g,
          a = t.test(e);
        return a
          ? (0, s.dataBinding)('lol-lobby')
              .post(`/v1/tournaments/${e}/join`)
              .catch(function (t) {
                return i.default.reject(t);
              })
          : i.default.reject(new Error('Badly formatted tournament code'));
      },
      triggerShowParty: function () {
        this.trigger('showParty');
      },
      promptPasswordModal: function () {
        const e = document.createElement('lol-uikit-flat-input'),
          t = document.createElement('lol-uikit-content-block');
        (e.innerHTML = `<input type="password" id="custom-game-join-password-input"></input>`),
          t.setAttribute('type', 'dialog-small'),
          (t.innerHTML = `<h4>${this.get(
            'tra.custom_game_list_required_password_header',
          )}</h4>
       <p>${this.get('tra.custom_game_list_required_password_text')}</p>
       <hr class="heading-spacer">`),
          t.appendChild(e);
        const a = s.UIKit.getModalManager().add({
            type: 'DialogConfirm',
            data: {
              contents: t,
              acceptText: this.get(
                'tra.custom_game_list_required_password_join',
              ),
              declineText: this.get(
                'tra.custom_game_list_required_password_cancel',
              ),
              closeButton: !1,
            },
          }),
          n = a.domNode.querySelector('#custom-game-join-password-input');
        return (
          n && n.focus(),
          a.acceptPromise.then(function () {
            const t = e.querySelector(
              'input[id=custom-game-join-password-input]',
            ).value;
            return i.default.resolve(t);
          })
        );
      },
    });
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(0);
    const o = n.Ember.Object.extend({
      mapName: n.Ember.computed(
        'mapId',
        'root.tra.game_select_map_name_11',
        'root.tra.game_select_map_name_10',
        'root.tra.game_select_map_name_12',
        'root.tra.game_select_map_name_8',
        function () {
          const e = this.get('mapId'),
            t = this.get(`root.tra.game_select_map_name_${e}`);
          return t;
        },
      ),
    });
    t.default = o;
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(0);
    t.default = n.Ember.Service.extend({
      isConnected: n.Navigation.isConnectedToServer,
      init() {
        this._super(...arguments),
          n.Navigation.subscribe('isConnectedToServer', (e) => {
            this.set('isConnected', e);
          });
      },
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(5),
      r = n(l),
      c = a(110),
      m = n(c);
    e.exports = s.Ember.Service.extend(r.default, {
      lobbiesService: s.Ember.inject.service('lobbies'),
      summonerService: s.Ember.inject.service('summoner'),
      chatService: s.Ember.inject.service('chat'),
      currentPlayerCanInvite: s.Ember.computed.alias(
        'lobbiesService.currentPlayerCanInvite',
      ),
      isLobbyFull: s.Ember.computed.alias('lobbiesService.isLobbyFull'),
      isCustomUI: s.Ember.computed.alias('lobbiesService.isCustomUI'),
      setupCallbacks: s.Ember.on('init', function () {
        m.default._registerCanInviteCallback(this.canInvitePlayer.bind(this)),
          m.default._registerInviteCallback(this.invitePlayer.bind(this));
      }),
      canInvitePlayer: function (e) {
        return (
          !!(e && this.get('currentPlayerCanInvite')) &&
          !(this.get('isLobbyFull') && this.get('isCustomUI')) &&
          !this.playerInParty(e)
        );
      },
      invitePlayer: function (e, t = null) {
        return new i.default((a, n) => {
          if (!this.get('currentPlayerCanInvite'))
            return void n(new Error('CANNOT_INVITE'));
          this.playerInParty(e) && n(new Error('PLAYER_IN_PARTY'));
          let o;
          (o = t
            ? i.default.resolve({ displayName: t })
            : this.get('summonerService').getSummoner(e)),
            o
              .then(
                (a) => ((t = a.displayName), this.checkIfPlayerAvailable(e, t)),
              )
              .then(() => this.get('lobbiesService').invitePlayer(e))
              .then(() => {
                a();
              })
              .catch(() => {
                n(new Error('COULD_NOT_INVITE'));
              });
        });
      },
      playerInParty: function (e) {
        let t = !1;
        if (e) {
          const a = this.get('lobbiesService.currentPartyMembers');
          if (!a || !a.length) return !1;
          t = !!a.findBy('summonerId', e);
        }
        return t;
      },
      checkIfPlayerAvailable: function (e, t) {
        return new i.default((a, n) => {
          e || n();
          const o = this.get('chatService'),
            i = o.isFriend(e);
          if (!i) return void a();
          const s = o.getFriend(e),
            l =
              s &&
              o.me &&
              o.me.product === s.product &&
              o.me.platformId === s.platformId;
          l && -1 !== ['chat', 'away'].indexOf(s.availability)
            ? a()
            : (this.showFriendNotAvailableToast(t), n());
        });
      },
      showFriendNotAvailableToast: function (e) {
        const t = this.get('tra.formatString'),
          a = t('parties_player_ineligible_to_join', { player: e });
        this.showToast(a, 'invite-eligibility');
      },
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(70),
      i = n(o),
      s = a(0),
      l = a(322),
      r = n(l);
    const c = (0, s.emberDataBinding)({
      Ember: s.Ember,
      websocket: (0, s.getProvider)().getSocket(),
      logPrefix: 'parties:service:tft',
      basePaths: { tft: '/lol-tft', missions: '/lol-missions' },
      boundProperties: {
        battlepass: {
          api: 'tft',
          path: '/v2/tft/battlepass',
          default: { milestones: [], bonuses: [], activeMilestone: {} },
        },
      },
    });
    e.exports = s.Ember.Service.extend(c, {
      activeMilestonesProgress: s.Ember.computed(
        'battlepass.totalPointsEarned',
        'battlepass.milestones.@each.{isPaid,isLocked,pointsEarnedForMilestone,missionId,status,state}',
        'battlepass.bonuses.@each.{isPaid,isLocked,pointsEarnedForMilestone,missionId,status,state}',
        function () {
          const e = this.get('battlepass.milestones'),
            t = this.get('battlepass.bonuses'),
            a = s.lodash.findIndex(e, ['state', 'ACTIVE']);
          if (0 > a) return null;
          const n = s.Ember.A([e[a]]);
          return 0 < a && n.unshift(e[a - 1]), n;
        },
      ),
      claimRewards(e) {
        const t = e.rewards,
          a = e.missionId,
          n = new i.default(t.map((e) => e.rewardGroup));
        if (1 === n.size) {
          const e = { rewardGroups: [t[0].rewardGroup] };
          this.get('api.missions').put('/v1/player/' + a, e);
        }
        r.default.celebrate(e);
      },
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return c.ComponentFactory.create({ type: d, data: e });
    }
    function o(e, t, a = !1) {
      return c.Ember.Object.create({ id: e, rewards: t, selectable: a });
    }
    function i(e) {
      const t = new r.default(e.map((e) => e.rewardGroup));
      return 1 < t.size;
    }
    function s(e, t) {
      const a = e.find((e) => e.isSelected),
        n = { rewardGroups: [a.rewardGroup] };
      return (0, c.dataBinding)('/lol-missions').put('/v1/player/' + t, n);
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var l = a(70),
      r = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(l),
      c = a(0);
    const m = c.UIKit.getVignetteCelebrationManager(),
      d = 'TftRewardCelebration';
    t.default = {
      celebrate: function ({
        id: e,
        titleSubtext: t,
        rewards: a,
        missionId: l,
      }) {
        const r = i(a),
          d = r
            ? 'tft_celebration_button_text_multi'
            : 'tft_celebration_button_text';
        a = a.map((e) => c.Ember.Object.create(e));
        const p = o(e, a, r),
          u = n(p);
        m.add({
          id: e,
          data: {
            header: {
              title: c.tra.get('tft_celebration_title'),
              titleSubtext: t,
            },
            nextButtonEnabled: !r,
            nextButtonText: c.tra.get(d),
            backgroundImageUrl: '/fe/lol-tft/celebration-backdrop.jpg',
          },
          height: 'SMALL',
          content: u,
          onRemove: () => {
            r && s(a, l), u.onRemove();
          },
        });
      },
      isSelectable: i,
      updateRewardSelection: s,
      createCelebrationState: o,
      createCelebrationApplication: n,
    };
  },
  function (e, t, a) {
    'use strict';
    var n = a(112),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n),
      i = a(0);
    const s = (e) =>
        e.reduce(
          (e, t) =>
            (0, o.default)(
              {},
              e,
              t.items.reduce((e, t) => {
                const a = (t.upgrades || []).reduce(
                  (e, t) =>
                    (0, o.default)({}, e, { [t.itemId]: t.loadoutsIcon }),
                  {},
                );
                return (0, o.default)({}, e, a, { [t.itemId]: t.loadoutsIcon });
              }, {}),
            ),
          {},
        ),
      l = (0, i.emberDataBinding)({
        Ember: i.Ember,
        websocket: (0, i.getProvider)().getSocket(),
        logPrefix: 'parties:service:tft-cosmetics',
        basePaths: { cosmetics: '/lol-cosmetics' },
        boundProperties: {
          companions: {
            api: 'cosmetics',
            path: '/v1/inventories/tft/companions',
          },
          mapSkins: { api: 'cosmetics', path: '/v1/inventories/tft/map-skins' },
          damageSkins: {
            api: 'cosmetics',
            path: '/v1/inventories/tft/damage-skins',
          },
        },
      });
    e.exports = i.Ember.Service.extend(l, {
      companionIconUrls: i.Ember.computed('companions.groups', function () {
        return s(this.get('companions.groups') || []);
      }),
      mapSkinIconUrls: i.Ember.computed('mapSkins.groups', function () {
        return s(this.get('mapSkins.groups') || []);
      }),
      damageSkinIconUrls: i.Ember.computed('damageSkins.groups', function () {
        return s(this.get('damageSkins.groups') || []);
      }),
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    const o = (0, n.emberDataBinding)({
      Ember: n.Ember,
      websocket: (0, n.getProvider)().getSocket(),
      logPrefix: 'service:social-leaderboard',
      basePaths: { socialLeaderboard: '/lol-social-leaderboard' },
    });
    e.exports = n.Ember.Service.extend(o, {
      getSocialLeaderboardData: function (e) {
        const t = `/v1/social-leaderboard-data?queueType=${e}`;
        return this.get('api.socialLeaderboard').get(t, { skipCache: !0 });
      },
      getSocialLeaderboardNextUpdateTime: function (e) {
        const t = `/v1/leaderboard-next-update-time?queueType=${e}`;
        return this.get('api.socialLeaderboard').get(t, { skipCache: !0 });
      },
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    const o = (0, n.getProvider)().getSocket(),
      i = 'LOL_MOBA',
      s = (0, n.emberDataBinding)({
        Ember: n.Ember,
        websocket: o,
        logPrefix: 'service:challenges',
        basePaths: { challenges: '/lol-challenges' },
        boundProperties: {
          localPlayerChallengesData: {
            api: 'challenges',
            path: `/v1/challenges/${i}/local-player`,
            default: [],
          },
          localPlayerSummaryData: {
            api: 'challenges',
            path: `/v1/summary-player-data/${i}/local-player`,
            default: [],
          },
          enabledQueues: {
            api: 'challenges',
            path: '/v1/available-queue-ids',
            default: [],
          },
        },
      });
    e.exports = n.Ember.Service.extend(s);
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(5),
      s = n(i),
      l = a(1),
      r = n(l),
      c = a(51),
      m = n(c),
      d = a(6),
      p = n(d),
      u = a(3),
      g = n(u);
    a(327);
    const b = o.EmberAddons.EmberLifeline.RunMixin,
      h = (0, g.default)('plugin:parties:root-component:warn'),
      f = (0, g.default)('plugin:parties:root-component:log');
    e.exports = o.Ember.Component.extend(b, m.default, s.default, r.default, {
      classNames: ['parties-view'],
      classNameBindings: [
        'isInQueue:in-matchmaking-search',
        'gameflowObserver',
        'loginConnectedObserver',
        'invitesService.currentPlayerCanInvite',
      ],
      showingState: null,
      selected: null,
      queues: null,
      _updatedInvitedBanners: !1,
      _lastQueueId: null,
      _lastPartyId: null,
      _playedSoundQueueId: null,
      lobbyIsDisabled: !1,
      _positionSelectorEmberApp: null,
      _positionSelectorData: null,
      ModalManager: o.UIKit.getModalManager(),
      matchmakingService: o.Ember.inject.service('matchmaking'),
      lobbiesService: o.Ember.inject.service('lobbies'),
      eligibilityService: o.Ember.inject.service('queue-eligibility'),
      customGamesService: o.Ember.inject.service('custom-games'),
      gameflowService: o.Ember.inject.service('gameflow'),
      invitesService: o.Ember.inject.service('invites'),
      assets: o.Ember.inject.service(),
      layout: a(328),
      isCustom: o.Ember.computed.alias('lobbiesService.isCustom'),
      isInQueue: o.Ember.computed.alias('matchmakingService.isInQueue'),
      isCustomUI: o.Ember.computed.alias('customGamesService.isCustomUI'),
      isShowingParty: o.Ember.computed.alias('showingState.isShowingParty'),
      isShowingGameSelect: o.Ember.computed.alias(
        'showingState.isShowingGameSelect',
      ),
      queueId: o.Ember.computed.alias('lobbiesService.queueId'),
      partyId: o.Ember.computed.alias('lobbiesService.partyId'),
      isTFT: o.Ember.computed.alias('lobbiesService.isTFT'),
      isNotChampSelect: o.Ember.computed.not('gameflowService.isChampSelect'),
      isLeader: o.Ember.computed.alias(
        'lobbiesService.isCurrentPlayerPartyLeader',
      ),
      changeGameTypeSound:
        '/fe/lol-parties/sfx-parties-trans-change-game-type.ogg',
      platformConfigSingleton: p.default,
      partiesV2Enabled: o.Ember.computed.alias(
        'platformConfigSingleton.partiesV2Enabled',
      ),
      shouldUsePartiesV2Components: o.Ember.computed(
        'partiesV2Enabled',
        'isTFT',
        'isCustom',
        function () {
          return (
            this.get('partiesV2Enabled') &&
            !this.get('isTFT') &&
            !this.get('isCustom')
          );
        },
      ),
      init() {
        this._super(...arguments),
          (this._initialPerfMetricSent = !1),
          o.Telemetry.startTracingEvent('parties-init-ember-app-settle');
      },
      didRender() {
        this._super(...arguments);
        this._initialPerfMetricSent ||
          this.debounceTask('_endPerformanceMeasurement', 250);
      },
      _endPerformanceMeasurement() {
        o.Telemetry.endTracingEvent('parties-init-ember-app-settle'),
          (this._initialPerfMetricSent = !0);
      },
      queueIdObserver: o.Ember.on(
        'init',
        o.Ember.observer('queueId', 'isCustom', function () {
          o.Ember.run.once(this, function () {
            this._updateSelectionFromCustomLobby();
          });
        }),
      ),
      queueTransitionObserver: o.Ember.on(
        'init',
        o.Ember.observer('partyId', 'queueId', function () {
          o.Ember.run.once(this, function () {
            this.get('isLeader') ||
              this._partyMemberTransition(
                this.get('partyId'),
                this.get('queueId'),
              );
          });
        }),
      ),
      isDisconnected: !1,
      loginConnectedObserver: o.Ember.computed(
        'eligibilityService.loginConnected',
        function () {
          const e = this.get('eligibilityService.loginConnected');
          !0 === e
            ? this.get('isDisconnected') &&
              (h('Parties plugin thinks we reconnected!'),
              this.set('isDisconnected', !1),
              this.get('eligibilityService').refreshEligibilities())
            : !1 === e && this.handleDisconnect();
        },
      ),
      handleDisconnect: function () {
        this.set('isDisconnected', !0);
        this.get('isShowingParty') ||
          (this.get('lobbiesService.inLobby')
            ? (h('Parties plugin disconnected so returning to parties screen'),
              this.get('showingState').showParty())
            : this.get('isShowingGameSelect') &&
              (h('Parties plugin disconnected so hiding game select screen'),
              this.hideOurselves()));
      },
      refreshEligibilityObserver: o.Ember.on(
        'init',
        o.Ember.observer(
          'isShowingGameSelect',
          'lobbiesService.gameSelectEligibilityHash',
          function () {
            o.Ember.run.once(this, function () {
              const e = this.get('lobbiesService.gameSelectEligibilityHash');
              f(`refreshEligibilityObserver: updated party hash: ${e}`),
                this.checkIfNeedToRefreshEligibility();
            });
          },
        ),
      ),
      checkIfNeedToRefreshEligibility: function () {
        const e = this.get('isShowingGameSelect');
        e && this.get('eligibilityService').refreshEligibilities();
      },
      debugToolsEnabled: o.Ember.computed(
        'lobbiesService.queues.[]',
        function () {
          const e = this.get('lobbiesService.queues');
          if (e && 0 < e.length) {
            const t = e.findBy('id', 432);
            return t && 'Available' === t.queueAvailability;
          }
          return !1;
        },
      ),
      handleWillDestroyElement: o.Ember.on('willDestroyElement', function () {
        this._destroyInviteDialog();
      }),
      gameflowObserver: o.Ember.computed(
        'gameflowService.phase',
        '_inviteModal',
        function () {
          !this.get('gameflowService.isLobby') &&
            this.get('_inviteModal') &&
            this.get('ModalManager').remove(this.get('_inviteModal'));
        },
      ),
      _destroyInviteDialog: function () {
        const e = this.get('_inviteModal');
        e &&
          e.domNode &&
          e.domNode
            .querySelector('.parties-invite-dialog')
            .dispatchEvent(new Event('destroyComponent')),
          this.set('_inviteDialogComponent', null);
      },
      _getPartiesInviteDialog: function () {
        let e = this.get('_inviteDialogComponent');
        if (!e)
          (e = o.ComponentFactory.create('PartiesInviteDialog')),
            this.set('_inviteDialogComponent', e);
        else {
          var t = e;
          const a = t.domNode,
            n = a.querySelector('.parties-invite-dialog');
          n && n.dispatchEvent(new Event('initInviteDialog'));
        }
        return this.get('_inviteDialogComponent');
      },
      showInviteModal: function () {
        const e = this._getPartiesInviteDialog(),
          t = this.get('tra.invite_dialog_send_invites_button');
        return e.renderPromise.then(() => {
          const a = e.domNode,
            n = this.get('ModalManager').add({
              type: 'DialogConfirm',
              data: { contents: a, acceptText: t, closeButton: !0 },
            });
          return (
            a.addEventListener('disableacceptbutton', (e) => {
              n.disableAcceptButton(), e.stopPropagation();
            }),
            a.addEventListener('enableacceptbutton', (e) => {
              n.enableAcceptButton(), e.stopPropagation();
            }),
            a.addEventListener('closeinvitemodal', (e) => {
              this.get('ModalManager').remove(n), e.stopPropagation();
            }),
            n.domNode.classList.add('parties-invite-dialog-modal'),
            n.acceptPromise
              .then(() => {
                a.querySelector('.parties-invite-dialog').dispatchEvent(
                  new Event('sendInvitesClicked'),
                );
              })
              .catch(() => {}),
            n
          );
        });
      },
      _updateSelectionFromCustomLobby: function () {
        const e = this.get('lobbiesService.gameConfig'),
          t = this.get('queueId');
        e &&
          (this.get('lobbiesService.isCustom')
            ? (this.set('selected.isCreatingCustomGame', !0),
              this.set('selected.mapId', e.get('mapId')),
              this.set('selected.gameMode', e.get('gameMode')))
            : o.lodash.isNumber(t) &&
              (this.set('selected.queueId', t),
              this.set('selected.isCreatingCustomGame', !1)));
      },
      _partyMemberTransition: function (e, t) {
        return o.lodash.isNumber(t) && -1 !== t && e
          ? e === this.get('_lastPartyId')
            ? void (this.get('_lastQueueId') !== t && this._changedQueue(t))
            : void this._changedParty(e, t)
          : void this._clearPartyCache();
      },
      _clearPartyCache: function () {
        this.set('_lastQueueId', null),
          this.set('_lastPartyId', null),
          this.set('_playedSoundQueueId', null);
      },
      _changedParty: function (e, t) {
        this.set('_lastPartyId', e),
          this.set('_lastQueueId', t),
          this.set('_playedSoundQueueId', null),
          this.get('showingState').showParty();
      },
      _changedQueue: function (e) {
        this._playQueueTransitionSound(e), this.set('_lastQueueId', e);
      },
      _playQueueTransitionSound: function (e) {
        this.get('_playedSoundQueueId') !== e &&
          (this.playSound(this.get('changeGameTypeSound')),
          this.set('_playedSoundQueueId', e));
      },
      actions: {
        showGameSelect: function () {
          this.set('showingState.showVerticalAnimation', !0),
            this.get('showingState').showGameSelect();
        },
        showInviteModal: function () {
          this.showInviteModal().then((e) => {
            this.set('_inviteModal', e);
          });
        },
        cachePositionSelector: function (e, t) {
          this.set('_positionSelectorEmberApp', e),
            this.set('_positionSelectorData', t);
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '08RMtRLF',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\root-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["parties-background"],null,[["selected","showingState"],[["get",["selected"]],["get",["showingState"]]]]],false],["text","\\n"],["append",["helper",["parties-ambience"],null,[["selected","showingState"],[["get",["selected"]],["get",["showingState"]]]]],false],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-content"],["flush-element"],["text","\\n\\n"],["block",["if"],[["get",["isCustomUI"]]],null,11,9],["text","\\n  "],["append",["helper",["game-select-root"],null,[["showingState","selected","queues"],[["get",["showingState"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n\\n  "],["append",["unknown",["parties-notifications"]],false],["text","\\n\\n"],["block",["if"],[["get",["debugToolsEnabled"]]],null,0],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["text","\\n  "],["comment"," here are some computeds we need in a template somewhere, so they update "],["text","\\n  "],["append",["unknown",["customGamesService","gameIdObserver"]],false],["text","\\n  "],["append",["unknown",["customGamesService","gameflowPhaseObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["parties-debug-tools"],null,[["selected","showingState"],[["get",["selected"]],["get",["showingState"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["parties-header"],null,[["showingState","selected","isInQueue","queues"],[["get",["showingState"]],["get",["selected"]],["get",["isInQueue"]],["get",["queues"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["v2-header"],null,[["showingState","selected","isInQueue","queues","cancelFlow"],[["get",["showingState"]],["get",["selected"]],["get",["isInQueue"]],["get",["queues"]],"showGameSelect"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldUsePartiesV2Components"]]],null,2,1]],"locals":[]},{"statements":[["text","        "],["append",["helper",["parties-root"],null,[["showingState","selected","showGameSelect","isInQueue","showInviteModal","positionSelectorEmberApp","positionSelectorData","cachePositionSelector"],[["get",["showingState"]],["get",["selected"]],"showGameSelect",["get",["isInQueue"]],"showInviteModal",["get",["_positionSelectorEmberApp"]],["get",["_positionSelectorData"]],["helper",["action"],[["get",[null]],"cachePositionSelector"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["v2-parties-root"],null,[["showingState","selected","showGameSelect","isInQueue","showInviteModal","partiesV2Enabled"],[["get",["showingState"]],["get",["selected"]],"showGameSelect",["get",["isInQueue"]],"showInviteModal",["get",["partiesV2Enabled"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldUsePartiesV2Components"]]],null,5,4]],"locals":[]},{"statements":[["text","      "],["append",["helper",["tft-lobby"],null,[["showingState","selected","showGameSelect","isInQueue","showInviteModal"],[["get",["showingState"]],["get",["selected"]],"showGameSelect",["get",["isInQueue"]],"showInviteModal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","empty-header-spacer"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isShowingParty"]]],null,8],["block",["if"],[["get",["isTFT"]]],null,7,6],["block",["if"],[["get",["isShowingParty"]]],null,3]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","empty-header-spacer"],["flush-element"],["close-element"],["text","\\n      "],["append",["helper",["parties-header"],null,[["showingState","selected","isInQueue","queues"],[["get",["showingState"]],["get",["selected"]],["get",["isInQueue"]],["get",["queues"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isShowingParty"]]],null,10],["text","    "],["append",["helper",["custom-game-root"],null,[["selected","showingState","showInviteModal"],[["get",["selected"]],["get",["showingState"]],"showInviteModal"]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(1),
      s = n(i),
      l = a(330),
      r = n(l),
      c = a(15),
      m = n(c);
    e.exports = o.Ember.Component.extend(s.default, {
      gameflowService: o.Ember.inject.service('gameflow'),
      assets: o.Ember.inject.service(),
      classNameBindings: ['stateMachine'],
      isShowingLobby: !0,
      mapId: o.Ember.computed.readOnly('selected.mapId'),
      gameMode: o.Ember.computed.readOnly('selected.gameMode'),
      assetMutator: o.Ember.computed.readOnly('selected.assetMutator'),
      queueId: o.Ember.computed.readOnly('selected.queueId'),
      insertListener: o.Ember.on('didInsertElement', function () {
        this.attachScreenRoot();
      }),
      attachScreenRoot: function () {
        const e = o.Viewport.main().getScreenRoot(
          m.default.get('viewportApiKey'),
          'rcp-fe-lol-parties',
        );
        e.on('show', () => {
          this.determineState();
        });
      },
      lobbyAmbience: o.Ember.computed(
        'mapId',
        'assets.availableMaps',
        function () {
          return this.getMapSoundUrl('sfx-ambience-pregame-loop-sound');
        },
      ),
      matchmakingMusic: o.Ember.computed(
        'queueId',
        'assets.availableMaps',
        function () {
          return this.getMapSoundUrl('music-inqueue-loop-sound');
        },
      ),
      isLobby: o.Ember.computed.readOnly('gameflowService.isLobby'),
      isInQueue: o.Ember.computed.or(
        'gameflowService.isMatchmaking',
        'gameflowService.isReadyCheck',
      ),
      isChampSelect: o.Ember.computed.readOnly('gameflowService.isChampSelect'),
      stateMachine: o.Ember.computed(
        'lobbyAmbience',
        'isChampSelect',
        'isInQueue',
        function () {
          return this.determineState();
        },
      ),
      determineState: function () {
        if (this.get('isChampSelect')) return r.default.stop(), 'champSelect';
        if (this.get('isInQueue')) {
          const e = this.get('matchmakingMusic');
          return e && r.default.playMusic(e), 'queue';
        }
        if (this.get('isLobby')) {
          const e = this.get('lobbyAmbience');
          return e && r.default.playAmbience(e), 'lobby';
        }
      },
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(0),
      i = a(331),
      s = n(i),
      l = a(15),
      r = n(l),
      c = a(332);
    const m = new (class {
      constructor() {
        (this.sfxChannel = new s.default('sfx-ambience')),
          (this.musicChannel = new s.default('music-ambience')),
          (this.isPlaying = null),
          this.attachToScreenRoot();
      }
      attachToScreenRoot() {
        const e = o.Viewport.main().getScreenRoot(
          r.default.get('viewportApiKey'),
          'rcp-fe-lol-parties',
        );
        e.on('hide', () => {
          this.isPlaying === c.SOUND_TYPE_AMBIENCE &&
            (this.sfxChannel.stop(), (this.isPlaying = null));
        });
      }
      playAmbience(e) {
        this.isPlaying === c.SOUND_TYPE_MUSIC && this.musicChannel.stop(),
          (this.isPlaying = c.SOUND_TYPE_AMBIENCE),
          this.sfxChannel.play(e, { allowConcurrency: !1 });
      }
      playMusic(e) {
        this.isPlaying === c.SOUND_TYPE_AMBIENCE && this.sfxChannel.stop(),
          (this.isPlaying = c.SOUND_TYPE_MUSIC),
          this.musicChannel.play(e, { allowConcurrency: !1 });
      }
      stop() {
        this.isPlaying === c.SOUND_TYPE_AMBIENCE
          ? this.sfxChannel.stop()
          : this.isPlaying === c.SOUND_TYPE_MUSIC && this.musicChannel.stop(),
          (this.isPlaying = null);
      }
    })();
    t.default = m;
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    Object.defineProperty(t, '__esModule', { value: !0 });
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(3),
      r = n(l);
    const c = (0, r.default)('plugin:parties:ambience');
    t.default = class {
      constructor(e) {
        (this.channelName = e),
          (this.channel = s.Audio.getChannel(e)),
          (this.playingSound = !1),
          (this.currentSoundUrl = !1);
      }
      _createSound(e) {
        return this.channel.createSound(e, { fadeIn: !0, isLoop: !0 });
      }
      play(e) {
        if (this.currentSoundUrl === e) return i.default.resolve();
        return this.playingSound && this.playingSound.isPlaying()
          ? void (
              this.playingSound.isPlaying() &&
              this.playingSound
                .stop()
                .then(() => this._actuallyPlay(e))
                .catch(() => this._actuallyPlay(e))
            )
          : this._actuallyPlay(e);
      }
      _actuallyPlay(e) {
        return (
          c(`Playing ${this.channelName} ${e}`),
          (this.currentSoundUrl = e),
          (this.playingSound = this._createSound(e)),
          this.playingSound.on('stop', (e) => (e.dispose(), null)),
          this.playingSound.play()
        );
      }
      stop(e) {
        this.playingSound &&
          (c(`Stopping ${this.channelName} ${this.currentSoundUrl}`),
          this.playingSound.isPlaying() &&
            ((e = e ? e : 100),
            this.playingSound.fadeOut(e, { stop: !0 }).catch(() => {})),
          (this.playingSound = !1),
          (this.currentSoundUrl = !1));
      }
    };
  },
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    (t.SOUND_TYPE_MUSIC = 2), (t.SOUND_TYPE_AMBIENCE = 1);
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(1),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    a(334),
      (e.exports = n.Ember.Component.extend(i.default, {
        layout: a(335),
        assets: n.Ember.inject.service(),
        customGamesService: n.Ember.inject.service('custom-games'),
        partySettingsService: n.Ember.inject.service('party-settings'),
        bannerAnimationsEnabled: n.Ember.computed.alias(
          'partySettingsService.bannerAnimationsEnabled',
        ),
        classNames: ['parties-background'],
        classNameBindings: [
          'isShowingParty',
          'isShowingGameSelect',
          'bgVerticalAnimation',
          'isCustomGame',
        ],
        backgroundAssets: n.Ember.computed.alias('assets.backgroundAssets'),
        haveBackgroundAssets: n.Ember.computed.gt('backgroundAssets.length', 0),
        currentBackgroundUrl: n.Ember.computed(
          'backgroundAssets',
          'selected.mapId',
          'selected.gameMode',
          'selected.assetMutator',
          function () {
            const e = this.get('selected'),
              t = this._backgroundById(e.mapId, e.gameMode, e.assetMutator);
            return t;
          },
        ),
        transitionType: n.Ember.computed(
          'bannerAnimationsEnabled',
          function () {
            return this.get('bannerAnimationsEnabled') ? 'fade' : 'none';
          },
        ),
        isShowingParty: n.Ember.computed.alias('showingState.isShowingParty'),
        isShowingGameSelect: n.Ember.computed.alias(
          'showingState.isShowingGameSelect',
        ),
        isCustomGame: n.Ember.computed.alias('customGamesService.isCustomUI'),
        bgVerticalAnimation: n.Ember.computed(
          'isShowingParty',
          'isShowingGameSelect',
          function () {
            const e = this.get('isShowingParty'),
              t = this.get('isShowingGameSelect');
            let a = '',
              n;
            return (
              e
                ? ((a = 'parties-top-to-btm'),
                  (n = '/fe/lol-parties/sfx-gameselect-trans-to-lobby.ogg'))
                : t &&
                  ((a = 'parties-btm-to-top'),
                  (n = '/fe/lol-parties/sfx-lobby-trans-to-gameselect.ogg')),
              this.get('showingState.showVerticalAnimation')
                ? (this.get('bannerAnimationsEnabled') || this.playSound(n),
                  this.set('selected.animationLock', !0),
                  a)
                : ''
            );
          },
        ),
        didInsertElementListener: n.Ember.on('didInsertElement', function () {
          const e = this.element.querySelector('.bg-current');
          e.addEventListener('animationend', () => {
            this.onAnimationEnd();
          }),
            n.Viewport.sidebar().on(
              'backgroundUnset',
              this._setSidebarBackground.bind(this),
            );
        }),
        onAnimationEnd: function () {
          this.set('showingState.showVerticalAnimation', !1),
            this.set('selected.animationLock', !1);
        },
        _backgroundById: function (e, t, a) {
          let n = this.get('assets').getBackgroundAsset(e, t, a);
          n ||
            (n = this.get('backgroundAssets').find(
              (t) => t.id === e && t.isDefault,
            ));
          let o = '';
          n && n.url && (o = n.url);
          let i = '';
          return (
            n && n.sidebarBackgroundColor && (i = n.sidebarBackgroundColor),
            this.set('sidebarBackgroundColor', i),
            this._setSidebarBackground(),
            o
          );
        },
        _setSidebarBackground: function () {
          const e = n.Viewport.main().getCurrentScreenRoot();
          e &&
            e._id &&
            'rcp-fe-lol-parties' === e._id.name &&
            n.Viewport.sidebar().setBackgroundGradient(
              this.get('sidebarBackgroundColor'),
            );
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'qO+HsHQA',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\background-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\background-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\background-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["uikit-background-switcher"],null,[["class","src","transitionType"],["bg-current",["get",["currentBackgroundUrl"]],["get",["transitionType"]]]]],false],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","parties-background-mask"],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(1),
      s = n(i),
      l = a(26),
      r = n(l),
      c = a(17),
      m = a(13),
      d = a(37),
      p = n(d);
    a(337),
      (e.exports = o.Ember.Component.extend(r.default, s.default, {
        layout: a(338),
        customGamesService: o.Ember.inject.service('custom-games'),
        lobbiesService: o.Ember.inject.service('lobbies'),
        assets: o.Ember.inject.service(),
        isCustomGame: o.Ember.computed.alias('customGamesService.isCustomUI'),
        mapId: o.Ember.computed.alias('selected.mapId'),
        gameMode: o.Ember.computed.alias('selected.queue.gameMode'),
        assetMutator: o.Ember.computed.alias('selected.queue.assetMutator'),
        category: o.Ember.computed.alias('selected.queue.category'),
        pickType: o.Ember.computed.alias('selected.pickType'),
        queueId: o.Ember.computed.alias('selected.queueId'),
        isTFT: o.Ember.computed.alias('customGamesService.isTFT'),
        tutorialData: o.Ember.computed(
          'assets.availableMaps',
          'mapId',
          'gameMode',
          'assetMutator',
          function () {
            const e = { tutorialCards: [], title: null, subheader: null },
              t = this.get('assets').getMap(
                this.get('mapId'),
                this.get('gameMode'),
                this.get('assetMutator'),
              );
            return (
              t &&
                (Array.isArray(t.tutorialCards) &&
                  (e.tutorialCards = t.tutorialCards),
                (e.title = t.locStrings.tutorial_title),
                (e.subheader = t.locStrings.tutorial_subheader)),
              e
            );
          },
        ),
        hasGameModeTutorial: o.Ember.computed.alias(
          'tutorialData.tutorialCards.length',
        ),
        isNotTFT: o.Ember.computed.not('lobbiesService.isTFT'),
        showMapNameAndTeamSize: o.Ember.computed.and('isNotTFT'),
        showPointEligibility: o.Ember.computed.and('isNotTFT'),
        mapName: o.Ember.computed('mapId', 'assets.availableMaps', function () {
          const e = this.get('mapId'),
            t = this.get('assetMutator'),
            a = this.get('assets').getMap(e, this.get('gameMode'), t);
          return a.name;
        }),
        customGameName: o.Ember.computed.alias('customGamesService.gameName'),
        customTeamSize: o.Ember.computed.alias('customGamesService.teamSize'),
        customMutatorName: o.Ember.computed(
          'customGamesService.mutatorName',
          'tra.ready',
          'tra.custom_game_mutator_type_blind',
          function () {
            const e = this.get('customGamesService.mutatorName');
            return c.CUSTOM_GAME_MUTATOR_NAMES[e]
              ? this.get(
                  `tra.custom_game_mutator_type_${c.CUSTOM_GAME_MUTATOR_NAMES[e]}`,
                )
              : e;
          },
        ),
        queueName: o.Ember.computed(
          'queueId',
          'queues.platformJson',
          function () {
            const e = this.get('queueId'),
              t = this.get('queues.platformJson'),
              a = e && Array.isArray(t) ? t.find((t) => t.id === e) : null;
            return a ? a.shortName : '';
          },
        ),
        pickTypeNameHidden: o.Ember.computed.empty('pickTypeName'),
        pickTypeName: o.Ember.computed(
          'pickType',
          'tra.ready',
          'lobbiesService.isMap21',
          'lobbiesService.isTFT',
          'tra.game_select_pick_type_name_blind',
          function () {
            if (this.get('lobbiesService.isTFT')) return '';
            if (this.get('lobbiesService.isMap21'))
              return this.get('tra.game_select_pick_type_name_blind');
            const e = this.get('pickType');
            return e ? this.get(`tra.game_select_pick_type_name_${e}`) : '';
          },
        ),
        teamSize: o.Ember.computed(
          'selected.maxPlaying',
          'isCustomGame',
          'customTeamSize',
          function () {
            let e;
            return (
              (e = this.get('isCustomGame')
                ? this.get('customTeamSize')
                : this.get('selected.maxPlaying')),
              e ? this.translate('game_select_team_size', { size: e }) : ''
            );
          },
        ),
        mapBackgroundClass: o.Ember.computed(
          'mapId',
          'gameMode',
          'assets.availableMaps',
          'assetMutator',
          function () {
            const e = this.get('assets').getMap(
              this.get('mapId'),
              this.get('gameMode'),
              this.get('assetMutator'),
            );
            return e
              ? p.default.mapKey({ mapId: e.id, gameMode: e.gameMode })
              : '';
          },
        ),
        didInsertElement() {
          this._super(...arguments);
          const e = this.get('tutorialData');
          if (0 < e.tutorialCards.length) {
            const e = this.get('mapId'),
              t = this.get('gameMode'),
              a = this.get('tutorialData'),
              n = this.get('assetMutator');
            o.PartyAPI._showGameModeTutorialIfNeeded(
              e,
              t,
              a.tutorialCards,
              n,
              a.title,
              a.subheader,
            );
          }
        },
        actions: {
          showGameModeTutorial: function () {
            this.playSound(m.SFX_URLS.SFX_SOC_UI_CLICK_GENERIC);
            const e = this.get('gameMode'),
              t = this.get('tutorialData');
            o.PartyAPI._showGameModeTutorial(
              e,
              t.tutorialCards,
              t.title,
              t.subheader,
            );
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'sxj6CDhv',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\header-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\header-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\header-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isCustomGame"]]],null,6,4]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","lobby-header-eligibility lobby-header-interactable"],["flush-element"],["text","\\n              "],["append",["helper",["point-eligibility"],null,[["selected","isCustomGame"],[["get",["selected"]],false]]],false],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-info-icon",[]],["static-attr","class","show-tutorial-button lobby-header-interactable"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showGameModeTutorial"],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","lobby-header-sub-detail-regalia"],["flush-element"],["append",["unknown",["mapName"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","lobby-header-sub-detail-regalia small-spacing"],["flush-element"],["append",["unknown",["teamSize"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","lobby-header-detail-regalia"],["flush-element"],["append",["unknown",["pickTypeName"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-header-container"],["dynamic-attr","data-parties-selected-category",["concat",[["unknown",["selected","category"]]]]],["dynamic-attr","data-parties-selected-queue-id",["concat",[["unknown",["selected","queueId"]]]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-wrapper"],["flush-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-header-right-regalia"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-details-container-regalia"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","lobby-header-detail-regalia"],["flush-element"],["append",["unknown",["queueName"]],false],["close-element"],["text","\\n"],["block",["unless"],[["get",["pickTypeNameHidden"]]],null,3],["text","        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-details-container-regalia"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showMapNameAndTeamSize"]]],null,2],["block",["if"],[["get",["hasGameModeTutorial"]]],null,1],["block",["if"],[["get",["showPointEligibility"]]],null,0],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","span",[]],["static-attr","class","lobby-header-game-type-detail"],["flush-element"],["append",["unknown",["teamSize"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-header-container custom-header-container"],["dynamic-attr","data-parties-selected-category",["concat",[["unknown",["selected","category"]]]]],["dynamic-attr","data-parties-selected-queue-id",["concat",[["unknown",["selected","queueId"]]]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-wrapper custom-header-wrapper"],["flush-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n\\n      "],["open-element","div",[]],["static-attr","class","lobby-header-right"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-details"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","lobby-header-detail uppercase"],["flush-element"],["append",["unknown",["customGameName"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-game-type-details"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","lobby-header-game-type-detail lobby-header-custom-map-name"],["flush-element"],["append",["unknown",["mapName"]],false],["close-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,5],["text","          "],["open-element","span",[]],["static-attr","class","lobby-header-game-type-detail"],["flush-element"],["append",["unknown",["customMutatorName"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(340),
      (e.exports = n.Ember.Component.extend({
        layout: a(341),
        classNames: ['parties-debug-tools'],
        selectedTab: 'queues',
        selectedTabIsQueues: n.Ember.computed('selectedTab', function () {
          const e = 'queues' === this.get('selectedTab');
          return e;
        }),
        selectedTabIsCustoms: n.Ember.computed('selectedTab', function () {
          const e = 'customs' === this.get('selectedTab');
          return e;
        }),
        handleDidInsertElement: n.Ember.on('didInsertElement', function () {
          this.set('_keyDown', this.onKeyDown.bind(this)),
            document.addEventListener('keydown', this.get('_keyDown'));
        }),
        handleWillDestroyElement: n.Ember.on('willDestroyElement', function () {
          document.removeEventListener('keydown', this.get('_keyDown'));
        }),
        onKeyDown: function (t) {
          t.ctrlKey &&
            89 === t.keyCode &&
            this.$('.parties-debug-queues').toggle();
        },
        actions: {
          selectTab(e) {
            this.set('selectedTab', e);
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '2in9Hr+J',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-debug-queues"],["flush-element"],["text"," \\n  "],["open-element","h1",[]],["static-attr","class","parties-debug-title"],["flush-element"],["text","PARTIES - DEBUG"],["close-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","parties-debug-tip"],["flush-element"],["text","[ctrl-y to dismiss]"],["close-element"],["text","\\n  "],["open-element","lol-uikit-navigation-bar",[]],["static-attr","type","nav-bar-secondary"],["static-attr","direction","left"],["static-attr","selectedIndex","0"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-navigation-item",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectTab","queues"],null],null],["flush-element"],["text","Queues"],["close-element"],["text","\\n    "],["open-element","lol-uikit-navigation-item",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectTab","customs"],null],null],["flush-element"],["text","Custom Games"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","parties-debug-tab-content"],["flush-element"],["text","\\n"],["block",["if"],[["get",["selectedTabIsQueues"]]],null,1],["block",["if"],[["get",["selectedTabIsCustoms"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text"," \\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["unknown",["parties-debug-custom-lobby"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["parties-debug-queue-lobby"],null,[["selected","showingState"],[["get",["selected"]],["get",["showingState"]]]]],false],["text"," \\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(25),
      l = n(s),
      r = a(99),
      c = n(r),
      m = a(0),
      d = a(6),
      p = n(d);
    a(343);
    var u = a(3),
      g = n(u),
      b = a(344);
    const h = (0, g.default)('plugin:parties:debug-custom-lobby:warn');
    e.exports = m.Ember.Component.extend({
      layout: a(345),
      classNames: ['parties-debug-custom-lobby'],
      assetsService: m.Ember.inject.service('assets'),
      customGamesService: m.Ember.inject.service('custom-games'),
      platformConfigSingleton: p.default,
      availableMaps: m.Ember.computed.alias('assetsService.availableMaps'),
      availableModes: m.Ember.computed.alias(
        'platformConfigSingleton.enabledCustomGameModes',
      ),
      defaultGameName: m.Ember.computed.alias(
        'customGamesService.defaultGameName',
      ),
      supportedMapSummaries: m.Ember.computed(
        'availableMaps',
        'availableModes',
        function () {
          const e = this.get('availableMaps'),
            t = this.get('availableModes'),
            a = this._mapsById(e),
            n = m.Ember.A(this._reduceToMapSummaries(a, t)),
            o = this.get('selectedMapId'),
            s = this.get('selectedModeId');
          for (let e = n.length - 1; 0 <= e; --e)
            if (n[e].mapId === o || 0 === e) {
              const t = n[e];
              (t.selected = !0), this.set('selectedMapId', t.mapId);
              let a = t.supportedModes[0];
              if (s) {
                const e = t.supportedModes.find((e) => e.id === s);
                e && (a = e);
              }
              (a.selected = !0), this.set('selectedModeId', a.id);
              break;
            }
          return n;
        },
      ),
      selectedMapId: 11,
      selectedModeId: null,
      selectedTeamSize: 5,
      selectedChampSelectId: 1,
      selectedGameServerRegion: null,
      errorText: null,
      selectedMapSummary: m.Ember.computed(
        'supportedMapSummaries',
        'selectedMapId',
        function () {
          const e = this.get('supportedMapSummaries'),
            t = this.get('selectedMapId');
          let a = null;
          if (e && t) {
            const n = e.find((e) => e.mapId === t);
            n && (a = n);
          }
          return a;
        },
      ),
      selectedModeSummary: m.Ember.computed(
        'selectedMapSummary',
        'selectedModeId',
        function () {
          const e = this.get('selectedMapSummary'),
            t = this.get('selectedModeId');
          let a = null;
          if (e && t) {
            const n = e.supportedModes.find((e) => e.id === t);
            n && (a = n);
          }
          return a;
        },
      ),
      teamSizeOptions: m.Ember.computed(function () {
        const e = [],
          t = this.get('selectedTeamSize');
        for (let a = 1; a <= 5; ++a) e.push({ value: a, selected: t === a });
        return e;
      }),
      champSelectStrategyOptions: m.Ember.computed(
        'selectedChampSelectId',
        function () {
          const e = m.Ember.A(),
            t = this.get('selectedChampSelectId');
          return (
            b.DEBUG_CHAMP_SELECT_STRATEGIES.forEach((a) => {
              const n = {
                name: a.name,
                id: a.id,
                selected: t === a.id || void 0,
              };
              e.push(n);
            }),
            e
          );
        },
      ),
      createButtonEnabled: m.Ember.computed('selectedModeSummary', function () {
        const e = this.get('selectedModeSummary');
        return e && e.enabled;
      }),
      gameServerRegionOptions: m.Ember.computed.alias(
        'customGamesService.gameServerRegionOptions',
      ),
      _mapsById: function (e) {
        const t = {};
        return (
          e.forEach((e) => {
            const a = e.id;
            t[a] || (t[a] = []), t[a].push(e);
          }),
          t
        );
      },
      _reduceToMapSummaries: function (e, t) {
        const a = [];
        return (
          (0, c.default)(e).forEach((n) => {
            let o = e[n];
            o.sort((e, t) => (e.gameMutator ? 1 : t.gameMutator ? -1 : 0));
            const i = [];
            o = o.filter(
              (e) => !i.includes(e.gameMode) && (i.push(e.gameMode), !0),
            );
            const s = this._reduceToMapSummary(o, t);
            s && a.push(s);
          }),
          a
        );
      },
      _reduceToMapSummary: function (e, t) {
        let a = null;
        return (
          0 < e.length &&
            ((a = { mapId: e[0].id, mapName: e[0].name, supportedModes: [] }),
            !a.mapName && (a.mapName = `Map ${a.mapId}`),
            e.forEach((e) => {
              const n = {
                id: `${a.mapId}-${e.gameMode}`,
                name: e.gameModeName,
                gameMode: e.gameMode,
                enabled: t && t.includes(e.gameMode),
              };
              a.supportedModes.push(n);
            })),
          a
        );
      },
      _setSelectedMapId: function (e) {
        const t = this.get('selectedMapId');
        if ((this.set('selectedMapId', e), e !== t)) {
          const e = this.get('selectedMapSummary');
          e && this.set('selectedModeId', e.supportedModes[0].id);
        }
      },
      _clearErrorText: function () {
        this.set('errorText', null);
      },
      _nameInputElement: function () {
        return this.element
          ? this.element.querySelector('input#debug-custom-game-name')
          : null;
      },
      getLobbyName: function () {
        const e = this._nameInputElement();
        return e && e.value ? e.value : this.get('defaultGameName');
      },
      _buildV2LobbyPayload: function () {
        const e = this.get('selectedMapSummary'),
          t = this.get('selectedModeSummary'),
          a = this.get('selectedTeamSize'),
          n = this.get('selectedChampSelectId'),
          o = this.get('selectedGameServerRegion'),
          i = this.getLobbyName(),
          s = {
            customGameLobby: {
              configuration: {
                gameMode: t.gameMode,
                mapId: e.mapId,
                gameTypeConfig: { id: n },
                spectatorPolicy: 'AllAllowed',
                teamSize: a,
              },
              lobbyName: i,
            },
            isCustom: !0,
          };
        return (
          o &&
            'default' !== o.toLowerCase() &&
            (s.customGameLobby.configuration.gameServerRegion = o),
          s
        );
      },
      _createDebugCustomLobby: function () {
        const e = this._buildV2LobbyPayload(),
          t = 'v2/lobby';
        return (
          h(
            `Creating DEBUG custom-game using /lol-lobby/${t} endpoint: ${(0,
            l.default)(e)}`,
          ),
          (0, m.dataBinding)('/lol-lobby')
            .post(t, e)
            .catch((e) => i.default.reject(e))
        );
      },
      actions: {
        createDebugLobby() {
          this._clearErrorText(),
            this._createDebugCustomLobby().then(null, (e) => {
              this.set('errorText', (0, l.default)(e, null, 2));
            });
        },
        toggleAdvancedOptions() {
          const e = 'hidden',
            t = this.$('.parties-debug-advanced-options');
          t.hasClass(e) ? t.removeClass(e) : t.addClass(e);
        },
        selectMap(e) {
          this._clearErrorText(), this._setSelectedMapId(e);
        },
        selectMode(e) {
          this._clearErrorText(), this.set('selectedModeId', e);
        },
        selectTeamSize(e) {
          this._clearErrorText(), this.set('selectedTeamSize', e);
        },
        selectChampSelectId(e) {
          this._clearErrorText(), this.set('selectedChampSelectId', e);
        },
        selectGameServerRegion(e) {
          this._clearErrorText(), this.set('selectedGameServerRegion', e);
        },
      },
    });
  },
  function () {},
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    t.DEBUG_CHAMP_SELECT_STRATEGIES = [
      { name: 'Blind', id: 1 },
      { name: 'OFA Vote', id: 14 },
    ];
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'ahRoN2Hn',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-custom-lobby-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-custom-lobby-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-custom-lobby-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-debug-custom-lobby"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-debug-custom-game-config"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-scrollable",[]],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","parties-debug-maps-dropdown"],["flush-element"],["text","Map"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-maps-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["supportedMapSummaries"]]],null,8],["text","      "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["selectedMapSummary"]]],null,7],["text","\\n"],["block",["if"],[["get",["selectedModeSummary"]]],null,4],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-game-name-input"],["flush-element"],["text","Game Name"],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-input",[]],["static-attr","id","parties-debug-game-name-input"],["flush-element"],["text","\\n    "],["open-element","input",[]],["static-attr","type","text"],["static-attr","name","debug-custom-game-name"],["static-attr","id","debug-custom-game-name"],["dynamic-attr","value",["concat",[["unknown",["defaultGameName"]]]]],["static-attr","maxlength","30"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-advanced-options"],["modifier",["action"],[["get",[null]],"toggleAdvancedOptions"],[["on"],["click"]]],["flush-element"],["text","Show Advanced Options"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-debug-advanced-options hidden"],["flush-element"],["text","\\n    "],["open-element","label",[]],["static-attr","for","parties-debug-game-server-region-dropdown"],["flush-element"],["text","Game Region"],["close-element"],["text","\\n    "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-game-server-region-dropdown"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected","true"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectGameServerRegion","default"],null],null],["flush-element"],["text","Default"],["close-element"],["text","\\n"],["block",["each"],[["get",["gameServerRegionOptions"]]],null,1],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["errorText"]]],null,0],["text","  "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","disabled",["helper",["if"],[["get",["createButtonEnabled"]],null,true],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"createDebugLobby"],null],null],["flush-element"],["text","Create Lobby"],["close-element"],["text"," \\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-debug-custom-lobby-error"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-scrollable",[]],["flush-element"],["text","\\n    "],["append",["unknown",["errorText"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectGameServerRegion",["get",["gameServerRegionOption","value"]]],null],null],["flush-element"],["text","\\n          "],["append",["unknown",["gameServerRegionOption","value"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["gameServerRegionOption"]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["champSelectOption","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectChampSelectId",["get",["champSelectOption","id"]]],null],null],["flush-element"],["text","\\n        "],["append",["unknown",["champSelectOption","name"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["champSelectOption"]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["sizeOption","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectTeamSize",["get",["sizeOption","value"]]],null],null],["flush-element"],["text","\\n        "],["append",["unknown",["sizeOption","value"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["sizeOption"]},{"statements":[["text","      "],["open-element","label",[]],["static-attr","for","parties-debug-teamsize-dropdown"],["flush-element"],["text","Team Size"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-teamsize-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["teamSizeOptions"]]],null,3],["text","      "],["close-element"],["text","\\n\\n      "],["open-element","label",[]],["static-attr","for","parties-debug-pick-format-dropdown"],["flush-element"],["text","Pick Format"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-pick-format-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["champSelectStrategyOptions"]]],null,2],["text","      "],["close-element"],["text","\\n\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","span",[]],["static-attr","class","parties-debug-mode-disabled"],["flush-element"],["text","DISABLED - "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["modeSummary","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectMode",["get",["modeSummary","id"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n"],["block",["unless"],[["get",["modeSummary","enabled"]]],null,5],["text","          "],["open-element","span",[]],["flush-element"],["append",["unknown",["modeSummary","gameMode"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["modeSummary"]},{"statements":[["text","      "],["open-element","label",[]],["static-attr","for","parties-debug-modes-dropdown"],["flush-element"],["text","Mode"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-modes-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["selectedMapSummary","supportedModes"]]],null,6],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["mapSummary","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectMap",["get",["mapSummary","mapId"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n        "],["append",["unknown",["mapSummary","mapName"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["mapSummary"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(347),
      (e.exports = n.Ember.Component.extend({
        layout: a(348),
        classNames: ['parties-debug-queue-lobby'],
        omitDisabledQueues: !0,
        lobbiesService: n.Ember.inject.service('lobbies'),
        queues: n.Ember.computed.alias('lobbiesService.queues'),
        selectedQueueId: n.Ember.computed.alias('lobbiesService.queueId'),
        assetsService: n.Ember.inject.service('assets'),
        availableMaps: n.Ember.computed.alias('assetsService.availableMaps'),
        debugMaps: n.Ember.computed(
          'availableMaps.[]',
          'availableMaps.@each.id',
          'queues.[]',
          'omitDisabledQueues',
          function () {
            const e = n.Ember.A();
            let t = null;
            if (
              (this.get('availableMaps').forEach((a) => {
                const n = this.get('omitDisabledQueues')
                  ? this.getFirstEnabledQueue(a)
                  : this.get('queues');
                if (!e.findBy('id', a.id) && n) {
                  const n = {},
                    o = this.get('selectedMap');
                  (n.id = a.id),
                    o && o.id === a.id
                      ? ((n.selected = 'selected'), (t = a.id))
                      : (n.selected = null),
                    (n.name = a.name || `Map ${a.id}`),
                    11 === n.id ? e.unshift(n) : e.push(n);
                }
              }),
              !t)
            ) {
              this.set('selectedMap', { id: 11 });
              const t = e.findBy('id', 11);
              t && (t.selected = 'selected');
            }
            return e;
          },
        ),
        debugTypes: n.Ember.computed(
          'queues.[]',
          'selectedMap',
          'debugMaps.@each.id',
          'omitDisabledQueues',
          function () {
            const e = n.Ember.A(),
              t = this.queuesForSelectedMap(),
              a = !this.get('omitDisabledQueues');
            return (
              t.forEach((t) => {
                if (!e.findBy('id', t.id)) {
                  if (!t.isTeamBuilderManaged) return;
                  const n = 'Available' === t.queueAvailability;
                  if (n || (!n && a)) {
                    const a = {},
                      o = this.get('selectedType');
                    (a.id = t.id),
                      (a.selected = o && o.id === t.id ? 'selected' : null),
                      (a.name = t.type),
                      (a.numPlayers =
                        t.numPlayersPerTeam + 'x' + t.numPlayersPerTeam),
                      (a.disabled = !n),
                      (a.isTeamBuilderManaged = t.isTeamBuilderManaged),
                      e.push(a);
                  }
                }
              }),
              e.sortBy('id')
            );
          },
        ),
        typesDropdownDisabled: n.Ember.computed(
          'selectedMap',
          'debugTypes',
          function () {
            return (
              !this.get('selectedMap') || 1 > this.get('debugTypes').length
            );
          },
        ),
        createButtonDisabled: n.Ember.computed(
          'selectedMap',
          'debugTypes',
          'selectedType',
          function () {
            return (
              !this.get('selectedMap') ||
              !this.get('selectedType') ||
              1 > this.get('debugTypes').length
            );
          },
        ),
        getFirstEnabledQueue: function (e) {
          let t = null;
          const a = this.get('queues');
          for (let n = 0; n < a.length; n++) {
            const a = this.get('queues')[n];
            if (a.mapId === e.id && 'Available' === a.queueAvailability) {
              t = a;
              break;
            }
          }
          return t;
        },
        queuesForSelectedMap: function () {
          const e = this.get('selectedMap');
          return e
            ? this.get('queues').filterBy('mapId', e.id)
            : this.get('queues');
        },
        actions: {
          debugSetGameMode: function () {
            const e = this.get('selectedType').id;
            this.set('selected.isUpdatingSelection', !0),
              this.set('selected.queueId', e),
              this.get('lobbiesService')
                .createLobbyWithQueueId(e)
                .then(() => {
                  this.set('selected.isUpdatingSelection', !1),
                    this.get('showingState').showParty();
                });
          },
          setDebugMap: function (e) {
            this.set('selectedMap', e), this.set('selectedType', null);
          },
          setDebugType: function (e) {
            this.set('selectedType', e);
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'qoKo1RAN',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-queue-lobby-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-queue-lobby-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-queue-lobby-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-debug-queues-wrapper"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","parties-debug-show-disabled-queues"],["flush-element"],["text","\\n    "],["append",["helper",["input"],null,[["slot","id","type","checked"],["input","parties-debug-show-disabled-queues-check","checkbox",["get",["omitDisabledQueues"]]]]],false],["text","\\n    "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","parties-debug-show-disabled-queues-check"],["flush-element"],["text","Hide Disabled Queues"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-maps-dropdown"],["flush-element"],["text","Map"],["close-element"],["text","\\n  "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-maps-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["debugMaps"]]],null,2],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-types-dropdown"],["flush-element"],["text","Game Type"],["close-element"],["text","\\n  "],["open-element","lol-uikit-framed-dropdown",[]],["dynamic-attr","disabled",["helper",["if"],[["get",["typesDropdownDisabled"]],true,null],null],null],["static-attr","id","parties-debug-types-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["debugTypes"]]],null,1],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","span",[]],["static-attr","class","parties-debug-selected-queue"],["flush-element"],["text","\\n"],["block",["if"],[["get",["selectedType","id"]]],null,0],["text","  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","disabled",["helper",["if"],[["get",["createButtonDisabled"]],true,null],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"debugSetGameMode"],[["on"],["click"]]],null],["flush-element"],["text","Create Lobby"],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    Selected QueueId: "],["append",["unknown",["selectedType","id"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["type","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"setDebugType",["get",["type"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n      "],["open-element","span",[]],["static-attr","class","parties-debug-disabled"],["flush-element"],["append",["helper",["if"],[["get",["type","disabled"]],"DISABLED - "],null],false],["close-element"],["text","\\n      "],["open-element","span",[]],["static-attr","class","parties-debug-tb"],["flush-element"],["append",["helper",["if"],[["get",["type","isTeamBuilderManaged"]],"TB - "],null],false],["close-element"],["text","\\n      "],["append",["unknown",["type","numPlayers"]],false],["text"," - "],["append",["unknown",["type","name"]],false],["text"," - ("],["append",["unknown",["type","id"]],false],["text",")\\n      "],["close-element"],["text","\\n"]],"locals":["type"]},{"statements":[["text","    "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["map","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"setDebugMap",["get",["map"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n      "],["append",["unknown",["map","name"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":["map"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(38);
    const i = [o.SEARCH_ERROR_TYPES.LEAVER_BUSTER_TAINTED_WARNING];
    e.exports = n.Ember.Component.extend({
      lobbiesService: n.Ember.inject.service('lobbies'),
      matchmakingService: n.Ember.inject.service('matchmaking'),
      summonerService: n.Ember.inject.service('summoner'),
      _isTransitioningState: null,
      _notifiedSearchErrorIds: n.Ember.Object.create({}),
      _visibleErrorModals: {},
      searchErrorObserver: n.Ember.on(
        'init',
        n.Ember.observer(
          'matchmakingService.longestSearchError',
          'matchmakingService.matchmakingErrorState',
          function () {
            n.Ember.run.once(this, function () {
              const e = this.get('matchmakingService.longestSearchError'),
                t = e.id,
                a = this.get('_notifiedSearchErrorIds'),
                n = a.hasOwnProperty(e.id),
                o = e.errorType,
                i =
                  'Error' ===
                  this.get('matchmakingService.matchmakingErrorState'),
                s = this.get('lobbiesService.inLobby');
              -1 < t && o && !n && i && s
                ? ((a[e.get('id')] = !0),
                  this.showQueueErrorModal(
                    e.errorType,
                    e.get('id'),
                    e.penalizedSummonerId,
                  ),
                  this.set('_isTransitioningState', !1))
                : this.hideVisibleExpiredErrors();
            });
          },
        ),
      ),
      hideVisibleExpiredErrors: function () {
        const e = this.get('_visibleErrorModals'),
          t = n.lodash.keys(e);
        if (0 === t.length) return;
        const a = this.get('matchmakingService.validSearchErrorIds'),
          o = n.UIKit.getModalManager();
        t.forEach((t) => {
          const n = parseInt(t, 10);
          -1 === a.indexOf(n) && (o.remove(e[t]), delete e[t]);
        }),
          this.set('_visibleErrorModals', e);
      },
      isErrorHandledByOtherPlugin: function (e, t, a) {
        return !!(i.includes(e) && (!t || a));
      },
      showQueueErrorModal: function (e, t, a) {
        const o = this.get('lobbiesService.isCurrentPlayerPartyLeader'),
          i = this.get('summonerService.localSummonerId') === a;
        if (!this.isErrorHandledByOtherPlugin(e, o, i)) {
          const o = n.UIKit.getModalManager(),
            i = n.ComponentFactory.create('PartyQueueErrorDialogComponent', {
              errorType: e,
              errorData: { penalizedSummonerId: a },
            }),
            s = i.domNode,
            l = this.get('tra.lib_ui_dialog_alert_ok'),
            r = this.get('_visibleErrorModals'),
            c = o.add({
              type: 'DialogAlert',
              data: { contents: s, okText: l },
            });
          (r[t] = c),
            this.set('_visibleErrorModals', r),
            c.okPromise.then(() => {
              const e = this.get('_visibleErrorModals');
              e[t] && (delete e[t], this.set('_visibleErrorModals', e));
            });
        }
      },
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(22),
      r = n(l);
    a(351);
    const c = s.EmberAddons.EmberLifeline.RunMixin,
      m = s.UIKit.getTooltipManager(),
      d = s.UIKit.getTemplateHelper();
    e.exports = s.Ember.Component.extend(c, {
      layout: a(352),
      positionError: null,
      positionWarning: null,
      premadeSizeAllowed: null,
      allowablePremadeSizes: null,
      currentPartySize: null,
      autoFillEligible: !1,
      autoFillProtectedForStreaking: !1,
      autoFillProtectedForPromos: !1,
      autoFillProtectedForSoloing: !1,
      shouldShowBetaWatermark: !1,
      disabledReasons: s.Ember.A(),
      lobbiesService: s.Ember.inject.service('lobbies'),
      eligibilityService: s.Ember.inject.service('queue-eligibility'),
      eligibilitiesEntity: r.default,
      restrictions: s.Ember.computed.alias('eligibilitiesEntity.restrictions'),
      warnings: s.Ember.computed.alias('eligibilitiesEntity.warnings'),
      hasLobbyRestrictions: s.Ember.computed.or(
        'eligibilitiesEntity.hasLobbyRestrictions',
        'shouldShowPremadeSizeError',
      ),
      teamSizeRestrictionMembers: s.Ember.computed(
        'restrictions',
        'restrictions.[]',
        function () {
          const e = this.get('restrictions');
          if (e)
            for (let t = 0; t < e.length; t++)
              if (e[t].restrictionCode === 'TeamSizeRestriction')
                return e[t].summonerIds.length;
          return 0;
        },
      ),
      hasQueueAvailabilityWarning: s.Ember.computed.alias(
        'lobbiesService.hasQueueAvailabilityWarning',
      ),
      queueAvailabilityWarningTooltip: s.Ember.computed.alias(
        'lobbiesService.queueAvailabilityWarningTooltip',
      ),
      mmrStandardDeviationWarning: s.Ember.computed.alias(
        'tra.parties_large_skill_gap_warning',
      ),
      mmrStandardDeviationWarningTooltip: s.Ember.computed.alias(
        'tra.parties_large_skill_gap_warning_tooltip',
      ),
      hasMmrStandardDeviationWarning: s.Ember.computed(
        'warnings.[]',
        function () {
          const e = this.get('warnings');
          if (e)
            for (let t = 0; t < e.length; t++) {
              const a = e[t];
              if (a.restrictionCode === 'MmrStandardDeviationTooLarge')
                return !0;
            }
          return !1;
        },
      ),
      shouldShowAutoFillStatus: s.Ember.computed(
        'autoFillEligible',
        'autoFillProtectedForStreaking',
        'autoFillProtectedForPromos',
        'autoFillProtectedForSoloing',
        function () {
          return (
            this.get('autoFillEligible') ||
            this.get('autoFillProtectedForStreaking') ||
            this.get('autoFillProtectedForPromos') ||
            this.get('autoFillProtectedForSoloing')
          );
        },
      ),
      shouldShowPremadeSizeError: s.Ember.computed.not('premadeSizeAllowed'),
      premadeSizeErrorText: s.Ember.computed(
        'premadeSizeAllowed',
        'tra.game_select_queue_restriction_party_teamsizerestriction',
        'tra.ready',
        'teamSizeRestrictionMembers',
        'tra.parties_premade_size_restriction',
        'tra.parties_premade_size_restriction_singular',
        'tra.parties_premade_size_fives',
        'allowablePremadeSizes',
        'restrictions',
        'restrictions.[]',
        'restrictions.@each.summonerIdsString',
        function () {
          const e = this.get('teamSizeRestrictionMembers'),
            t = this.get('allowablePremadeSizes');
          if (t && 1 === t.length && 5 === t[0])
            return this.get('tra.parties_premade_size_fives');
          if (1 < e) {
            return this.get('tra').formatString(
              'game_select_queue_restriction_party_teamsizerestriction',
              { teamSizeRestriction: e },
            );
          }
          if (1 === e)
            return this.get('tra.parties_premade_size_restriction_singular');
          return this.get('tra').formatString(
            'parties_premade_size_restriction',
            { num: e },
          );
        },
      ),
      shouldShowAutoFillProtection: s.Ember.computed(
        'autoFillProtectedForStreaking',
        'autoFillProtectedForPromos',
        'autoFillProtectedForSoloing',
        function () {
          return (
            this.get('autoFillProtectedForStreaking') ||
            this.get('autoFillProtectedForPromos') ||
            this.get('autoFillProtectedForSoloing')
          );
        },
      ),
      classNames: ['parties-footer-notifications'],
      warningTooltipText: s.Ember.computed(
        'tra.parties_autofill_tooltip',
        'tra.parties_autofill_streak_protection',
        'tra.parties_autofill_promo_protection',
        'tra.parties_autofill_solo_protection',
        'autoFillEligible',
        'autoFillProtectedForStreaking',
        'autoFillProtectedForPromos',
        'autoFillProtectedForSoloing',
        function () {
          if (this.get('autoFillEligible'))
            return this.get('tra.parties_autofill_tooltip');
          return this.get('autoFillProtectedForSoloing')
            ? this.get('tra.parties_autofill_solo_protection')
            : this.get('autoFillProtectedForPromos')
            ? this.get('tra.parties_autofill_promo_protection')
            : this.get('autoFillProtectedForStreaking')
            ? this.get('tra.parties_autofill_streak_protection')
            : void 0;
        },
      ),
      tooltipConfig: {
        targetAnchor: { x: 'center', y: 'top' },
        tooltipAnchor: { x: 'center', y: 'bottom' },
        offset: { x: 0, y: 0 },
      },
      restrictionsText: s.Ember.computed(
        'shouldShowPremadeSizeError',
        'hasLobbyRestrictions',
        'teamSizeRestrictionMembers',
        'restrictions.@each.summonerIdsString',
        'tra.ready',
        'tra.game_select_queue_restriction_party_notification',
        function () {
          return this.get('shouldShowPremadeSizeError')
            ? this.get('premadeSizeErrorText')
            : 0 < this.get('teamSizeRestrictionMembers')
            ? this.get('tra.game_select_queue_restriction_party_notification')
            : '';
        },
      ),
      restrictionsTooltipTextObserver: s.Ember.on(
        'init',
        s.Ember.observer(
          'hasLobbyRestrictions',
          'restrictions.@each.restrictionCode',
          'restrictions.@each.summonerIdsString',
          'restrictions',
          'lobbiesService.currentPartyMembers.@each.summonerId',
          'lobbiesService.queueId',
          'tra.ready',
          function () {
            s.Ember.run.once(this, () => {
              this.generateRestrictionStringsForParty();
            });
          },
        ),
      ),
      generateRestrictionStringsForParty: function () {
        if (this.get('hasLobbyRestrictions')) {
          const e = this.get(
              'eligibilitiesEntity',
            ).groupMissingTokenRestrictions(this.get('restrictions')),
            t = [];
          if (e) {
            const a = this.get('lobbiesService.queueId'),
              n = this.get('eligibilityService');
            return n && n.generateRestrictionForParty
              ? (e.forEach((e) => {
                  (e.queueId = a), t.push(n.generateRestrictionForParty(e));
                }),
                i.default.all(t).then((e) => {
                  this.set('disabledReasons', s.Ember.A(e));
                }))
              : i.default.resolve();
          }
        }
        return i.default.resolve();
      },
      restrictionLeaderClass: s.Ember.computed(
        'isCurrentPlayerPartyLeader',
        function () {
          return this.get('isCurrentPlayerPartyLeader') ? 'leader' : '';
        },
      ),
      showQueueAvailabilityTooltip: s.Ember.on(
        'didInsertElement',
        s.Ember.observer('hasQueueAvailabilityWarning', function () {
          this.runTask(() => this.updateQueueAvailabilityWarningTooltip(), 250);
        }),
      ),
      updateQueueAvailabilityWarningTooltip: function () {
        const e = this.element.querySelector('.parties-queue-warning-error');
        if (this.get('hasQueueAvailabilityWarning')) {
          let t = this.get('_queueAvailabilityWarningTooltipDOM');
          if (!t) {
            (t = document.createElement('lol-uikit-tooltip')),
              t.classList.add('parties-footer-tooltip');
            const e = d.contentBlockDialogSimple(
              this.get('queueAvailabilityWarningTooltip'),
            );
            e.setAttribute('type', 'tooltip-large'),
              t.appendChild(e),
              this.set('_queueAvailabilityWarningTooltipDOM', t);
          }
          m.assign(e, t, {}, this.get('tooltipConfig')), m.show(e);
        } else m.unassign(e);
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'nRj7UOlo',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-notifications-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-notifications-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-notifications-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["hasQueueAvailabilityWarning"]]],null,20,19]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-beta-watermark"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","parties_game_mode_beta"]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowBetaWatermark"]]],null,0]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["warningTooltipText"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","parties-autofill-warning-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","parties-autofill-protection-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillProtection"]]],null,4,3],["text","      "],["append",["unknown",["positionWarning"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n"],["block",["if"],[["get",["positionWarning"]]],null,5],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillStatus"]]],null,6,1]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["mmrStandardDeviationWarningTooltip"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-mmr-warning-icon"],["flush-element"],["close-element"],["append",["unknown",["mmrStandardDeviationWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],8],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasMmrStandardDeviationWarning"]]],null,9,7]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-error"],["flush-element"],["append",["unknown",["positionError"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["positionError"]]],null,11,10]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["readyWarningTooltip"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning parties-ready-warning"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-ready-warning-icon"],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["readyWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],13],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["readyWarning"]]],null,14,12]],"locals":[]},{"statements":[["text","            "],["open-element","li",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["reason"]]],null],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["disabledReasons"]]],null,16],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-restrictions-warning-error"],["flush-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-notification-warning-icon ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["restrictionsText"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],17],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasLobbyRestrictions"]]],null,18,15]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-queue-warning-error"],["flush-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-notification-warning-icon ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["tra","parties_roster_invite_disabled_eligibility_disabled"]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(2),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n),
      i = a(0),
      s = a(354);
    e.exports = i.Ember.Component.extend({
      classNames: ['parties-notifications'],
      lobbiesService: i.Ember.inject.service('lobbies'),
      summonerService: i.Ember.inject.service('summoner'),
      notifications: i.Ember.computed.alias('lobbiesService.notifications'),
      inLobby: i.Ember.computed.alias('lobbiesService.inLobby'),
      currentPlayer: i.Ember.computed.alias('lobbiesService.currentSummoner'),
      toastManager: i.UIKit.getToastManager(),
      templateHelper: i.UIKit.getTemplateHelper(),
      notificationsObserver: i.Ember.on(
        'init',
        i.Ember.observer('notifications.@each.notificationId', function () {
          i.Ember.run.once(this, () => {
            const e = this.get('notifications');
            e && 0 !== e.length && this._processQueueDodgeNotifications(e);
          });
        }),
      ),
      _processQueueDodgeNotifications: function (e) {
        e.forEach((e) => {
          e.notificationReason ===
          s.MATCHMAKING_DODGE_NOTIFICATIONS.PARTY_DODGED
            ? (this._partyDodged(e), this._deleteNotification(e.notificationId))
            : e.notificationReason ===
                s.MATCHMAKING_DODGE_NOTIFICATIONS.STRANGER_DODGED &&
              (this._strangerDodged(),
              this._deleteNotification(e.notificationId));
        });
      },
      _strangerDodged: function () {
        const e = this.get('templateHelper').contentBlockNotification(
          this.get('tra.game_flow_champ_select_dodge_stranger_notification'),
          'lol-ready-check-notification-stranger-dodge',
        );
        return this._toastNotify(e);
      },
      _partyDodged: function (e) {
        const t = this.get('currentPlayer'),
          a = e.summonerIds[0];
        a && t.summonerId === a
          ? this._notifySelfDodge(this.get('inLobby'))
          : this._notifyPartyMemberDodge(a);
      },
      _notifySelfDodge: function (e) {
        const t = e
            ? this.get(
                'tra.game_flow_champ_select_dodge_player_notification_lobby',
              )
            : this.get('tra.game_flow_champ_select_dodge_player_notification'),
          a = this.get('templateHelper').contentBlockNotification(
            t,
            'lol-ready-check-notification-party-dodge',
          );
        this._toastNotify(a);
      },
      _notifyPartyMemberDodge: function (e) {
        return e
          ? this.get('summonerService')
              .getSummoner(e)
              .then((e) => {
                const t = this.get('templateHelper').contentBlockNotification(
                  this.get('tra').formatString(
                    'game_flow_champ_select_dodge_party_notification',
                    { summonerName: e.displayName },
                  ),
                  'lol-ready-check-notification-party-dodge',
                );
                this._toastNotify(t);
              })
          : o.default.reject();
      },
      _toastNotify: function (e) {
        this.get('toastManager').add({
          type: 'DialogToast',
          data: { contents: e, dismissable: !0 },
          timing: 'slow',
        });
      },
      _deleteNotification: function (e) {
        this.get('lobbiesService').deleteNotification(e);
      },
    });
  },
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    (t.MATCHMAKING_DODGE_NOTIFICATIONS = {
      INVALID: 'Invalid',
      PARTY_DODGED: 'PartyDodged',
      STRANGER_DODGED: 'StrangerDodged',
    }),
      (t.LEGACY_LOBBY_REMOVAL_NOTIFICATIONS = {
        KICKED: 'KICKED',
        DESTROYED: 'DESTROYED',
        PROGRESSED: 'PROGRESSED',
      }),
      (t.TEAM_BUILDER_REMOVAL_NOTIFICATIONS = {
        NONE: 'None',
        KICKED: 'Kicked',
        DISBANDED: 'Disbanded',
        LEFT: 'Left',
        SERVICE_ERROR: 'ServiceError',
        OTHER: 'Other',
        TIMEOUT: 'Timeout',
        GAME_START_ERROR: 'GameStartError',
        SERVICE_SHUTDOWN: 'ServiceShutdown',
      });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'ySgez5wR',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\parties-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\parties-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\parties-root-component\\\\index.js\\" "],["text","\\n"],["block",["lower-section"],null,[["currentPlayer"],[["get",["currentPlayer"]]]],5],["text","\\n"],["open-element","div",[]],["static-attr","class","header-text-gradient"],["flush-element"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","parties-header-button-container"],["flush-element"],["text","\\n  "],["append",["helper",["social-leaderboard-button"],null,[["selected","queueType","currentPlayer"],[["get",["selected"]],["get",["selected","queue","type"]],["get",["currentPlayer"]]]]],false],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["back-button-container ",["unknown",["backButtonContainerClass"]]]]],["flush-element"],["text","\\n    "],["open-element","lol-uikit-flat-button",[]],["static-attr","class","parties-back-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"backButtonClick"],null],null],["dynamic-attr","disabled",["unknown",["backButtonDisabled"]],null],["flush-element"],["text","\\n      "],["append",["unknown",["tra","parties_button_change_mode"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","eligibility-loading-spinner"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["lobbiesService","isOpenPartyEnabled"]]],null,0],["close-element"],["text","\\n\\n\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["invitationsObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["open-party-toggle"],null,[["showingState"],[["get",["showingState"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["placeholder-banner"],null,[["placeholder","isInQueue","partyInvitesAllowed","showInviteModal"],[["get",["placeholder"]],["get",["isInQueue"]],["get",["partyInvitesAllowed"]],"showInviteModal"]]],false],["text","\\n"]],"locals":["placeholder"]},{"statements":[["text","        "],["append",["helper",["player-banner"],null,[["member","isInQueue","selected"],[["get",["member"]],["get",["isInQueue"]],["get",["selected"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","        "],["append",["helper",["player-banner"],null,[["tagName","member","isMe","isInQueue","selected","positionSelectorEmberApp","positionSelectorData","cachePositionSelector"],["parties-main-banner",["get",["currentPlayer"]],true,["get",["isInQueue"]],["get",["selected"]],["get",["positionSelectorEmberApp"]],["get",["positionSelectorData"]],["helper",["action"],[["get",[null]],["get",["cachePositionSelector"]]],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-player-banners"],["flush-element"],["text","\\n"],["block",["if"],[["get",["currentPlayer"]]],null,3],["block",["each"],[["get",["otherPartyMembers"]]],null,2],["block",["each"],[["get",["playerPlaceholders"]]],null,1],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","\\n  "],["open-element","div",[]],["static-attr","class","upper-right-container"],["flush-element"],["text","\\n    "],["append",["unknown",["disband-countdown"]],false],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["inParty"]]],null,4],["text","\\n  "],["append",["helper",["parties-footer-notifications"],null,[["positionError","positionWarning","readyWarning","readyWarningTooltip","autoFillEligible","autoFillProtectedForStreaking","autoFillProtectedForPromos","autoFillProtectedForSoloing","premadeSizeAllowed","allowablePremadeSizes","currentPartySize","isCurrentPlayerPartyLeader"],[["get",["positionError"]],["get",["positionWarning"]],["get",["readyWarning"]],["get",["readyWarningTooltip"]],["get",["autoFillEligible"]],["get",["autoFillProtectedForStreaking"]],["get",["autoFillProtectedForPromos"]],["get",["autoFillProtectedForSoloing"]],["get",["premadeSizeAllowed"]],["get",["allowablePremadeSizes"]],["get",["currentPartySize"]],["get",["isCurrentPlayerPartyLeader"]]]]],false],["text","\\n\\n  "],["append",["helper",["parties-footer"],null,[["showingState","selected","readyWarning"],[["get",["showingState"]],["get",["selected"]],["get",["readyWarning"]]]]],false],["text","\\n\\n  "],["append",["helper",["invite-info-panel"],null,[["currentPlayerCanInvite"],[["get",["currentPlayerCanInvite"]]]]],false],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","parties-chat-room"],["flush-element"],["text","\\n    "],["open-element","lol-social-chat-room",[]],["static-attr","type","lobby"],["static-attr","disabled-when-connecting",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(1),
      r = n(l),
      c = a(5),
      m = n(c),
      d = a(26),
      p = n(d),
      u = a(51),
      g = n(u),
      b = a(6),
      h = n(b),
      f = a(71),
      y = n(f),
      _ = a(3),
      v = n(_);
    a(358);
    const S = s.EmberAddons.EmberLifeline.RunMixin,
      x = (0, v.default)('plugin:parties:footer-component:warn'),
      E = {
        QUEUE_DODGER: 'QUEUE_DODGER',
        LEAVER_BUSTER_QUEUE_DELAY: 'LEAVER_BUSTED',
        LEAVER_BUSTER_QUEUE_LOCKOUT: 'LEAVER_BUSTER_QUEUE_LOCKOUT',
      };
    e.exports = s.Ember.Component.extend(
      S,
      p.default,
      r.default,
      m.default,
      g.default,
      {
        classNames: ['parties-footer-container'],
        layout: a(359),
        _notifiedSearchErrorIds: s.Ember.A(),
        matchmakingService: s.Ember.inject.service('matchmaking'),
        lobbiesService: s.Ember.inject.service('lobbies'),
        summonerService: s.Ember.inject.service('summoner'),
        customGamesService: s.Ember.inject.service('custom-games'),
        customGameListService: s.Ember.inject.service('custom-game-list'),
        gameflowService: s.Ember.inject.service('gameflow'),
        patcherService: s.Ember.inject.service('patcher'),
        partySettingsService: s.Ember.inject.service('party-settings'),
        queueEligibilityService: s.Ember.inject.service('queue-eligibility'),
        platformConfig: h.default,
        animationsEnabled: s.Ember.computed.alias(
          'partySettingsService.animationsEnabled',
        ),
        inLobby: s.Ember.computed.alias('lobbiesService.inLobby'),
        currentPartyMembers: s.Ember.computed.alias(
          'lobbiesService.currentPartyMembers',
        ),
        currentPartySize: s.Ember.computed.alias(
          'lobbiesService.currentPartySize',
        ),
        isPremadeRestrictedFives: s.Ember.computed.alias(
          'lobbiesService.isPremadeRestrictedFives',
        ),
        isLeader: s.Ember.computed.alias(
          'lobbiesService.isCurrentPlayerPartyLeader',
        ),
        isNotLeader: s.Ember.computed.not('isLeader'),
        isMember: s.Ember.computed.alias(
          'lobbiesService.isCurrentPlayerPartyMember',
        ),
        displayNotLeaderTooltip: s.Ember.computed.and(
          'inLobby',
          'isMember',
          'isNotSearching',
          'isMatchNotFound',
        ),
        searchState: s.Ember.computed.alias('matchmakingService.searchState'),
        isSearching: s.Ember.computed.alias('matchmakingService.isSearching'),
        isNotSearching: s.Ember.computed.alias(
          'matchmakingService.isNotSearching',
        ),
        isMatchFound: s.Ember.computed.alias('matchmakingService.isMatchFound'),
        isMatchNotFound: s.Ember.computed.alias(
          'matchmakingService.isMatchNotFound',
        ),
        isInQueue: s.Ember.computed.or('isSearching', 'isMatchFound'),
        animationLock: s.Ember.computed.alias('selected.animationLock'),
        currentMapId: s.Ember.computed.alias('selected.mapId'),
        searchError: s.Ember.computed.readOnly(
          'matchmakingService.longestSearchError',
        ),
        searchErrorType: s.Ember.computed.readOnly('searchError.errorType'),
        isSearchError: s.Ember.computed.bool('searchError'),
        searchErrorHasTimeRemaining: s.Ember.computed.gt(
          'matchmakingService.longestSearchErrorPenaltyTimeRemaining',
          0,
        ),
        hasPenaltyTime: s.Ember.computed.and(
          'isSearchError',
          'searchErrorHasTimeRemaining',
        ),
        timeRemaining: s.Ember.computed.readOnly(
          'matchmakingService.longestSearchErrorPenaltyTimeRemainingFormatted',
        ),
        penalizedSummoner: null,
        customGameRewardsDisabledModalElement: null,
        customGameRewardsDisabledReasons: s.Ember.A(),
        customGameChampSelectErrorElement: null,
        customGameChampSelectErrorBody: '',
        customGameChampSelectErrorPlayers: s.Ember.A(),
        hasQueueAvailabilityWarning: s.Ember.computed.alias(
          'lobbiesService.hasQueueAvailabilityWarning',
        ),
        queueAvailabilityWarningTooltip: s.Ember.computed.alias(
          'lobbiesService.queueAvailabilityWarningTooltip',
        ),
        showCustomGameContentWarning: s.Ember.computed(
          'selected.isTrainingGame',
          'selected.isCreatingCustomGame',
          'tra.ready',
          function () {
            return (
              this.get('selected.isTrainingGame') &&
              this.get('selected.isCreatingCustomGame') &&
              this.get('tra').exists('custom_game_training_content_warning') &&
              this.get('tra').exists('custom_game_training_rewards_warning') &&
              this.get('tra').exists('custom_game_training_question')
            );
          },
        ),
        hideCustomGameRewardsModal: !0,
        insertListener: s.Ember.on('didInsertElement', function () {
          const e = this.element.querySelector(
            'lol-uikit-content-block#custom-games-disabled-reasons',
          );
          this.set('customGameRewardsDisabledModalElement', e);
          const t = this.element.querySelector(
            'lol-uikit-content-block#custom-games-champ-select-error',
          );
          this.set('customGameChampSelectErrorElement', t);
        }),
        searchErrorPenalizedSummonerIdObserver: s.Ember.computed(
          'searchError.penalizedSummonerId',
          function () {
            const e = this.get('searchError.penalizedSummonerId');
            e &&
              this.get('summonerService')
                .getSummoner(e)
                .then((e) => {
                  this.set('penalizedSummoner', e);
                });
          },
        ),
        queueErrorMessage: s.Ember.computed(
          'searchErrorType',
          'penalizedSummoner',
          'tra.ready',
          'tra.parties_queue_error_queue_dodge_myself_body',
          'tra.parties_queue_error_queue_dodge_other_body',
          'tra.parties_queue_error_generic_body',
          function () {
            const e = this.get('searchErrorType'),
              t = this.get('searchError.penalizedSummonerId'),
              a = this.get('matchmakingService.currentSummoner.summonerId');
            return e === E.QUEUE_DODGER
              ? t === a
                ? this.get('tra.parties_queue_error_queue_dodge_myself_body')
                : this.translate('parties_queue_error_queue_dodge_other_body', {
                    player: this.get('penalizedSummoner.displayName'),
                  })
              : e === E.LEAVER_BUSTER_QUEUE_LOCKOUT
              ? t === a
                ? this.get(
                    'tra.parties_queue_error_leaver_buster_lockout_restriction_tooltip_myself_body',
                  )
                : this.translate(
                    'parties_queue_error_leaver_buster_lockout_restriction_tooltip_other_body',
                    { player: this.get('penalizedSummoner.displayName') },
                  )
              : this.get('tra.parties_queue_error_generic_body$html');
          },
        ),
        patcherDisconnected: s.Ember.computed.not('patcherService.isConnected'),
        showingPartyButNotLeader: s.Ember.computed.and(
          'showingState.isShowingParty',
          'isNotLeader',
        ),
        confirmButtonThrottled: !1,
        confirmButtonNotThrottled: s.Ember.computed.not(
          'confirmButtonThrottled',
        ),
        showingPartyButThrottled: s.Ember.computed.and(
          'showingState.isShowingParty',
          'isLeader',
          'confirmButtonThrottled',
        ),
        showingPartyAndInQueue: s.Ember.computed.and(
          'showingState.isShowingParty',
          'isInQueue',
        ),
        showingPartyAndPenaltyTime: s.Ember.computed(
          'showingState.isShowingParty',
          'hasPenaltyTime',
          'customGamesService.isCustomUI',
          function () {
            return (
              this.get('showingState.isShowingParty') &&
              this.get('hasPenaltyTime') &&
              !this.get('customGamesService.isCustomUI')
            );
          },
        ),
        hasRankedDivisionRestriction: s.Ember.computed.alias(
          'queueEligibilityService.hasRankedDivisionRestriction',
        ),
        showingPartyAndRankedDivisionRestriction: s.Ember.computed.and(
          'showingState.isShowingParty',
          'hasRankedDivisionRestriction',
        ),
        cannotStartMatchmaking: s.Ember.computed.not(
          'lobbiesService.canStartMatchmaking',
        ),
        showingPartyButCannotStartMatchmaking: s.Ember.computed.and(
          'showingState.isShowingParty',
          'isLeader',
          'cannotStartMatchmaking',
        ),
        confirmButtonDisabled: s.Ember.computed.or(
          'animationLock',
          'patcherDisconnected',
          'selected.isUpdatingSelection',
          'lobbiesService.hasLobbyRestrictions',
          'showingPartyButNotLeader',
          'showingPartyButThrottled',
          'showingPartyAndRankedDivisionRestriction',
          'showingPartyAndInQueue',
          'showingPartyAndPenaltyTime',
          'showingPartyButCannotStartMatchmaking',
          'hasQueueAvailabilityWarning',
        ),
        confirmButtonEnabled: s.Ember.computed.not('confirmButtonDisabled'),
        confirmButtonText: s.Ember.computed(
          'tra.ready',
          'hasPenaltyTime',
          'isInQueue',
          'customGamesService.isCustomUI',
          'customGameListService.confirmButtonText',
          'tra.parties_button_in_queue',
          'tra.parties_button_find_match',
          'tra.parties_button_start_game',
          function () {
            if (this.get('isInQueue'))
              return this.get('tra.parties_button_in_queue');
            if (this.get('customGamesService.isCustomUI'))
              return this.get('tra.parties_button_start_game');
            if (this.get('hasPenaltyTime')) {
              const e = this.get('tra.parties_button_blocked'),
                t = this.get('timeRemaining');
              return `${t}`;
            }
            return this.get('tra.parties_button_find_match');
          },
        ),
        buttonSounds: {
          closeHover: '/fe/lol-parties/sfx-lobby-button-quit-hover.ogg',
          closeClick: '/fe/lol-parties/sfx-lobby-button-quit-click.ogg',
          confirmHover: '/fe/lol-parties/sfx-lobby-button-find-match-hover.ogg',
          confirmClick: '/fe/lol-parties/sfx-lobby-button-find-match-click.ogg',
        },
        searchErrorLeaverBusterQueueDelay: s.Ember.computed.equal(
          'searchErrorType',
          E.LEAVER_BUSTER_QUEUE_DELAY,
        ),
        searchErrorLeaverBusterQueueLockout: s.Ember.computed.equal(
          'searchErrorType',
          E.LEAVER_BUSTER_QUEUE_LOCKOUT,
        ),
        confirmButtonShowTooltip: s.Ember.computed(
          'displayNotLeaderTooltip',
          'hasPenaltyTime',
          'searchErrorLeaverBusterQueueDelay',
          'isPremadeRestrictedFives',
          'isInQueue',
          'patcherService.isConnected',
          'hasQueueAvailabilityWarning',
          'showingState.isShowingGameSelect',
          'lobbiesService.canStartMatchmaking',
          'lobbiesService.premadeSizeAllowed',
          'lobbiesService.hasLobbyRestrictions',
          'customGamesService.isCustomUI',
          function () {
            if (
              this.get('displayNotLeaderTooltip') ||
              this.get('isPremadeRestrictedFives') ||
              !this.get('patcherService.isConnected')
            )
              return !0;
            return (
              !(
                !this.get('hasPenaltyTime') ||
                this.get('searchErrorLeaverBusterQueueDelay') ||
                this.get('showingState.isShowingGameSelect') ||
                this.get('customGamesService.isCustomUI')
              ) ||
              !(
                this.get('isInQueue') ||
                this.get('lobbiesService.canStartMatchmaking') ||
                !this.get('lobbiesService.premadeSizeAllowed')
              ) ||
              !!this.get('hasQueueAvailabilityWarning')
            );
          },
        ),
        confirmButtonTooltipText: s.Ember.computed(
          'displayNotLeaderTooltip',
          'hasPenaltyTime',
          'queueErrorMessage',
          'customGamesService.isCustomUI',
          'isPremadeRestrictedFives',
          'patcherService.isConnected',
          'lobbiesService.canStartMatchmaking',
          'hasQueueAvailabilityWarning',
          'tra.metadata',
          'tra.ready',
          'tra.parties_find_match_wait_for_captain',
          'tra.parties_start_game_wait_for_captain',
          'tra.parties_position_select_members_required_tooltip',
          'tra.parties_patcher_not_connected',
          'tra.parties_premade_size_five_restriction',
          'lobbiesService.hasLobbyRestrictions',
          function () {
            let e = '';
            return (
              this.get('patcherService.isConnected') ||
                (e = s.tra.get('parties_patcher_not_connected')),
              this.get('hasRankedDivisionRestriction')
                ? (e = this.get(
                    'tra.game_select_queue_restriction_party_teamdivisionrestriction',
                  ))
                : this.get('isPremadeRestrictedFives')
                ? (e = this.get('tra.parties_premade_size_five_restriction'))
                : !this.get('lobbiesService.canStartMatchmaking') &&
                  (this.get('readyWarning')
                    ? (e = this.get('readyWarning'))
                    : (e = this.get(
                        'tra.parties_position_select_members_required_tooltip',
                      ))),
              this.get('displayNotLeaderTooltip')
                ? this.get('customGamesService.isCustomUI')
                  ? (e = this.get('tra.parties_start_game_wait_for_captain'))
                  : (e = this.get('tra.parties_find_match_wait_for_captain'))
                : this.get('hasPenaltyTime') &&
                  (e = this.get('queueErrorMessage')),
              this.get('hasQueueAvailabilityWarning')
                ? this.get('queueAvailabilityWarningTooltip')
                : e.replace(/\n/, '<br>')
            );
          },
        ),
        closeButtonDisabled: s.Ember.computed.or('animationLock'),
        closeButtonText: s.Ember.computed(
          'tra.ready',
          'tra.parties_button_quit',
          'tra.parties_button_quit_matchmaking',
          'isInQueue',
          function () {
            return this.get('isInQueue')
              ? this.get('tra.parties_button_quit_matchmaking')
              : this.get('tra.parties_button_quit');
          },
        ),
        startMatchmaking: function () {
          this.get('confirmButtonNotThrottled') &&
            (this.set('confirmButtonThrottled', !0),
            (this.enterQueueTimer = s.Telemetry.startTimer(
              'parties-enter-queue',
            )),
            this.get('lobbiesService')
              .startMatchmakingSearch()
              .then(
                () => {
                  this.set('confirmButtonThrottled', !1);
                },
                (e) => {
                  y.default.sendTelemetryEvent('feature_error', {
                    id: 'PARTIES_START_MATCHMAKING_ATTEMPT_FAILED',
                    severity: 'blocker',
                    message:
                      'failed http post request to /lol-lobby/v2/lobby/matchmaking/search',
                  }),
                    this.set('confirmButtonThrottled', !1),
                    this.set('_isTransitioningState', !1),
                    x(`Start matchmaking search failed: ${e}`);
                },
              ));
        },
        enterQueueTelemetryObserver: s.Ember.observer('isInQueue', function () {
          this.get('isInQueue') &&
            this.enterQueueTimer &&
            (s.Telemetry.stopAndRecordTimer(this.enterQueueTimer),
            delete this.enterQueueTimer);
        }),
        cancelMatchmaking: function () {
          this.get('isSearching') &&
            this.get('lobbiesService').cancelMatchmakingSearch();
        },
        customTryToEnterChampSelect: function () {
          return this.checkCustomTeamSizeRestrictions()
            .then(() => this.checkCustomRewards())
            .then(() => this.customEnterChampSelect())
            .catch(() => {
              this.set('_isTransitioningState', !1);
            });
        },
        checkCustomTeamSizeRestrictions: function () {
          const e = this.get('customGamesService'),
            t = this.get('currentMapId'),
            a = e.findMinPlayersForMap(t),
            n = e.get('minPlayers'),
            o = e.get('currentNumPlayers'),
            l = a > n ? a : n;
          let r = '';
          o < a &&
            (r = this.translate(
              'custom_game_champ_select_error_min_map_player',
              { numPlayers: o, minRequired: a },
            )),
            o < n &&
              (r = this.translate('custom_game_champ_select_error_min_player', {
                minPlayers: l,
              }));
          const c = s.tra.get('parties_kicked_confirmation_ok');
          return o < l
            ? (this.showModal({
                type: 'DialogAlert',
                data: { contents: r, okText: c },
              }),
              i.default.reject())
            : i.default.resolve();
        },
        checkCustomRewards: function () {
          return this.get('hideCustomGameRewardsModal')
            ? i.default.resolve()
            : new i.default((e, t) => {
                document.activeElement.blur();
                const a = this.get('customGamesService'),
                  n = a.getRewardsDisabledReasons();
                if (!n || 0 === n.length) return void e();
                const o = [];
                n.forEach((e) => {
                  const t = `tra.custom_game_rewards_disabled_reason_${e.toLowerCase()}`,
                    a = this.get(t);
                  a && 0 < a.length && o.push(a);
                }),
                  this.set('customGameRewardsDisabledReasons', s.Ember.A(o));
                const i = this.showModal({
                  type: 'DialogConfirm',
                  data: {
                    contents: this.get('customGameRewardsDisabledModalElement'),
                    acceptText: this.get(
                      'tra.custom_game_rewards_disabled_confirm_yes',
                    ),
                    declineText: this.get(
                      'tra.custom_game_rewards_disabled_confirm_no',
                    ),
                    onAccept: () => {
                      e();
                    },
                    onDecline: () => {
                      t();
                    },
                  },
                });
                i.domNode.classList.add(
                  'parties-custom-game-rewards-disabled-modal',
                );
                const l = i.domNode.querySelector('.button-accept');
                l && l.focus();
              });
        },
        enterChampSelectLockTime: 300,
        customEnterChampSelect: function () {
          return (
            this.set('confirmButtonThrottled', !0),
            this.get('customGamesService')
              .enterChampSelect()
              .then(
                () => {
                  this.set('_isTransitioningState', !1),
                    this.runTask(() => {
                      this.set('confirmButtonThrottled', !1);
                    }, this.get('enterChampSelectLockTime'));
                },
                (e) => {
                  this.set('confirmButtonThrottled', !1),
                    this.handleCustomGameChampSelectError(e);
                },
              )
          );
        },
        handleCustomGameChampSelectError: function (e) {
          x(`Custom game encountered error when entering champ select: ${e}`);
          const t = this.determineCustomGameErrorBody(e);
          this.set('customGameChampSelectErrorBody', t);
          const a = s.tra.get('parties_kicked_confirmation_ok'),
            n = this.showModal({
              type: 'DialogAlert',
              data: {
                contents: this.get('customGameChampSelectErrorElement'),
                okText: a,
              },
            });
          n.domNode.classList.add(
            'parties-custom-game-champ-select-errors-modal',
          ),
            this.set('_isTransitioningState', !1),
            this.set('customGamesService.preventTeamChanges', !1);
        },
        aggregateCustomChampSelectErrorReasons: function (e) {
          if (!e.data) return {};
          let t = {};
          if (e.data.failedPlayers && e.data.failedPlayers.length)
            for (let a = 0; a < e.data.failedPlayers.length; a++) {
              const n = e.data.failedPlayers[a];
              t[n.reason] || (t[n.reason] = []),
                t[n.reason].push(n.summonerName);
            }
          return (t = this.aggregateCustomChampSelectErrorByStatus(e, t)), t;
        },
        aggregateCustomChampSelectErrorByStatus: function (e, t) {
          if (e.data.httpStatus)
            switch (e.data.httpStatus) {
              case 435:
                t.GAME_MODE_NOT_SUPPORTED = !0;
                break;
              case 436:
                let a = !0;
                if (e.data.message) {
                  const t = e.data.message.match(/([0-9]+) required/);
                  t && (a = t[1]);
                }
                t.NOT_ENOUGH_PLAYERS_FOR_MAP = a;
            }
          return t;
        },
        determineCustomGameErrorBody: function (e) {
          let t = '';
          const a = this.aggregateCustomChampSelectErrorReasons(e);
          if (
            (this.set('customGameChampSelectErrorPlayers', s.Ember.A()),
            this.set('showCustomGameMinorRestrictionDetails', !1),
            a.RANKED_NUM_CHAMPS)
          )
            (t = this.get('tra.custom_game_champ_select_error_min_champions')),
              this.set(
                'customGameChampSelectErrorPlayers',
                s.Ember.A(a.RANKED_NUM_CHAMPS),
              );
          else if (
            a.MINOR_RESTRICTED ||
            a.PARENTAL_CONTROL_RESTRICTION ||
            a.TIME_PLAYED_RESTRICTION
          ) {
            t = this.get(
              'tra.custom_game_champ_select_error_generic_player_restriction',
            );
            const e = s.tra.metadata().locale.id,
              n = e.substr(0, 2).toLowerCase(),
              o = s.lodash
                .union(
                  a.MINOR_RESTRICTED,
                  a.PARENTAL_CONTROL_RESTRICTION,
                  a.TIME_PLAYED_RESTRICTION,
                )
                .sort((e, t) => e.localeCompare(t, n));
            this.set('customGameChampSelectErrorPlayers', s.Ember.A(o)),
              this.set('showCustomGameMinorRestrictionDetails', !0);
          } else if (!a.NOT_ENOUGH_PLAYERS_FOR_MAP)
            t = a.GAME_MODE_NOT_SUPPORTED
              ? this.get(
                  'tra.custom_game_champ_select_error_game_mode_unsupported',
                )
              : this.get('tra.custom_game_champ_select_error_unknown');
          else if (!0 === a.NOT_ENOUGH_PLAYERS_FOR_MAP)
            t = this.get(
              'tra.custom_game_champ_select_error_min_player_unknown_required',
            );
          else {
            const e = this.get('customGamesService'),
              n = e.get('currentNumPlayers');
            t = this.translate(
              'custom_game_champ_select_error_min_map_player',
              { numPlayers: n, minRequired: a.NOT_ENOUGH_PLAYERS_FOR_MAP },
            );
          }
          return t;
        },
        leavePartyModal: function () {
          if (1 < this.get('currentPartySize')) {
            const e = this.showModal({
              type: 'DialogConfirm',
              data: {
                contents: this.get('tra.parties_leave_confirmation_text'),
                acceptText: this.get('tra.parties_leave_confirmation_yes'),
                declineText: this.get('tra.parties_leave_confirmation_no'),
                onAccept: () => {
                  this.leaveParty();
                },
              },
            });
            return void e.domNode.classList.add('parties-leave-party-modal');
          }
          this.leaveParty();
        },
        confirmButtonClicked: function () {
          this.set('_isTransitioningState', !0),
            this.get('customGamesService.isCustom')
              ? this.customTryToEnterChampSelect()
              : this.startMatchmaking();
        },
        _hasClickedCloseDuringTransition: !1,
        handleCloseDuringTransition: s.Ember.computed(
          '_hasClickedCloseDuringTransition',
          'isSearching',
          'isMatchFound',
          'hasPenaltyTime',
          function () {
            (this.get('isSearching') ||
              this.get('isMatchFound') ||
              this.get('hasPenaltyTime')) &&
              (this.set('_isTransitioningState', !1),
              this.get('_hasClickedCloseDuringTransition') &&
                (this.set('_hasClickedCloseDuringTransition', !1),
                this.cancelMatchmaking()));
          },
        ),
        lobbyAvailabilityMatchmakingObserver: s.Ember.observer(
          'hasQueueAvailabilityWarning',
          'isSearching',
          function () {
            this.get('hasQueueAvailabilityWarning') &&
              this.get('isSearching') &&
              this.get('lobbiesService').cancelMatchmakingSearch();
          },
        ),
        closeButtonClicked: function () {
          this.blurCloseButton(),
            this.get('isSearching') || this.get('isMatchFound')
              ? this.cancelMatchmaking()
              : this.get('_isTransitioningState')
              ? (this.set('_hasClickedCloseDuringTransition', !0),
                this.get('lobbiesService')
                  .leaveLobby()
                  .catch((e) => {
                    x(`Leaving lobby failed: ${e}`),
                      this.set('_isTransitioningState', !1);
                  }))
              : this.leavePartyModal();
        },
        blurCloseButton: function () {
          const e = this.element.querySelector('button.close');
          e && e.blur();
        },
        actions: {
          confirmButton: function () {
            this.confirmButtonClicked();
          },
          closeButton: function () {
            this.closeButtonClicked();
          },
        },
      },
    );
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '7wIUnUfA',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["arrow-footer"],null,[["animationsEnabled","confirmButtonDisabled","confirmButtonText","confirmButtonShowTooltip","confirmButtonTooltipText","confirmButtonHoverSound","confirmButtonClickSound","closeButtonDisabled","closeButtonText","closeButtonHoverSound","closeButtonClickSound","closeButtonType","confirmButtonClicked","closeButtonClicked"],[["get",["animationsEnabled"]],["get",["confirmButtonDisabled"]],["get",["confirmButtonText"]],["get",["confirmButtonShowTooltip"]],["get",["confirmButtonTooltipText"]],["get",["buttonSounds","confirmHover"]],["get",["buttonSounds","confirmClick"]],["get",["closeButtonDisabled"]],["get",["closeButtonText"]],["get",["buttonSounds","closeHover"]],["get",["buttonSounds","closeClick"]],"close","confirmButton","closeButton"]]],false],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-eligibility-observer",["concat",[["unknown",["eligibilityObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-showing-party-observer",["concat",[["unknown",["showingPartyObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-search-error-penalized-summoner-id-observer",["concat",[["unknown",["searchErrorPenalizedSummonerIdObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-close-transition-observer",["concat",[["unknown",["handleCloseDuringTransition"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","style","display:none;"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-games-error"],["static-attr","id","custom-games-disabled-reasons"],["static-attr","type","dialog-medium"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showCustomGameContentWarning"]]],null,4,3],["text","  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-games-error"],["static-attr","id","custom-games-champ-select-error"],["static-attr","type","dialog-medium"],["flush-element"],["text","\\n    "],["open-element","h5",[]],["static-attr","class","preserve-case"],["flush-element"],["append",["unknown",["tra","custom_game_champ_select_error_start_game"]],false],["close-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["append",["unknown",["customGameChampSelectErrorBody"]],false],["close-element"],["text","\\n    "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameChampSelectErrorPlayers"]]],null,1],["text","    "],["close-element"],["text","\\n"],["block",["if"],[["get",["showCustomGameMinorRestrictionDetails"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["matchmaking-errors"],null,[["_isTransitioningState"],[["get",["_isTransitioningState"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-games-minor-restriction-details"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_header"]],false],["close-element"],["text","\\n        "],["open-element","ul",[]],["flush-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_real_name_auth"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_healthy_time"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_harmful_behavior"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","custom_game_minor_restriction_details_footer_text_before_link"]],false],["text","\\n          "],["open-element","a",[]],["static-attr","href","http://lol.qq.com/jksh"],["static-attr","target","_blank"],["flush-element"],["text","http://lol.qq.com/jksh"],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["append",["get",["player"]],false],["close-element"],["text","\\n"]],"locals":["player"]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["append",["get",["reason"]],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","      "],["open-element","h5",[]],["static-attr","class","preserve-case"],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_header"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_question"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_reasons_header"]],false],["close-element"],["text","\\n      "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameRewardsDisabledReasons"]]],null,2],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","ul",[]],["flush-element"],["text","\\n        "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_content_warning"]],false],["close-element"],["text","\\n        "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_rewards_warning"]],false],["close-element"],["text","\\n        "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_question"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(361),
      s = n(i),
      l = a(26),
      r = n(l),
      c = a(5),
      m = n(c),
      d = a(1),
      p = n(d);
    a(362);
    e.exports = o.Ember.Component.extend(
      s.default,
      r.default,
      m.default,
      p.default,
      {
        layout: a(363),
        classNames: ['parties-lower-section'],
        classNameBindings: [
          'haveCurrentPlayer:parties-lower-section-fade-in',
          'friendDropping:droppable-dropping',
          'friendDragging:droppable-available',
          'animationsEnabled:animations-enabled:animations-disabled',
          'partiesV2Enabled:parties-v2',
        ],
        currentPlayer: null,
        haveCurrentPlayer: o.Ember.computed.notEmpty('currentPlayer'),
        lobbiesService: o.Ember.inject.service('lobbies'),
        matchmakingService: o.Ember.inject.service('matchmaking'),
        partySettingsService: o.Ember.inject.service('party-settings'),
        invitesService: o.Ember.inject.service('invites'),
        animationsEnabled: o.Ember.computed.alias(
          'partySettingsService.animationsEnabled',
        ),
        canInvite: o.Ember.computed.alias(
          'lobbiesService.currentPlayerCanInvite',
        ),
        tooltipText: o.Ember.computed(
          'tra.ready',
          'tra.metadata',
          'lobbiesService.currentPlayerCanInvite',
          function () {
            return this.get('lobbiesService.currentPlayerCanInvite')
              ? this.get('tra.parties_drag_to_invite')
              : '';
          },
        ),
        acceptMimes: ['application/riot.player+json'],
        isInQueue: o.Ember.computed.or(
          'matchmakingService.isSearching',
          'matchmakingService.isMatchFound',
        ),
        isNotInQueue: o.Ember.computed.not('isInQueue'),
        canReceiveDrops: o.Ember.computed.and('canInvite', 'isNotInQueue'),
        friendDragging: o.Ember.computed.and(
          'canReceiveDrops',
          'dropAvailable',
        ),
        friendDropping: o.Ember.computed.and('canReceiveDrops', 'dropping'),
        droppableDropped: function (e, t) {
          if (!this.get('canReceiveDrops')) return !1;
          const a = this.get('invitesService');
          t && t.summonerId
            ? a.invitePlayer(t.summonerId, t.name).then(
                () => {
                  this.playSound('/fe/lol-parties/sfx-soc-ui-drop.ogg');
                },
                () => {
                  this.playNotEligibleSound();
                },
              )
            : this.playNotEligibleSound();
        },
        droppableDragEntered: function () {
          this.playSound('/fe/lol-parties/sfx-soc-ui-drag.ogg');
        },
        playNotEligibleSound: function () {
          this.playSound('/fe/lol-parties/sfx-lobby-notif-bad-invite.ogg');
        },
      },
    );
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(3),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    const s = (0, i.default)('plugin:parties:droppable:error');
    s.log = i.default.consoleWrap('error');
    const l = ['dragenter', 'dragleave', 'dragover', 'drop'],
      r = ['dragenter', 'dragleave', 'drop'];
    e.exports = n.Ember.Mixin.create({
      classNameBindings: [],
      droppable: !0,
      acceptMimes: [],
      dropEffect: 'move',
      acceptedMime: '',
      canAcceptDrop: function (e) {
        return this.get('acceptMimes').some((t) => {
          if (-1 !== e.types.indexOf(t)) return this.set('acceptedMime', t), !0;
        });
      },
      _initDroppable: n.Ember.on('didInsertElement', function () {
        this._attachListeners();
      }),
      _cleanupDroppable: n.Ember.on('willDestroyElement', function () {
        this._detachListeners();
      }),
      _attachListeners: function () {
        (this._droppableEvent = this._droppableEvent.bind(this)),
          l.forEach((e) => {
            this.element.addEventListener(e, this._droppableEvent);
          }),
          (this._droppableDocEvents = this._droppableDocEvents.bind(this)),
          r.forEach((e) => {
            document.addEventListener(e, this._droppableDocEvents);
          });
      },
      _detachListeners: function () {
        l.forEach((e) => {
          this.element.removeEventListener(e, this._droppableEvent);
        }),
          r.forEach((e) => {
            document.removeEventListener(e, this._droppableDocEvents);
          });
      },
      _checkDropEvent: function (e) {
        const t = e.dataTransfer,
          a = this.get('droppable'),
          n = this.canAcceptDrop(t);
        return a && n;
      },
      _updateDropState: n.Ember.observer('droppable', function () {
        this.get('droppable') ||
          (this.set('dropping', !1), this.set('dropAvailable', !1));
      }),
      _droppableEvent: function (e) {
        if (this._checkDropEvent(e))
          if ('dragover' === e.type)
            e.preventDefault(),
              (e.dataTransfer.dropEffect = this.get('dropEffect'));
          else if ('dragenter' === e.type)
            this.get('dropping')
              ? this.set('_ignoreNextDragLeave', !0)
              : (e.preventDefault(),
                this.set('dropping', !0),
                this.trigger('droppableDragEntered')),
              this.set('dropAvailable', !0);
          else if ('dragleave' === e.type)
            this.get('_ignoreNextDragLeave')
              ? this.set('_ignoreNextDragLeave', !1)
              : (this.set('dropping', !1), this.trigger('droppableDragLeft'));
          else if ('drop' === e.type) {
            e.preventDefault(),
              this.set('dropping', !1),
              this.set('dropAvailable', !1);
            const t = e.dataTransfer,
              a = this.get('acceptedMime');
            let n = t.getData(a);
            if (-1 !== a.indexOf('json'))
              try {
                n = JSON.parse(n);
              } catch (t) {
                s('Error parsing JSON drop data:', n, t);
              }
            this.trigger('droppableDropped', a, n, t);
          }
      },
      _droppableDocEvents: function (e) {
        this._checkDropEvent(e) &&
          ('dragenter' === e.type
            ? this.get('dropAvailable')
              ? this.set('_ignoreNextDocLeave', !0)
              : this.set('dropAvailable', !0)
            : 'dragleave' === e.type
            ? this.get('_ignoreNextDocLeave')
              ? this.set('_ignoreNextDocLeave', !1)
              : this.set('dropAvailable', !1)
            : 'drop' === e.type &&
              (this.set('_ignoreNextDocLeave', !1),
              this.set('dropAvailable', !1)));
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '3ZOAdzbG',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\lower-section-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\lower-section-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\lower-section-component\\\\index.js\\" "],["text","\\n"],["yield","default"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","parties-invite-dropzone"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-invite-dropzone-icon"],["flush-element"],["close-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","parties-invite-dropzone-tooltip"],["flush-element"],["text","\\n    "],["append",["unknown",["tooltipText"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(15),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    a(365),
      (e.exports = n.Ember.Component.extend({
        layout: a(366),
        classNames: ['parties-placeholder-banner'],
        lobbiesService: n.Ember.inject.service('lobbies'),
        partySettingsService: n.Ember.inject.service('party-settings'),
        animationsEnabled: n.Ember.computed.alias(
          'partySettingsService.bannerAnimationsEnabled',
        ),
        pendingInvites: n.Ember.computed.alias('lobbiesService.pendingInvites'),
        partiesViewport: i.default,
        partiesViewportIsShowing: n.Ember.computed.alias(
          'partiesViewport.isShowing',
        ),
        placeholder: null,
        isInQueue: !1,
        partyInvitesAllowed: !1,
        invitedVideoSrc: '/fe/lol-parties/parties/banner/invited-banner.webm',
        videoPausedObserver: n.Ember.on(
          'init',
          n.Ember.observer('partiesViewportIsShowing', function () {
            if (
              this.element &&
              this.get('isInvitedBanner') &&
              this.get('animationsEnabled')
            ) {
              const e = this.element.querySelector(
                '.placeholder-invited-video',
              );
              if (e) {
                const t = this.get('partiesViewportIsShowing');
                e.paused && t && e.play();
              }
            }
          }),
        ),
        isInvitedBanner: n.Ember.computed(
          'isInQueue',
          'placeholder',
          'pendingInvites.[]',
          function () {
            if (this.get('isInQueue')) return !0;
            const e = this.get('placeholder') || 0;
            return this.get('pendingInvites').length > e;
          },
        ),
        actions: {
          showInviteModal: function () {
            this.get('partyInvitesAllowed') &&
              this.sendAction('showInviteModal');
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '4+HlxhpL',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\placeholder-banner-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\placeholder-banner-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\placeholder-banner-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isInvitedBanner"]]],null,4],["text","\\n"],["block",["if"],[["get",["partyInvitesAllowed"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invite_tooltip"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","placeholder-invite-button"],["flush-element"],["text","\\n"],["block",["player-management-button"],null,[["type","action"],["invite","showInviteModal"]],0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","placeholder-invited-image"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","video",[]],["static-attr","class","placeholder-invited-video"],["static-attr","autoplay","true"],["static-attr","preload","auto"],["static-attr","loop","true"],["dynamic-attr","src",["unknown",["invitedVideoSrc"]],null],["flush-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","placeholder-invited-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["animationsEnabled"]]],null,3,2],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(15),
      s = n(i);
    a(368);
    var l = a(117),
      r = a(109),
      c = n(r);
    e.exports = o.Ember.Component.extend({
      layout: a(369),
      classNameBindings: [
        'isMe:parties-player-banner-main:parties-player-banner',
      ],
      lobbiesService: o.Ember.inject.service('lobbies'),
      partySettingsService: o.Ember.inject.service('party-settings'),
      currentPartySize: o.Ember.computed.alias(
        'lobbiesService.currentPartySize',
      ),
      animationsEnabled: o.Ember.computed.alias(
        'partySettingsService.largeAreaAnimationsEnabled',
      ),
      partiesViewport: s.default,
      partiesViewportIsShowing: o.Ember.computed.alias(
        'partiesViewport.isShowing',
      ),
      queueType: o.Ember.computed.alias('selected.queue.type'),
      member: null,
      isMe: !1,
      isInQueue: !1,
      init() {
        this._super(...arguments),
          (this.onIntroPlayed = this.onIntroPlayed.bind(this));
      },
      didInsertElement() {
        this._super(...arguments);
        const e = this.element.querySelector('lol-regalia-parties-element');
        e.addEventListener('banner-intro-played', this.onIntroPlayed);
      },
      willDestroyElement() {
        const e = this.element.querySelector('lol-regalia-parties-element');
        e.removeEventListener('banner-intro-played', this.onIntroPlayed),
          this._super(...arguments);
      },
      onIntroPlayed(t) {
        const e =
          t && t.detail && t.detail.summonerId ? t.detail.summonerId : null;
        e && c.default.didPlay(e);
      },
      videoPausedObserver: o.Ember.on(
        'init',
        o.Ember.observer('partiesViewportIsShowing', function () {
          if (
            this.element &&
            this.get('member.showGhostedBanner') &&
            this.get('animationsEnabled')
          ) {
            const e = this.element.querySelector('.player-not-ready-video');
            if (e) {
              const t = this.get('partiesViewportIsShowing');
              e.paused && t && e.play();
            }
          }
        }),
      ),
      setupUXListener: o.Ember.on('didInsertElement', function () {
        let e = this.get('uxSettingsListener');
        e ||
          ((e = this._uxSettingsUpdate.bind(this)),
          this.set('showIntroListeners', e)),
          o.UXSettings.addObserver(e);
      }),
      destroyUXListener: o.Ember.on('willDestroyElement', function () {
        const e = this.get('uxSettingsListener');
        e && o.UXSettings.removeObserver(e);
      }),
      _uxSettingsUpdate: function (e) {
        const t = this.get('animationsEnabled');
        null === t ||
          void 0 === t ||
          (e &&
            t !== e.largeAreaAnimationsEnabled &&
            this.set('animationsEnabled', e.largeAreaAnimationsEnabled));
      },
      showIntro: o.Ember.computed(
        'animationsEnabled',
        'member.summonerId',
        'member.showGhostedBanner',
        'currentPartySize',
        'partiesViewportIsShowing',
        function () {
          const e = this.get('animationsEnabled');
          if (null !== e && void 0 !== e) {
            const e = this.get('member.summonerId');
            if (e) {
              const t = this.get('member.showGhostedBanner');
              if (null !== t && void 0 !== t) {
                const t = this.get('currentPartySize');
                if (t) {
                  const t = c.default.shouldPlay(e);
                  return t;
                }
              }
            }
          }
        },
      ),
      isLeader: o.Ember.computed(
        'member.isLeader',
        'lobbiesService.otherCurrentPartyMembers.@each.isLeader',
        function () {
          const e = this.get('member');
          return !!e && e.isLeader;
        },
      ),
      bannerType: o.Ember.computed('isMe', function () {
        return this.get('isMe')
          ? l.BANNER_TYPES.CURRENT_PLAYER
          : l.BANNER_TYPES.OTHER_PLAYER;
      }),
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'vTTpCrpL',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-banner-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-banner-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-banner-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["member","showGhostedBanner"]]],null,2],["text","\\n"],["open-element","lol-regalia-parties-element",[]],["dynamic-attr","banner-type",["unknown",["bannerType"]],null],["dynamic-attr","summoner-id",["unknown",["member","summonerId"]],null],["dynamic-attr","puuid",["unknown",["member","puuid"]],null],["dynamic-attr","visor-down",["unknown",["isInQueue"]],null],["dynamic-attr","party-size",["unknown",["currentPartySize"]],null],["dynamic-attr","show-intro",["unknown",["showIntro"]],null],["dynamic-attr","hide-crest-border",["unknown",["member","showGhostedBanner"]],null],["dynamic-attr","hide-banner",["unknown",["member","showGhostedBanner"]],null],["dynamic-attr","queue",["unknown",["queueType"]],null],["dynamic-attr","position",["unknown",["member","firstPositionPreference"]],null],["flush-element"],["text","\\n\\n  "],["append",["helper",["player-party-controls"],null,[["member","isLeader","isMe","positionSelectorEmberApp","positionSelectorData","cachePositionSelector"],[["get",["member"]],["get",["isLeader"]],["get",["isMe"]],["get",["positionSelectorEmberApp"]],["get",["positionSelectorData"]],["helper",["action"],[["get",[null]],["get",["cachePositionSelector"]]],null]]]],false],["text","\\n\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","player-not-ready-image"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","video",[]],["static-attr","class","player-not-ready-video"],["static-attr","autoplay","true"],["static-attr","preload","auto"],["static-attr","loop","true"],["static-attr","src","/fe/lol-parties/parties/banner/invited-banner.webm"],["flush-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","player-not-ready-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["animationsEnabled"]]],null,1,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(22),
      s = n(i),
      l = a(7);
    a(371);
    var r = a(5),
      c = n(r),
      m = a(1),
      d = n(m);
    const p = (0, o.emberDataBinding)({
      Ember: o.Ember,
      websocket: (0, o.getProvider)().getSocket(),
      logPrefix: 'parties:player-banner:component',
      basePaths: { summoner: '/lol-summoner', chat: '/lol-chat' },
    });
    e.exports = o.Ember.Component.extend(p, c.default, d.default, {
      layout: a(372),
      classNames: ['player-party-controls'],
      classNameBindings: ['isMe:main-player-controls:other-player-controls'],
      isLeader: !1,
      isMe: !1,
      chatService: o.Ember.inject.service('chat'),
      lobbiesService: o.Ember.inject.service('lobbies'),
      matchmakingService: o.Ember.inject.service('matchmaking'),
      partySettingsService: o.Ember.inject.service('party-settings'),
      eligibilitiesEntity: s.default,
      restrictions: o.Ember.computed.alias(
        'eligibilitiesEntity.playerRestrictions',
      ),
      observedRestrictions: [],
      memberRestrictions: null,
      contextMenuManager: o.UIKit.getContextMenuManager(),
      animationsEnabled: o.Ember.computed.alias(
        'partySettingsService.bannerAnimationsEnabled',
      ),
      isPlaceholder: o.Ember.computed.not('member'),
      isNotPlaceholder: o.Ember.computed.not('isPlaceholder'),
      currentTeamIsFull: o.Ember.computed.alias(
        'lobbiesService.currentTeamIsFull',
      ),
      summonerId: o.Ember.computed.alias('member.summonerId'),
      showPartyOwnerTools: o.Ember.computed.and(
        'currentPlayerIsLeader',
        'isNotMe',
        'notQueued',
      ),
      isNotMe: o.Ember.computed.not('isMe'),
      showGhostedBanner: o.Ember.computed.alias('member.showGhostedBanner'),
      shouldShowGhostedBanner: o.Ember.computed.and(
        'isNotPlaceholder',
        'isNotMe',
        'showGhostedBanner',
      ),
      hasInvitePrivileges: o.Ember.computed.alias('member.allowedInviteOthers'),
      currentPlayerIsLeader: o.Ember.computed.alias(
        'lobbiesService.isCurrentPlayerPartyLeader',
      ),
      currentPlayerIsNotLeader: o.Ember.computed.not('currentPlayerIsLeader'),
      isMatchNotFound: o.Ember.computed.alias(
        'matchmakingService.isMatchNotFound',
      ),
      isNotSearching: o.Ember.computed.alias(
        'matchmakingService.isNotSearching',
      ),
      notQueued: o.Ember.computed.and('isMatchNotFound', 'isNotSearching'),
      showPositionSelector: o.Ember.computed(
        'member',
        'lobbiesService.showPositionSelector',
        function () {
          return (
            !!this.get('member') &&
            !!this.get('lobbiesService.showPositionSelector')
          );
        },
      ),
      groupMissingTokenRestrictions: function (e) {
        return this.get('eligibilitiesEntity').groupMissingTokenRestrictions(e);
      },
      _updateMemberRestrictions: function () {
        const e = this.get('restrictions'),
          t = this.get('member.summonerId'),
          a = o.Ember.A();
        if (o.Ember.isArray(e)) {
          const n = this.groupMissingTokenRestrictions(e);
          for (let e = 0; e < n.length; e++) {
            const o = n[e];
            -1 !== o.summonerIds.indexOf(t) && a.pushObject(o);
          }
        }
        this.set('memberRestrictions', a);
      },
      _updateRestrictionObservers: function () {
        const e = [];
        this.get('observedRestrictions').forEach((e) => {
          e.removeObserver(
            'restrictionArgs.playerMinLevelRestriction',
            this,
            this._updateMemberRestrictions,
          );
        }),
          this.get('restrictions') &&
            this.get('restrictions').forEach((t) => {
              t.addObserver(
                'restrictionArgs.playerMinLevelRestriction',
                this,
                this._updateMemberRestrictions,
              ),
                e.push(t);
            }),
          this.set('observedRestrictions', e);
      },
      observeRestrictionArgs: o.Ember.on(
        'init',
        o.Ember.observer(
          'restrictions',
          'restrictions.@each.restrictionCode',
          'restrictions.@each.summonerIds',
          'member.summonerId',
          function () {
            this._updateRestrictionObservers(),
              this._updateMemberRestrictions();
          },
        ),
      ),
      restrictionLeaderClass: o.Ember.computed(
        'currentPlayerIsLeader',
        function () {
          return this.get('currentPlayerIsLeader') ? 'leader' : '';
        },
      ),
      hasMemberRestrictions: o.Ember.computed.gt(
        'memberRestrictions.length',
        0,
      ),
      shouldShowRestrictions: o.Ember.computed.and(
        'member',
        'hasMemberRestrictions',
      ),
      restrictionToolTipText: o.Ember.computed(
        'tra.ready',
        'memberRestrictions.@each.restrictionCode',
        'isMe',
        function () {
          const e = this.get('memberRestrictions'),
            t = o.Ember.A(),
            a = this.get('isMe');
          let n = !1;
          for (let o = 0; o < e.length; o++) {
            const i = e[o],
              r = i.restrictionCode;
            let c = i.restrictionArgs;
            if (l.TENCENT_MINOR_RESTRICTIONS.includes(r))
              if (n) continue;
              else n = !0;
            let m = `game_select_queue_restriction_player_${r.toLowerCase()}`;
            if ('MissingToken' === r) {
              const e = a ? 'self' : 'player';
              m = `game_select_queue_restriction_${e}_${r.toLowerCase()}`;
            } else if ('PlayerRankSoloOnlyRestriction' === r) {
              const e = s.default.getLocInfoForPlayerRankSoloOnlyRestriction(i);
              (m = e.key), (c = e.args);
            }
            t.pushObject(this.get('tra').formatString(m, c));
          }
          return t;
        },
      ),
      tooltipConfig: {
        targetAnchor: { x: 'center', y: 'bottom' },
        tooltipAnchor: { x: 'center', y: 'top' },
      },
      observeCurrentPlayerIsLeader: o.Ember.observer(
        'currentPlayerIsLeader',
        function () {
          o.Ember.run.once(this, this._onCurrentPlayerIsLeader);
        },
      ),
      _onCurrentPlayerIsLeader: function () {
        this.set('_transferringLeadership', !1);
      },
      isFriended: o.Ember.computed(
        'member',
        'member.summonerId',
        'chatService.friends.[]',
        function () {
          return this.get('chatService').isFriend(
            this.get('member.summonerId'),
          );
        },
      ),
      contextMenuModel: o.Ember.computed(
        'showPartyOwnerTools',
        'hasInvitePrivileges',
        'isMe',
        'member',
        'isFriended',
        'tra.ready',
        'tra.context_menu_promote_to_leader',
        'tra.context_menu_kick',
        'tra.context_menu_friend_request',
        'tra.context_menu_revoke_invite_privilege',
        'tra.context_menu_grant_invite_privilege',
        function () {
          const e = this.get('isFriended'),
            t = this.get('showPartyOwnerTools') || !e;
          return !this.get('isMe') && this.get('member') && t
            ? [
                {
                  action: function () {
                    this.send('promoteToOwner');
                  },
                  class: 'promote',
                  target: this,
                  label: this.get('tra.context_menu_promote_to_leader'),
                },
                {
                  action: function () {
                    this.send('kick');
                  },
                  class: 'kick',
                  target: this,
                  label: this.get('tra.context_menu_kick'),
                },
                {
                  action: function () {
                    this.send('sendFriendRequest');
                  },
                  class: 'add-friend',
                  target: this,
                  label: this.get('tra.context_menu_friend_request'),
                  hidden: e,
                },
                {
                  action: function () {
                    this.send('toggleInvitePrivilege');
                  },
                  class: this.get('hasInvitePrivileges')
                    ? 'revoke-invite'
                    : 'grant-invite',
                  target: this,
                  label: this.get('hasInvitePrivileges')
                    ? this.get('tra.context_menu_revoke_invite_privilege')
                    : this.get('tra.context_menu_grant_invite_privilege'),
                },
              ]
            : null;
        },
      ),
      promotePlayer: function () {
        const e = this.get('member');
        if (!e || !e.summonerId)
          throw new Error('Attempting to act on invalid party member: ' + e);
        this.set('_transferringLeadership', !0),
          this.get('lobbiesService').transferLeadershipToPlayer(e.summonerId);
      },
      blockPlayer: function (e) {
        this.get('api.chat').post('/v1/blocked-players', e);
      },
      sendFriendRequest: function (e) {
        this.get('api.chat').post('/v1/friend-requests', e);
      },
      actions: {
        openCaptainMenu: function () {
          this.get('contextMenuModel') &&
            (this.contextMenuManager.setMenuItems(this.get('contextMenuModel')),
            this.contextMenuManager.openAtEvent(event));
        },
        sendFriendRequest: function () {
          if (this.get('member')) {
            const e = {
              direction: 'out',
              name: this.get('member.summonerName'),
            };
            this.sendFriendRequest(e), this.set('isFriended', !0);
            const t = this.get('tra').formatString(
              'context_menu_friend_request_sent_to',
              { summonerName: this.get('member.summonerName') },
            );
            this.showToast(t);
          }
        },
        kick: function () {
          if (!this.get('member'))
            throw new ReferenceError(
              'game-select-lobby-panel-teams-player component must have a member',
            );
          const e = this.get('tra').formatString(
              'lobby_kick_confirmation_text',
              { summonerName: this.get('member.summonerName') },
            ),
            t = this.$(`<lol-uikit-content-block type="dialog-small">
          <p>${e}</p>
        </lol-uikit-content-block>`),
            a = this.get('member.summonerId');
          if (
            this.get('currentPlayerIsLeader') &&
            !this.get('_transferringLeadership')
          ) {
            const e = this.showModal({
              type: 'DialogConfirm',
              data: {
                contents: t,
                acceptText: this.get('tra.parties_button_kick'),
                declineText: this.get('tra.parties_button_cancel'),
                onAccept: () => {
                  this.get('lobbiesService').removePlayerFromParty(a);
                },
              },
            });
            e.domNode.classList.add('parties-kick-player-modal');
          }
        },
        toggleInvitePrivilege: function () {
          const e = this.get('member'),
            t = this.get('currentPlayerIsLeader');
          if (
            !this.get('_transferringLeadership') &&
            t &&
            e &&
            !this.get('isMe')
          ) {
            const t = e.allowedInviteOthers ? 'revoke-invite' : 'grant-invite',
              a = this.get('member.summonerId');
            this.get('lobbiesService').sendInvitePrivilegeAction(a, t);
          }
        },
        promoteToOwner: function () {
          this.get('member') && this.promotePlayer();
        },
        block: function () {
          if (this.get('member')) {
            const e = { summonerId: this.get('member.summonerId') };
            this.blockPlayer(e);
          }
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'Uy8PZbFD',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-party-controls-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-party-controls-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-party-controls-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-player-labels-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-player-name-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLeader"]]],null,12],["text","    "],["open-element","lol-uikit-resizing-text-field",[]],["static-attr","class","parties-player-name"],["static-attr","data-max-width","140"],["flush-element"],["text","\\n      "],["append",["unknown",["member","summonerName"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["isNotMe"]]],null,11],["text","\\n\\n\\n"],["open-element","div",[]],["static-attr","class","lol-not-ready-loader"],["flush-element"],["text","\\n"],["block",["if"],[["get",["shouldShowGhostedBanner"]]],null,4],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldShowRestrictions"]]],null,3],["text","\\n\\n"],["block",["if"],[["get",["showPositionSelector"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["player-positions"],null,[["member","isMe","currentTeamIsFull","animationsEnabled","positionSelectorEmberApp","positionSelectorData","cachePositionSelector"],[["get",["member"]],["get",["isMe"]],["get",["currentTeamIsFull"]],["get",["animationsEnabled"]],["get",["positionSelectorEmberApp"]],["get",["positionSelectorData"]],["helper",["action"],[["get",[null]],["get",["cachePositionSelector"]]],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","p",[]],["flush-element"],["append",["get",["restriction"]],false],["close-element"],["text","\\n"]],"locals":["restriction"]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n"],["block",["each"],[["get",["restrictionToolTipText"]]],null,1],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-lobby-restrictions ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","captain_controls_tooltip"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["player-management-button"],null,[["type","action"],["options","openCaptainMenu"]],5]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","context_menu_friend_request"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["player-management-button"],null,[["type","action"],["add-friend","sendFriendRequest"]],7]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","kick_tooltip"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["comment"," kick button is for party owners only "],["text","\\n"],["block",["player-management-button"],null,[["type","action"],["kick","kick"]],9]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","player-party-tools"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showPartyOwnerTools"]]],null,10],["text","\\n    "],["comment"," any party member can Add Friend "],["text","\\n"],["block",["unless"],[["get",["isFriended"]]],null,8],["text","\\n    "],["comment"," options menu button is for party owners only "],["text","\\n"],["block",["if"],[["get",["showPartyOwnerTools"]]],null,6],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","parties-player-leader-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(25),
      i = n(o),
      s = a(2),
      l = n(s),
      r = a(0),
      c = a(12),
      m = a(3),
      d = n(m),
      p = a(5),
      u = n(p),
      g = a(15),
      b = n(g);
    a(374);
    const h = r.EmberAddons.EmberLifeline.RunMixin,
      f = (0, d.default)('plugin:parties:player-positions-component:warn'),
      y = 'lol-parties-player-position.primary',
      _ = 'lol-parties-player-position.secondary';
    e.exports = r.Ember.Component.extend(h, u.default, {
      layout: a(375),
      classNames: ['parties-player-positions'],
      classNameBindings: [
        'playIntroAnimation:play-intro-animation',
        'isCurrentPlayer:is-current-player:is-member',
        'showSingleSelector:single-selector',
      ],
      _screenRootHideCallback: void 0,
      layerManager: r.UIKit.getLayerManager(),
      screenRoot: r.Viewport.fullScreen().getScreenRoot(
        b.default.get('viewportApiKey'),
        'rcp-fe-lol-parties',
      ),
      _isSelectingPosition: !1,
      lobbiesService: r.Ember.inject.service('lobbies'),
      gameflowService: r.Ember.inject.service('gameflow'),
      isMap21: r.Ember.computed.alias('lobbiesService.isMap21'),
      animationsEnabled: !1,
      isLobby: r.Ember.computed.readOnly('gameflowService.isLobby'),
      notInLobby: r.Ember.computed.not('isLobby'),
      playIntroAnimation: !1,
      setupListeners: r.Ember.on('didInsertElement', function () {
        const e = this.element.querySelector(y),
          t = this._primaryClick.bind(this);
        e.addEventListener('mousedown', t),
          this.set('_primaryClickListener', t);
        const a = this.element.querySelector(_),
          n = this._secondaryClick.bind(this);
        a.addEventListener('mousedown', n),
          this.set('_secondaryClickListener', n);
        const o = this._bannerIntroPlaying.bind(this);
        this.element.parentNode.addEventListener('banner-intro-playing', o),
          this.set('_introPlayingListener', o);
        const i = this._bannerIntroComplete.bind(this);
        this.element.parentNode.addEventListener('banner-intro-complete', i),
          this.set('_introCompleteListener', i);
      }),
      destroyListeners: r.Ember.on('willDestroyElement', function () {
        const e = this.element.querySelector(y);
        e.removeEventListener('mousedown', this.get('_primaryClickListener'));
        const t = this.element.querySelector(_);
        t.removeEventListener('mousedown', this.get('_secondaryClickListener')),
          this.element.parentNode.removeEventListener(
            'banner-intro-playing',
            this.get('_introPlayingListener'),
          ),
          this.element.parentNode.removeEventListener(
            'banner-intro-complete',
            this.get('_introCompleteListener'),
          );
      }),
      onGameflowUpdate: r.Ember.observer('isLobby', function () {
        r.Ember.run.once(this, this._handleLobbyChange);
      }),
      onEnteringMap21LobbyObserver: r.Ember.on(
        'init',
        r.Ember.observer('isMap21', function () {
          r.Ember.run.once(this, this._handleChangeToMap21);
        }),
      ),
      _handleChangeToMap21: function () {
        if (this.get('isMap21') && this.get('isCurrentPlayer')) {
          const e = this._getCurrentPositionPreferences(),
            t = this._remapPositionForMap21(e.primaryPosition),
            a = this._remapPositionForMap21(e.secondaryPosition);
          if (t === c.POSITIONS.UNSELECTED && a === c.POSITIONS.UNSELECTED)
            return;
          t === a &&
            (this.set('requestedPrimaryPosition', c.POSITIONS.UNSELECTED),
            this.set('requestedSecondaryPosition', c.POSITIONS.UNSELECTED),
            this.get('lobbiesService')
              .setPositionPreferences({
                firstPreference: c.POSITIONS.UNSELECTED,
                secondPreference: c.POSITIONS.UNSELECTED,
              })
              .then(
                () => {
                  this.set('requestedPrimaryPosition', null),
                    this.set('requestedSecondaryPosition', null);
                },
                () => {
                  this.set('requestedPrimaryPosition', null),
                    this.set('requestedSecondaryPosition', null);
                },
              ));
        }
      },
      _remapPositionForMap21: function (e) {
        return (
          this.get('isMap21') &&
            e in c.MAP21_MAPPINGS &&
            (e = c.MAP21_MAPPINGS[e]),
          e
        );
      },
      primaryPosition: r.Ember.computed(
        'requestedPrimaryPosition',
        'member.firstPositionPreference',
        'isMap21',
        function () {
          const e =
            this.get('requestedPrimaryPosition') ||
            this.get('member.firstPositionPreference');
          return this._remapPositionForMap21(e);
        },
      ),
      secondaryPosition: r.Ember.computed(
        'requestedSecondaryPosition',
        'member.secondPositionPreference',
        'isMap21',
        function () {
          const e =
            this.get('requestedSecondaryPosition') ||
            this.get('member.secondPositionPreference');
          return this._remapPositionForMap21(e);
        },
      ),
      isCurrentPlayer: r.Ember.computed.alias('isMe'),
      isNotCurrentPlayer: r.Ember.computed.not('isCurrentPlayer'),
      showSingleSelector: r.Ember.computed.or(
        'currentTeamIsFull',
        'isPrimaryFill',
      ),
      isPrimaryDisabled: r.Ember.computed.bool('notInLobby'),
      isPrimaryUnselected: r.Ember.computed.equal(
        'primaryPosition',
        c.POSITIONS.UNSELECTED,
      ),
      isPrimaryFill: r.Ember.computed.equal(
        'primaryPosition',
        c.POSITIONS.FILL,
      ),
      isSecondaryUnselected: r.Ember.computed.equal(
        'secondaryPosition',
        c.POSITIONS.UNSELECTED,
      ),
      secondaryVideoDelay: 100,
      isSecondaryDisabled: r.Ember.computed(
        'notInLobby',
        'isPrimaryUnselected',
        'isPrimaryFill',
        function () {
          return (
            !!(
              this.get('notInLobby') ||
              this.get('isPrimaryUnselected') ||
              this.get('isPrimaryFill')
            ) ||
            (this.runTask(() => {
              this.playPositionVideo(_);
            }, this.get('secondaryVideoDelay')),
            !1)
          );
        },
      ),
      primaryTooltipConfig: {
        targetAnchor: { x: 'left', y: 'center' },
        tooltipAnchor: { x: 'right', y: 'center' },
        offset: { x: 0, y: 0 },
      },
      secondaryTooltipConfig: {
        targetAnchor: { x: 'right', y: 'center' },
        tooltipAnchor: { x: 'left', y: 'center' },
        offset: { x: 0, y: 0 },
      },
      primaryPositionLabelText: r.Ember.computed(
        'isPrimaryFill',
        'tra.parties_primary_position',
        'tra.parties_primary_fill',
        function () {
          return this.get('isPrimaryFill')
            ? this.get('tra.parties_primary_fill')
            : this.get('tra.parties_primary_position');
        },
      ),
      positionText: function (e) {
        return this.get('isMap21') && e === c.POSITIONS.BOTTOM
          ? this.get('tra.parties_position_lane')
          : ((e = e.toLowerCase()), this.get(`tra.parties_position_${e}`));
      },
      primaryPositionText: r.Ember.computed(
        'isPrimaryFill',
        'primaryPosition',
        function () {
          return this.get('isPrimaryFill')
            ? ''
            : this.positionText(this.get('primaryPosition'));
        },
      ),
      secondaryPositionText: r.Ember.computed('secondaryPosition', function () {
        return this.positionText(this.get('secondaryPosition'));
      }),
      _primaryClick: function (e) {
        this._click(y, this.get('primaryPosition'), e);
      },
      _secondaryClick: function (e) {
        this.get('isSecondaryDisabled') ||
          this._click(_, this.get('secondaryPosition'), e);
      },
      _clickEnabled: function (e) {
        return (
          this.get('gameflowService.isLobby') &&
          this.get('isCurrentPlayer') &&
          !this.get('_isSelectingPosition') &&
          0 === e.button
        );
      },
      _click: function (e, t, a) {
        if (this._clickEnabled(a)) {
          this.set('_isSelectingPosition', !0);
          const a = this.positionSelectorDomNode(e, t),
            n = a.querySelector('.parties-position-selector-component');
          n && n.classList.add('moving'),
            this.get('layerManager').addLayer(a),
            this.set('_screenRootHideCallback', () => {
              this.hidePositionSelectModal(),
                this.get('screenRoot').off(
                  'hide',
                  this.get('_screenRootHideCallback'),
                );
            }),
            this.get('screenRoot').on(
              'hide',
              this.get('_screenRootHideCallback'),
            );
        }
      },
      _selectedCallback: function (e, t) {
        let a = l.default.resolve();
        if (t) {
          const n = this._calculateDesiredPositions(e, t);
          n &&
            (f(`UPDATING POSITION PREFERENCES TO: ${(0, i.default)(n)}`),
            this.set('requestedPrimaryPosition', n.firstPreference),
            this.set('requestedSecondaryPosition', n.secondPreference),
            (this.selectionChangedTimer = r.Telemetry.startTimer(
              'parties-position-selector-selection-changed',
            )),
            (a = this.get('lobbiesService')
              .setPositionPreferences(n)
              .then(
                () => {
                  this.set('requestedPrimaryPosition', null),
                    this.set('requestedSecondaryPosition', null),
                    this.selectionChangedTimer &&
                      (r.Telemetry.stopAndRecordTimer(
                        this.selectionChangedTimer,
                      ),
                      delete this.selectionChangedTimer);
                },
                (e) => {
                  if (
                    (this.set('requestedPrimaryPosition', null),
                    this.set('requestedSecondaryPosition', null),
                    f(`setPositionPreferences ERROR: ${(0, i.default)(e)}`),
                    e && 503 === e.status)
                  )
                    f(
                      'setPositionPreferences ignoring SERVICE_UNAVAILABLE error',
                    );
                  else {
                    const e = {
                      type: 'DialogAlert',
                      data: {
                        contents: this.get(
                          'tra.parties_position_selection_error',
                        ),
                        okText: this.get('tra.lib_ui_dialog_alert_ok'),
                      },
                    };
                    this.showModal(e);
                  }
                },
              ))),
            this.hidePositionSelectModal();
        }
        return a;
      },
      _getCurrentPositionPreferences: function () {
        return {
          primaryPosition: this.get('primaryPosition'),
          secondaryPosition: this.get('secondaryPosition'),
        };
      },
      _calculateDesiredPositions: function (e, t) {
        const a = this.get('primaryPosition'),
          n = this.get('secondaryPosition'),
          o = t.toUpperCase(),
          i = this._getDesiredPositionBySelector(e, y, o, a),
          s = this._getDesiredPositionBySelector(e, _, o, n);
        return i === a && s === n
          ? null
          : s === a &&
            s !== c.POSITIONS.UNSELECTED &&
            n === c.POSITIONS.UNSELECTED
          ? null
          : i === c.POSITIONS.FILL
          ? { firstPreference: i, secondPreference: c.POSITIONS.UNSELECTED }
          : a === o || n === o
          ? {
              firstPreference: n,
              secondPreference:
                n === c.POSITIONS.FILL ? c.POSITIONS.UNSELECTED : a,
            }
          : { firstPreference: i, secondPreference: s };
      },
      _getDesiredPositionBySelector: function (e, t, a, n) {
        return e === t ? a : n;
      },
      _handleLobbyChange: function () {
        this.get('isLobby') || this.hidePositionSelectModal();
      },
      positionSelectorDomNode: function (e, t) {
        let a = this.get('positionSelectorEmberApp');
        const n = this.element.querySelector(e),
          o = this.updatePositionSelector(
            n,
            e,
            t,
            this._selectedCallback.bind(this),
          );
        return (
          a ||
            (a = r.ComponentFactory.create('PositionSelector', {
              playerPositionData: o,
            })),
          this.cachePositionSelector(a, o),
          a.domNode
        );
      },
      updatePositionSelector: function (e, t, a, n) {
        const o = this.get('positionSelectorData') || r.Ember.Object.create();
        return (
          o.set('selectorId', t),
          o.set('currentPosition', a),
          o.set('selectedCallback', n),
          o.set('targetElement', e),
          o.set('primaryPosition', this.get('primaryPosition')),
          o.set('secondaryPosition', this.get('secondaryPosition')),
          o.set('isMap21', this.get('isMap21')),
          o.notifyPropertyChange('targetElementUpdated'),
          o
        );
      },
      hidePositionSelectModal: function () {
        this.get('_isSelectingPosition') &&
          (this.get('layerManager').removeLayer(
            this.get('positionSelectorEmberApp').domNode,
          ),
          this.set('_isSelectingPosition', !1));
      },
      _bannerIntroPlaying: function () {
        this.set('playIntroAnimation', !0),
          this.playPositionVideo(y),
          this.playPositionVideo(_);
      },
      _bannerIntroComplete: function () {
        this.set('playIntroAnimation', !1);
      },
      playPositionVideo: function (e) {
        if (this.element) {
          const t = this.element.querySelector(e);
          t && t.dispatchEvent(new Event('play-intro'));
        }
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '/2IJ+KcF',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-positions-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-positions-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-positions-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-parties-player-position",[]],["static-attr","class","secondary"],["dynamic-attr","animations",["unknown",["animationsEnabled"]],null],["dynamic-attr","current-player",["unknown",["isCurrentPlayer"]],null],["dynamic-attr","disabled",["unknown",["isSecondaryDisabled"]],null],["dynamic-attr","position",["unknown",["secondaryPosition"]],null],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["secondaryTooltipConfig"]]]],1],["close-element"],["text","\\n"],["open-element","lol-parties-player-position",[]],["static-attr","class","primary"],["dynamic-attr","animations",["unknown",["animationsEnabled"]],null],["dynamic-attr","current-player",["unknown",["isCurrentPlayer"]],null],["dynamic-attr","disabled",["unknown",["isPrimaryDisabled"]],null],["dynamic-attr","position",["unknown",["primaryPosition"]],null],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["primaryTooltipConfig"]]]],0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","class","position-tooltip"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n      "],["append",["unknown",["primaryPositionLabelText"]],false],["text","\\n      "],["open-element","h5",[]],["flush-element"],["append",["unknown",["primaryPositionText"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","class","position-tooltip"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","parties_secondary_position"]],false],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n      "],["open-element","h5",[]],["flush-element"],["append",["unknown",["secondaryPositionText"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    e.exports = n.Ember.Component.extend({
      layout: a(377),
      classNames: ['parties-invite-button'],
      currentPlayerCanInvite: null,
      buttonsDisabled: null,
      currentPartyIsFull: null,
      isCurrentPlayerPartyLeader: null,
      isLobbyFull: null,
      partiesInviteButtonText: n.Ember.computed(
        'tra.ready',
        'tra.parties_invite_button',
        function () {
          return this.get('tra.parties_invite_button');
        },
      ),
      inviteButtonTooltip: n.Ember.computed(
        'currentPartyIsFull',
        'isCurrentPlayerPartyLeader',
        'tra.ready',
        'tra.parties_invite_full_party_tooltip',
        'tra.parties_invite_privileges_tooltip_none',
        'buttonsDisabled',
        'cannotInviteOthers',
        function () {
          return this.get('buttonsDisabled')
            ? this.get('tra.parties_matchmaking_searching_tooltip')
            : this.get('currentPartyIsFull') || this.get('cannotInviteOthers')
            ? this.get('tra.parties_invite_full_party_tooltip')
            : this.get('tra.parties_invite_privileges_tooltip_none');
        },
      ),
      cannotInviteOthers: n.Ember.computed.not('currentPlayerCanInvite'),
      inviteButtonDisabled: n.Ember.computed.or(
        'buttonsDisabled',
        'currentPartyIsFull',
        'cannotInviteOthers',
        'isLobbyFull',
      ),
      inviteButtonEnabled: n.Ember.computed.not('inviteButtonDisabled'),
      actions: {
        showInvite: function () {
          this.get('inviteButtonEnabled') && this.sendAction('showInviteModal');
        },
      },
    });
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'QKChctxb',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-button-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-button-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-flat-button",[]],["static-attr","class","parties-invite-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showInvite"],null],null],["dynamic-attr","disabled",["unknown",["inviteButtonDisabled"]],null],["flush-element"],["text","\\n  "],["append",["unknown",["partiesInviteButtonText"]],false],["text","\\n"],["block",["if"],[["get",["cannotInviteOthers"]]],null,1],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","\\n          "],["append",["unknown",["inviteButtonTooltip"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],0]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(1),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o),
      s = a(40);
    a(379);
    const l = 4;
    e.exports = n.Ember.Component.extend(i.default, {
      layout: a(380),
      classNames: ['parties-invite-info-panel'],
      currentPlayerCanInvite: !1,
      isCustom: !1,
      isTFT: !1,
      isNotTFT: n.Ember.computed.not('isTFT'),
      lobbiesService: n.Ember.inject.service('lobbies'),
      tftService: n.Ember.inject.service('tft'),
      activeMilestonesProgress: n.Ember.computed.alias(
        'tftService.activeMilestonesProgress',
      ),
      invitedPlayerIds: n.Ember.computed.alias(
        'lobbiesService.invitedPlayerIds',
      ),
      invites: n.Ember.computed.alias('lobbiesService.invites'),
      hasInvites: n.Ember.computed.gt('invites.length', 0),
      isNotCustom: n.Ember.computed.not('isCustom'),
      _tryingToViewProgression: !0,
      viewingProgression: n.Ember.computed.and(
        '_tryingToViewProgression',
        'progressionEnabled',
        'isTFT',
        'showingState.isInViewport',
      ),
      progressionEnabled: !0,
      _tryingToViewSuggested: !0,
      viewingSuggested: n.Ember.computed.and(
        '_tryingToViewSuggested',
        'suggestedEnabled',
        'isNotTFT',
      ),
      suggestedPlayers: n.Ember.computed.alias(
        'lobbiesService.currentPartySuggestedPlayers',
      ),
      panelIsCollapsed: !1,
      suggestedInvites: n.Ember.computed(
        'suggestedPlayers.[]',
        'suggestedPlayers.@each.summonerId',
        'invitedPlayerIds.[]',
        function () {
          const e = this.get('suggestedPlayers') || [],
            t = this.get('invitedPlayerIds');
          let a = n.Ember.A(),
            o = n.Ember.A();
          return (
            e.forEach((e) => {
              const n = e.get('summonerId');
              (t && 0 <= t.indexOf(n)) ||
                (e.get('reason') === s.SUGGESTED_TYPES.FRIEND
                  ? a.push(e)
                  : o.push(e));
            }),
            (a = a.sortBy('summonerName')),
            (o = o.sortBy('summonerName')),
            o.forEach((e) => {
              a.push(e);
            }),
            this.get('isTFT') && a.length > l && (a = a.slice(0, l - 1)),
            a
          );
        },
      ),
      noSuggestedInvites: n.Ember.computed.equal('suggestedInvites.length', 0),
      currentPlayerCannotInvite: n.Ember.computed.not('currentPlayerCanInvite'),
      suggestedDisabled: n.Ember.computed.or(
        'noSuggestedInvites',
        'currentPlayerCannotInvite',
        'isCustom',
      ),
      suggestedEnabled: n.Ember.computed.not('suggestedDisabled'),
      actions: {
        viewSuggested() {
          ((this.get('suggestedDisabled') ||
            this.get('_tryingToViewSuggested')) &&
            !this.get('viewingProgression')) ||
            (this.set('_tryingToViewSuggested', !0),
            this.set('_tryingToViewProgression', !1),
            this.playSound('/fe/lol-uikit/sfx-uikit-text-click-small.ogg'));
        },
        viewInvited() {
          (this.get('_tryingToViewSuggested') ||
            this.get('viewingProgression')) &&
            (this.set('_tryingToViewSuggested', !1),
            this.set('_tryingToViewProgression', !1),
            this.playSound('/fe/lol-uikit/sfx-uikit-text-click-small.ogg'));
        },
        viewProgression() {
          this.set('_tryingToViewSuggested', !1),
            this.set('_tryingToViewProgression', !0),
            this.playSound('/fe/lol-uikit/sfx-uikit-text-click-small.ogg');
        },
        toggleCollapsed() {
          this.toggleProperty('panelIsCollapsed'),
            this.get('element').classList.toggle('collapsed'),
            this.playSound('/fe/lol-uikit/sfx-uikit-text-click-small.ogg');
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '+GU1eHGw',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isTFT"]]],null,14,13],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-body ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["flush-element"],["text","\\n  "],["open-element","ul",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-list\\n  ",["helper",["if"],[["get",["viewingSuggested"]],"viewing-suggested"],null],"\\n  ",["helper",["if"],[["get",["isCustom"]],"parties-invite-info-is-custom"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["viewingSuggested"]]],null,10,8],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","parties-invite-info-empty"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","parties-invite-info-empty-text"],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_invited_panel_no_invites"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","invitedPlayer","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["invite"]],false]]],false],["text","\\n"]],"locals":["invite"]},{"statements":[["block",["each"],[["get",["invites"]]],null,1]],"locals":[]},{"statements":[["text","            "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,3]],"locals":[]},{"statements":[["block",["unless"],[["get",["suggestedDisabled"]]],null,4]],"locals":[]},{"statements":[["block",["if"],[["get",["isTFT"]]],null,5],["block",["if"],[["get",["hasInvites"]]],null,2,0],["text","    "]],"locals":[]},{"statements":[["text","      "],["append",["helper",["invite-info-panel-tft-progression"],null,[["class","activeMilestonesProgress"],["tft-progression",["get",["activeMilestonesProgress"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["viewingProgression"]]],null,7,6]],"locals":[]},{"statements":[["text","        "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,9]],"locals":[]},{"statements":[["text","  "],["comment"," Do not show tabbed header with suggested if invite info only "],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-invite-header"],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","custom-invite-header-text"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","custom_game_invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingSuggested"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-suggested"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingSuggested"]],"active"],null],"\\n        ",["helper",["if"],[["get",["suggestedDisabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewSuggested"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","suggested_panel_lobby_title"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingSuggested"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isNotCustom"]]],null,12,11]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingProgression"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-progression"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingProgression"]],"active"],null],"\\n        ",["helper",["unless"],[["get",["progressionEnabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewProgression"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","tft_progression_panel_title"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingProgression"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(1),
      s = n(i),
      l = a(5),
      r = n(l);
    a(382);
    const c = (0, o.emberDataBinding)({
      Ember: o.Ember,
      websocket: (0, o.getProvider)().getSocket(),
      logPrefix: 'parties:invite-info-panel-player:component',
      basePaths: { lobby: '/lol-lobby' },
    });
    e.exports = o.Ember.Component.extend(c, s.default, r.default, {
      tagName: 'li',
      classNames: 'parties-invite-info-panel-player',
      classNameBindings: [
        'isSuggested:parties-suggested-player',
        'showPendingIndicator:parties-pending-invite',
        'isKicked:parties-kicked-invite',
        'isDeclined:parties-declined-invite',
        'isAccepted:parties-accepted-invite',
        'isError:parties-error-invite',
        'currentPlayerCanInvite:enabled:disabled',
      ],
      attributeBindings: ['summonerId'],
      customGamesService: o.Ember.inject.service('custom-games'),
      lobbiesService: o.Ember.inject.service('lobbies'),
      invitesService: o.Ember.inject.service('invites'),
      disabled: !1,
      _invitedFromSuggested: !1,
      _previousSummonerId: null,
      isSuggested: null,
      player: null,
      invitedPlayer: null,
      summonerId: o.Ember.computed(
        'player.summonerId',
        'invitedPlayer.toSummonerId',
        function () {
          return (
            this.get('invitedPlayer.toSummonerId') ||
            this.get('player.summonerId')
          );
        },
      ),
      recycle: o.Ember.computed('summonerId', function () {
        const e = this.get('summonerId');
        e &&
          e !== this.get('_previousSummonerId') &&
          (this.set('_invitedFromSuggested', !1),
          this.set('_previousSummonerId', e));
      }),
      layout: a(383),
      name: o.Ember.computed(
        'player.summonerName',
        'invitedPlayer.toSummonerName',
        function () {
          return (
            this.get('player.summonerName') ||
            this.get('invitedPlayer.toSummonerName') ||
            ''
          );
        },
      ),
      isPending: o.Ember.computed.equal('invitedPlayer.state', 'Pending'),
      isAccepted: o.Ember.computed.equal('invitedPlayer.state', 'Accepted'),
      isDeclined: o.Ember.computed.equal('invitedPlayer.state', 'Declined'),
      isKicked: o.Ember.computed.equal('invitedPlayer.state', 'Kicked'),
      isError: o.Ember.computed.equal('invitedPlayer.state', 'Error'),
      showPendingIndicator: o.Ember.computed.or('isPending', 'isRequested'),
      errorObserver: o.Ember.computed('isError', 'name', function () {
        this.get('isError') &&
          this.get('customGamesService.isCustomUI') &&
          this.get('name') &&
          this._showCustomBannedToast();
      }),
      _showCustomBannedToast: function () {
        const e = this.get('lobbiesService.invitations') || [],
          t = this.get('summonerId');
        for (let a = 0; a < e.length; a++) {
          const n = e[a];
          if (
            n.get('toSummonerId').toString() !== t.toString() ||
            !n.get('errorType').match(/NotInvitableException/)
          )
            continue;
          const o = this.get('name'),
            i = this.get('tra.formatString'),
            s = i('custom_game_invite_banned_error', { summonerName: o });
          this.showToast(s);
          break;
        }
      },
      actions: {
        remove: function () {
          this.get('lobbiesService').removeSuggestedPlayer(
            this.get('player.summonerId'),
          );
        },
      },
      click: function () {
        if (
          this.get('isSuggested') &&
          this.get('currentPlayerCanInvite') &&
          !this.get('disabled') &&
          !this.get('_invitedFromSuggested')
        ) {
          this.set('_invitedFromSuggested', !0),
            this.playSound('/fe/lol-uikit/sfx-uikit-generic-click-small.ogg');
          const e = this.get('summonerId');
          this.get('lobbiesService').removeSuggestedPlayer(e);
          const t = this.get('name');
          this.get('invitesService').invitePlayer(e, t);
        }
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'BRt1o7Tp',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\player-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\player-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\player-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showPendingIndicator"]]],null,1],["open-element","span",[]],["static-attr","class","invite-info-name"],["flush-element"],["append",["unknown",["name"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isSuggested"]]],null,0],["comment"," Work around for Ember.computed to act like an observer. "],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["recycle"]],false],["text"," "],["append",["unknown",["errorObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","button",[]],["static-attr","class","parties-remove-suggested-player"],["modifier",["action"],[["get",[null]],"remove"],[["bubbles"],[false]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","lol-pending-loader"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(385);
    const o = n.EmberAddons.EmberLifeline.RunMixin;
    e.exports = n.Ember.Component.extend(o, {
      layout: a(386),
      classNames: ['parties-invite-panel-tft-progression'],
      tftService: n.Ember.inject.service('tft'),
      previousMilestone: n.Ember.computed(
        'activeMilestonesProgress.0.{isPaid,isLocked,pointsEarnedForMilestone,missionId,status,state}',
        function () {
          return n.Ember.copy(this.get('activeMilestonesProgress.0'));
        },
      ),
      nextMilestone: n.Ember.computed(
        'activeMilestonesProgress.1.{isPaid,isLocked,pointsEarnedForMilestone,missionId,status,state}',
        function () {
          return n.Ember.copy(this.get('activeMilestonesProgress.1'));
        },
      ),
      actions: {
        navigateToTft() {
          n.Navigation.setActive({ id: 'tft' }, !0);
        },
        claim(e) {
          if (!this.get('loadingTimeoutId')) {
            if ('REWARDABLE' !== e.state || 'DUMMY' === e.status)
              return void this.send('navigateToTft');
            const t = this.runTask(() => {
              this.set('loadingTimeoutId', null);
            }, 5e3);
            this.set('loadingTimeoutId', t);
            const a = this.get('tftService');
            n.Telemetry.sendEvent(
              'tft-claim-reward-button-clicked',
              e.missionInternalName,
            ),
              a.claimRewards(e);
          }
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '/obDUyEv',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\tft-progression-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\tft-progression-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\tft-progression-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["nextMilestone"]]],null,2,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-complete"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-title"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_title"]],false],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-body"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_body"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n                "],["open-element","p",[]],["flush-element"],["text","\\n                  "],["append",["unknown",["tra","tft_progression_description"]],false],["text","\\n                "],["close-element"],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-milestone-container"],["flush-element"],["text","\\n        "],["open-element","lol-tft-battlepass-milestone",[]],["static-attr","size","small"],["static-attr","class","progression-milestone"],["dynamic-attr","milestone",["unknown",["previousMilestone"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"claim",["get",["previousMilestone"]]],null],null],["static-attr","is-smooth-progress","true"],["flush-element"],["close-element"],["text","\\n        "],["open-element","lol-tft-battlepass-milestone",[]],["static-attr","size","small"],["static-attr","isSelected","false"],["static-attr","class","progression-milestone"],["dynamic-attr","milestone",["unknown",["nextMilestone"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"navigateToTft"],null],null],["static-attr","is-smooth-progress","true"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-container"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","small"]],1],["text","            "],["open-element","div",[]],["static-attr","class","reward-label"],["flush-element"],["append",["unknown",["tra","tft_progression_next"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","reward-title"],["flush-element"],["append",["unknown",["nextMilestone","title"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","progress-container"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-current"],["flush-element"],["append",["unknown",["nextMilestone","pointsEarnedForMilestone"]],false],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-divider"],["flush-element"],["text","/"],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-total"],["flush-element"],["append",["unknown",["nextMilestone","pointsNeededForMilestone"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(388);
    var o = a(1),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    const s = n.EmberAddons.EmberLifeline.RunMixin;
    e.exports = n.Ember.Component.extend(s, i.default, {
      layout: a(389),
      tagName: 'button',
      classNameBindings: ['typeClass'],
      disabled: !1,
      disabledAfterClickDelay: 0,
      typeClass: n.Ember.computed('type', function () {
        return 'player-management-button-' + this.get('type');
      }),
      onDidInsertElement: n.Ember.on('didInsertElement', function () {
        this.addHoverClickSound(
          this.element,
          '/fe/lol-uikit/sfx-uikit-button-circlegold-hover.ogg',
          '/fe/lol-parties/sfx-lobby-button-banner-click.ogg',
        );
      }),
      enableInviteButton: function (e = 0) {
        this.runTask(() => this.set('disabled', !1), e);
      },
      click: function () {
        this.get('disabled') ||
          (this.sendAction('action'),
          this.set('disabled', !0),
          this.enableInviteButton(this.get('disabledAfterClickDelay')));
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'YkGIiUHJ',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-management-button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-management-button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-management-button-component\\\\index.js\\" "],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["yield","default"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(6),
      s = n(i),
      l = a(1),
      r = n(l);
    a(391),
      (e.exports = o.Ember.Component.extend(r.default, {
        layout: a(392),
        classNameBindings: ['isCustomGame:parties-point-eligibility-custom'],
        platformConfig: s.default,
        platformEternalsEnabled: o.Ember.computed.alias(
          'platformConfig.eternalsEnabled',
        ),
        eternalsService: o.Ember.inject.service('eternals'),
        isCustomGame: !1,
        tooltipConfig: o.Ember.computed(
          'isCustomGame',
          'tooltipConfigCustom',
          'tooltipConfigParties',
          function () {
            return this.get('isCustomGame')
              ? this.get('tooltipConfigCustom')
              : this.get('tooltipConfigParties');
          },
        ),
        tooltipConfigParties: {
          targetAnchor: { x: 'center', y: 'bottom' },
          tooltipAnchor: { x: 'center', y: 'top' },
          offset: { x: 0, y: 5 },
        },
        tooltipConfigCustom: {
          targetAnchor: { x: 'right', y: 'center' },
          tooltipAnchor: { x: 'left', y: 'center' },
          offset: { x: 5, y: 0 },
        },
        xpEnabled: o.Ember.computed.alias(
          'selected.queue.queueRewards.isXpEnabled',
        ),
        xpDisabledClass: o.Ember.computed('xpEnabled', function () {
          const e = this.get('xpEnabled');
          return e ? '' : 'disabled';
        }),
        championMasteryEnabled: o.Ember.computed.alias(
          'selected.queue.queueRewards.isChampionPointsEnabled',
        ),
        championMasteryDisabledClass: o.Ember.computed(
          'championMasteryEnabled',
          function () {
            const e = this.get('championMasteryEnabled');
            return e ? '' : 'disabled';
          },
        ),
        eternalsEnabledForQueue: o.Ember.computed(
          'eternalsService.enabledQueues',
          'selected.queue.id',
          function () {
            const e = this.get('selected.queue.id'),
              t = this.get('eternalsService.enabledQueues');
            return !!(t && null !== t) && t.includes(e);
          },
        ),
        eternalsDisabledClass: o.Ember.computed(
          'eternalsEnabledForQueue',
          function () {
            const e = this.get('eternalsEnabledForQueue');
            return e ? '' : 'disabled';
          },
        ),
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'GWH/xR9R',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\point-eligibility-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\point-eligibility-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\point-eligibility-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-point-eligibility-content"],["flush-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","parties-point-eligibility-list"],["flush-element"],["text","\\n    "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-experience ",["unknown",["xpDisabledClass"]]]]],["flush-element"],["close-element"],["text","\\n    "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-mastery ",["unknown",["championMasteryDisabledClass"]]]]],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["platformEternalsEnabled"]]],null,2],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],1],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-tooltip-content-eternals ",["unknown",["eternalsDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-eternals-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-eternals-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_eternals"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","lol-uikit-content-block",[]],["static-attr","padding","medium"],["static-attr","class","parties-point-eligibility-tooltip-content"],["flush-element"],["text","\\n    "],["open-element","h6",[]],["static-attr","class","parties-point-eligibility-tooltip-content-title"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","parties_point_eligibility_tooltip_title"]],false],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","ul",[]],["static-attr","class","parties-point-eligibility-tooltip-content-list"],["flush-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-tooltip-content-experience ",["unknown",["xpDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-experience-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-experience-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_experience"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-tooltip-content-mastery ",["unknown",["championMasteryDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-mastery-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-mastery-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_masteries"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      \\n"],["block",["if"],[["get",["platformEternalsEnabled"]]],null,0],["text","    "],["close-element"],["text","\\n    \\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-eternals ",["unknown",["eternalsDisabledClass"]]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = Math.floor,
      o = a(0);
    a(394);
    const i = 6e5;
    e.exports = o.Ember.Component.extend({
      layout: a(395),
      classNames: ['parties-disband-countdown'],
      classNameBindings: [
        'shouldDisplayCountdown::hidden-countdown',
        'timerEnabled::timer-disabled',
      ],
      _haveLobbyTimer: !1,
      counter: 0,
      gameflowService: o.Ember.inject.service('gameflow'),
      lobbiesService: o.Ember.inject.service('lobbies'),
      timerEnabled: o.Ember.computed.alias('lobbiesService.lobbyTimerEnabled'),
      timerCountdown: o.Ember.computed.alias(
        'lobbiesService.lobbyTimerCountdown',
      ),
      shouldDisplayCountdown: o.Ember.computed.and(
        'gameflowService.isLobby',
        '_haveLobbyTimer',
      ),
      partiesCountdownObserver: o.Ember.computed(
        'timerCountdown',
        'timerEnabled',
        'gameflowService.isLobby',
        function () {
          if (this.get('gameflowService.isLobby') && this.get('timerEnabled')) {
            const e = 1e3 * this.get('timerCountdown'),
              t = new Date().getTime();
            (this.mLobbyTimeout = t + e),
              (this.mLobbyTimeoutNotification = t + (e - i)),
              this.startCountdown();
          } else this.set('_haveLobbyTimer', !1), this._clearTimer();
        },
      ),
      toTimeString: function (e) {
        if (0 <= e) {
          e = n(e);
          const t = n(e / 60);
          let a = `${e % 60}`;
          return 2 > a.length && (a = `0${a}`), `${t}:${a}`;
        }
      },
      countdownInterval: 250,
      startCountdown: function () {
        this.timer ||
          (this.timer = setInterval(
            function () {
              const e = new Date().getTime();
              if (
                e <= this.mLobbyTimeout &&
                e >= this.mLobbyTimeoutNotification
              ) {
                this.set('_haveLobbyTimer', !0);
                const t = (i - e + this.mLobbyTimeoutNotification) / 1e3;
                this.set('countdown', this.toTimeString(n(t)));
              }
              e > this.mLobbyTimeout &&
                (this.set('_haveLobbyTimer', !1), this._clearTimer());
            }.bind(this),
            this.get('countdownInterval'),
          ));
      },
      _clearTimer: function () {
        this.timer && (clearInterval(this.timer), (this.timer = null));
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'cnSg2an/',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\disband-countdown-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\disband-countdown-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\disband-countdown-component\\\\index.js\\" "],["text","\\n"],["append",["unknown",["tra","parties_disbanded_countdown_title"]],false],["text"," "],["append",["unknown",["countdown"]],false],["text"," "],["append",["unknown",["partiesCountdownObserver"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(1),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o),
      s = a(40);
    a(397);
    const l = n.EmberAddons.EmberLifeline.RunMixin;
    e.exports = n.Ember.Component.extend(l, i.default, {
      layout: a(398),
      classNames: ['open-party-toggle'],
      lobbiesService: n.Ember.inject.service('lobbies'),
      gameflowService: n.Ember.inject.service('gameflow'),
      isPartyLeader: n.Ember.computed.alias(
        'lobbiesService.isCurrentPlayerPartyLeader',
      ),
      partyType: n.Ember.computed.alias('lobbiesService.partyType'),
      isInLobby: n.Ember.computed.alias('gameflowService.isLobby'),
      disabled: n.Ember.computed('isPartyLeader', 'isInLobby', function () {
        return !this.get('isPartyLeader') || !this.get('isInLobby');
      }),
      requestedPartyType: null,
      toolipDelayTime: 750,
      _firstExperienceContextualNotification: null,
      shownOpenPartyFirstExperience: !1,
      settingsService: n.Ember.inject.service('party-settings'),
      hasSeenOpenPartyFirstExperience: n.Ember.computed.alias(
        'settingsService.hasSeenOpenPartyFirstExperience',
      ),
      hoverSoundDisabled: n.Ember.computed.alias('disabled'),
      isOpenParty: n.Ember.computed('partyType', function () {
        return (
          this.runTask(function () {
            this._checkIfShowFirstExperience();
          }, 1),
          this.get('partyType') === s.PARTY_TYPES.OPEN
        );
      }),
      showPartyOpen: n.Ember.computed(
        'isOpenParty',
        'requestedPartyType',
        function () {
          return (
            this.get('requestedPartyType') !== s.PARTY_TYPES.CLOSED &&
            !!(
              this.get('requestedPartyType') === s.PARTY_TYPES.OPEN ||
              this.get('isOpenParty')
            )
          );
        },
      ),
      initObserver: n.Ember.on('init', function () {
        n.Ember.run.once(this, function () {
          if (this.element) {
            const e = this._getToggleContainer();
            this.attachHoverSoundWithDisabledCheck(
              e,
              '/fe/lol-parties/sfx-uikit-button-circlegold-hover.ogg',
            );
          }
        });
      }),
      gameflowPhaseObserver: n.Ember.on(
        'init',
        n.Ember.observer('gameflowService.phase', function () {
          'Lobby' === this.get('gameflowService.phase')
            ? this._checkIfShowFirstExperience()
            : this._hideOpenFirstExperienceContextualNofication();
        }),
      ),
      isInViewportObserver: n.Ember.on(
        'init',
        n.Ember.observer('showingState.isInViewport', function () {
          this._checkIfShowFirstExperience();
        }),
      ),
      openPartyToggleTooltip: n.Ember.computed(
        'isOpenParty',
        'tra.ready',
        'tra.parties_toggle_open',
        'tra.parties_toggle_closed',
        'tra.parties_toggle_not_party_leader',
        'isPartyLeader',
        function () {
          return this.get('isPartyLeader')
            ? this.get('isOpenParty')
              ? this.get('tra.parties_toggle_closed')
              : this.get('tra.parties_toggle_open')
            : this.get('tra.parties_toggle_not_party_leader');
        },
      ),
      _toggle: function () {
        if (this.get('isPartyLeader') && !this.get('requestedPartyType'))
          return (this.playSound(
            '/fe/lol-parties/sfx-parties-button-toggle.ogg',
          ),
          this.get('isOpenParty'))
            ? (this.set('requestedPartyType', s.PARTY_TYPES.CLOSED),
              this.get('lobbiesService')
                .setPartyType(s.PARTY_TYPES.CLOSED)
                .then(() => {
                  this.set('requestedPartyType', null);
                })
                .catch(() => {
                  this.set('requestedPartyType', null);
                }))
            : (this.set('requestedPartyType', s.PARTY_TYPES.OPEN),
              this.get('lobbiesService')
                .setPartyType(s.PARTY_TYPES.OPEN)
                .then(() => {
                  this.set('requestedPartyType', null);
                })
                .catch(() => {
                  this.set('requestedPartyType', null);
                }));
      },
      _getToggleContainer: function () {
        return this.element
          ? this.element.querySelector('.toggle-container')
          : null;
      },
      _checkIfShowFirstExperience: function () {
        'Lobby' !== this.get('gameflowService.phase') ||
          this.get('hasSeenOpenPartyFirstExperience') ||
          !this.get('isOpenParty') ||
          !this.get('showingState.isInViewport') ||
          this.get('shownOpenPartyFirstExperience') ||
          this._showOpenPartyFirstExperienceContextualNotification();
      },
      _showOpenPartyFirstExperienceContextualNotification: function () {
        const e = this._getToggleContainer();
        if (e) {
          let e = this.get('isPartyLeader')
            ? this.get('tra.parties_open_party_first_experience_owner')
            : this.get('tra.parties_open_party_first_experience_member');
          const t = this.get('tra.parties_open_party_first_experience_header'),
            a = n.UIKit.getContextualNotificationManager(),
            o = n.UIKit.getTemplateHelper(),
            i = o.contentBlockTooltip(
              t,
              e,
              'tooltip-system',
              'parties-first-experience-tooltip',
            );
          this.set('shownOpenPartyFirstExperience', !0),
            setTimeout(() => {
              const e = this.get('settingsService');
              e && e.set && e.set('hasSeenOpenPartyFirstExperience', !0);
              const t = a.add(i, {
                target: {
                  domNode: this.element,
                  anchor: { x: 'center', y: 'bottom' },
                },
                orientation: 'bottom',
                anchor: { x: 'center', y: 'top' },
                offset: { x: 0, y: 15 },
                dismissable: !0,
              });
              this.set('_firstExperienceContextualNotification', t);
            }, this.get('toolipDelayTime'));
        }
      },
      _hideOpenFirstExperienceContextualNofication: function () {
        const e = this.get('_firstExperienceContextualNotification');
        if (e) {
          const t = n.UIKit.getContextualNotificationManager();
          t.remove(e);
        }
      },
      actions: {
        toggle: function () {
          this.get('disabled') || this._toggle();
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'cuOHFGba',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\open-party-toggle-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\open-party-toggle-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\open-party-toggle-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","open-party-toggle-wrapper"],["dynamic-attr","class",["concat",[["unknown",["partyType"]]," ",["helper",["if"],[["get",["showPartyOpen"]],"right"],null]," ",["helper",["if"],[["get",["disabled"]],"disabled"],null]]]],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","toggle-container animated"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"toggle"],null],null],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","open"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","toggle-button animated"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","\\n        "],["append",["unknown",["openPartyToggleTooltip"]],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(400),
      (e.exports = n.Ember.Component.extend({
        classNames: ['parties-game-select-screen'],
        classNameBindings: ['isShowing:game-select-show:game-select-hide'],
        customGamesService: n.Ember.inject.service('custom-games'),
        layout: a(401),
        isCreatingCustomGame: n.Ember.computed.alias(
          'selected.isCreatingCustomGame',
        ),
        needsAdditionalGameConfig: n.Ember.computed.alias(
          'selected.needsAdditionalGameConfig',
        ),
        isJoiningCustomGame: n.Ember.computed.alias(
          'selected.isJoiningCustomGame',
        ),
        currentCategory: n.Ember.computed.alias('selected.category'),
        isShowing: n.Ember.computed.alias('showingState.isShowingGameSelect'),
        isShowingGameSelectObserver: n.Ember.observer('isShowing', function () {
          this.get('isShowing') &&
            n.PartyAPI._showFlexRestrictionModalIfNeeded();
        }),
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'acOSlFI1',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-select-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-select-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-select-root-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-select-wrapper"],["flush-element"],["text","\\n\\n  "],["append",["helper",["category-select"],null,[["currentCategory","selected","queues"],[["get",["currentCategory"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["needsAdditionalGameConfig"]]],null,3,2],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["game-select-footer"],null,[["showingState","selected"],[["get",["showingState"]],["get",["selected"]]]]],false],["text","\\n\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["text","\\n\\n  "],["append",["unknown",["customGamesService","subcategoriesObserver"]],false],["text","\\n\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","\\n    "],["append",["helper",["game-type-select"],null,[["showingState","currentCategory","selected","queues"],[["get",["showingState"]],["get",["currentCategory"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n\\n  "]],"locals":[]},{"statements":[["text","\\n    "],["append",["unknown",["custom-game-list"]],false],["text","\\n\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isJoiningCustomGame"]]],null,1,0]],"locals":[]},{"statements":[["text","\\n    "],["append",["helper",["custom-game-setup"],null,[["showingState","currentMode","selected","queues"],[["get",["showingState"]],["get",["currentMode"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(1),
      r = n(l),
      c = a(5),
      m = n(c),
      d = a(26),
      p = n(d),
      u = a(51),
      g = n(u),
      b = a(17),
      h = a(7),
      f = a(15),
      y = n(f),
      _ = a(3),
      v = n(_);
    a(403);
    const S = (0, v.default)('plugin:parties:player-positions-component:warn');
    e.exports = s.Ember.Component.extend(
      p.default,
      r.default,
      m.default,
      g.default,
      {
        classNames: ['game-select-footer-container'],
        layout: a(404),
        eligibilityService: s.Ember.inject.service('queue-eligibility'),
        lobbiesService: s.Ember.inject.service('lobbies'),
        customGamesService: s.Ember.inject.service('custom-games'),
        customGameListService: s.Ember.inject.service('custom-game-list'),
        patcherService: s.Ember.inject.service('patcher'),
        gameflowService: s.Ember.inject.service('gameflow'),
        partySettingsService: s.Ember.inject.service('party-settings'),
        inLobby: s.Ember.computed.alias('lobbiesService.inLobby'),
        animationLock: s.Ember.computed.alias('selected.animationLock'),
        animationsEnabled: s.Ember.computed.alias(
          'partySettingsService.animationsEnabled',
        ),
        hasQueueAvailabilityWarning: s.Ember.computed.alias(
          'lobbiesService.hasQueueAvailabilityWarning',
        ),
        queueAvailabilityWarningTooltip: s.Ember.computed.alias(
          'lobbiesService.queueAvailabilityWarningTooltip',
        ),
        closeButtonType: s.Ember.computed(
          'selected.isUpdatingSelection',
          'animationLock',
          'inLobby',
          function () {
            return this.get('selected.isUpdatingSelection') ||
              this.get('animationLock')
              ? 'close'
              : this.get('inLobby')
              ? 'back'
              : 'close';
          },
        ),
        listenToViewport: function () {
          const e = s.Viewport.main().getScreenRoot(
            y.default.get('viewportApiKey'),
            'rcp-fe-lol-parties',
          );
          e.on('willHide', () => {
            this.get('showingState.isShowingGameSelect') &&
              this.restoreLastSelection();
          });
        },
        listenToCustomGameListService: function () {
          this.get('customGameListService').on('showParty', () => {
            this.set('selected.isJoiningCustomGame', !1), this.showParty();
          });
        },
        insertListener: s.Ember.on('didInsertElement', function () {
          this.listenToViewport(), this.listenToCustomGameListService();
        }),
        showingPartyObserver: s.Ember.computed(
          'showingState.isShowingParty',
          function () {
            const e = this.get('showingState.isShowingParty');
            if (e) {
              const e = this.get('justShowedParty');
              !1 === e && this.restoreLastSelection(),
                this.set('justShowedParty', !1);
            }
          },
        ),
        practiceToolMinLevelEligible: s.Ember.computed(
          'customGamesService.localSummonerLevel',
          'customGameSubCategoryMinLevel',
          function () {
            const e = h.TUTORIAL_TYPE_MAPS.PRACTICETOOL,
              t = h.TRAINING_TYPES.PRACTICE_TOOL;
            return (
              this.get('customGamesService.localSummonerLevel') >=
              this.get('customGamesService').getSubcategoryMinLevel(e, t)
            );
          },
        ),
        creatingCustomGameAndHaveNameError: s.Ember.computed.and(
          'showingState.isShowingGameSelect',
          'selected.isCreatingCustomGame',
          'customGamesService.haveNameError',
        ),
        trainingGameModeIsEmpty: s.Ember.computed.empty(
          'selected.trainingGameMode',
        ),
        selectingTrainingGameButNoMode: s.Ember.computed.and(
          'showingState.isShowingGameSelect',
          'selected.isTrainingGame',
          'trainingGameModeIsEmpty',
        ),
        joiningCustomGameButNoneSelected: s.Ember.computed.and(
          'showingState.isShowingGameSelect',
          'selected.isJoiningCustomGame',
          'customGameListService.noSelectedGame',
        ),
        patcherDisconnected: s.Ember.computed.not('patcherService.isConnected'),
        confirmButtonDisabled: s.Ember.computed.or(
          'animationLock',
          'patcherDisconnected',
          'selected.isUpdatingSelection',
          'confirmDisabledByLobby',
          'creatingCustomGameAndHaveNameError',
          'selectingTrainingGameButNoMode',
          'joiningCustomGameButNoneSelected',
          'allQueuesForCategoryDisabled',
        ),
        allQueuesForCategoryDisabled: s.Ember.computed(
          'selected.category',
          'selected.queues.availableQueues',
          'eligibilityService.eligibilites.[]',
          function () {
            const e = this.get('selected.category');
            if (e) {
              if ('Training' === e) {
                const e = this.get('eligibilityService').getIneligibleQueues(
                  h.TUTORIAL_QUEUE_IDS,
                );
                return (
                  e.length === h.TUTORIAL_QUEUE_IDS.length &&
                  !this.get('practiceToolMinLevelEligible')
                );
              }
              const t = this.get('selected.queues.availableQueues');
              if (t && t[e]) {
                const a = t[e];
                let n = 0,
                  o = 0;
                for (const e in a) {
                  const t = a[e];
                  if (t && t.queues) {
                    const e = t.queues,
                      a = this.get('eligibilityService').getIneligibleQueues(e);
                    (n += a.length), (o += e.length);
                  } else return !1;
                }
                return n === o;
              }
              return !1;
            }
            return !1;
          },
        ),
        confirmButtonEnabled: s.Ember.computed.not('confirmButtonDisabled'),
        confirmButtonText: s.Ember.computed(
          'tra.ready',
          'selected.isJoiningCustomGame',
          'customGameListService.confirmButtonText',
          'tra.parties_button_confirm',
          function () {
            return this.get('selected.isJoiningCustomGame')
              ? this.get('customGameListService.confirmButtonText')
              : this.get('tra.parties_button_confirm');
          },
        ),
        buttonSounds: {
          closeHover: '/fe/lol-parties/sfx-lobby-button-quit-hover.ogg',
          closeClick: '/fe/lol-parties/sfx-lobby-button-quit-click.ogg',
          confirmHover:
            '/fe/lol-parties/sfx-gameselect-button-confirm-hover.ogg',
          confirmClick:
            '/fe/lol-parties/sfx-gameselect-button-confirm-click.ogg',
        },
        confirmButtonShowTooltip: s.Ember.computed.or(
          'patcherDisconnected',
          'confirmDisabledByLobby',
        ),
        confirmButtonTooltipText: s.Ember.computed(
          'patcherDisconnected',
          'confirmDisabledByLobby',
          'tra.ready',
          'tra.parties_patcher_not_connected',
          function () {
            let e = '';
            return (
              this.get('patcherDisconnected')
                ? (e = s.tra.get('parties_patcher_not_connected'))
                : this.get('confirmDisabledByLobby') &&
                  (e = this.get('queueAvailabilityWarningTooltip')),
              e
            );
          },
        ),
        confirmDisabledByLobby: s.Ember.computed.and(
          'hasQueueAvailabilityWarning',
          'selectedQueueIsLobbyQueue',
        ),
        selectedQueueIsLobbyQueue: s.Ember.computed(
          'selected.queueId',
          'lobbiesService.queueId',
          function () {
            const e = this.get('selected.queueId'),
              t = this.get('lobbiesService.queueId');
            return !!e && !!t && e === t;
          },
        ),
        closeButtonDisabled: s.Ember.computed.or(
          'animationLock',
          'hasQueueAvailabilityWarning',
        ),
        closeButtonText: s.Ember.computed(
          'tra.ready',
          'tra.parties_button_cancel',
          function () {
            return this.get('tra.parties_button_cancel');
          },
        ),
        closeButtonShowTooltip: s.Ember.computed.or(
          'hasQueueAvailabilityWarning',
        ),
        closeButtonTooltipText: s.Ember.computed(
          'selected.queueId',
          'hasQueueAvailabilityWarning',
          'queueAvailabilityWarningTooltip',
          'tra.ready',
          function () {
            return this.get('hasQueueAvailabilityWarning')
              ? this.get('queueAvailabilityWarningTooltip')
              : '';
          },
        ),
        eligibilityObserver: s.Ember.computed(
          'eligibilityService.upToDate',
          function () {
            const e = this.get('eligibilityService.upToDate');
            if (e) {
              const e = this.get('selected.queueId'),
                t = this.get('eligibilityService.eligibilities');
              (t[e] && t[e].eligible) || this.restoreLastSelection();
            }
          },
        ),
        changePartyGameConfig: function () {
          const e = this.get('selected'),
            t = this.get('customGamesService.isCustomUI'),
            a = this.get('lobbiesService.queueId'),
            n = e.get('queueId');
          return !t && e.get('isCreatingCustomGame')
            ? (e.set('animationLock', !0),
              this.get('customGamesService').changeQueueToCustom())
            : n === a
            ? i.default.resolve()
            : (e.set('animationLock', !0),
              (this._createLobbyTimer = s.Telemetry.startTimer(
                'parties-create-new-lobby',
              )),
              this.get('lobbiesService').createLobbyWithQueueId(n));
        },
        lobbyTransitionTelemetryObserver: s.Ember.observer(
          'showingState.isShowingGameSelect',
          function () {
            !this.get('showingState.isShowingGameSelect') &&
              this._createLobbyTimer &&
              window.requestAnimationFrame(() => {
                this.isDestroying ||
                  this.isDestroyed ||
                  (s.Telemetry.stopAndRecordTimer(this._createLobbyTimer),
                  delete this._createLobbyTimer);
              });
          },
        ),
        justShowedParty: null,
        showParty: function () {
          this.set('justShowedParty', !0), this.get('showingState').showParty();
        },
        gameSelectErrorHandler: function (e) {
          let t;
          if (
            (this.set('selected.isUpdatingSelection', !1),
            this.set('selected.animationLock', !1),
            this.get('selected.isCreatingCustomGame'))
          ) {
            if (
              ((t = this.getCustomGameErrorMessage(e)),
              e === b.CUSTOM_GAME_ERROR_CODES[423])
            )
              return void this.showGameSelectErrorModal(
                t,
                this.leaveParty.bind(this),
              );
            if (!t) return;
          } else if (
            ((t = this.get('tra.parties_game_select_confirm_error')),
            e && e.data)
          ) {
            const a = e.data.httpStatus;
            if (a && 423 === a)
              return (
                (t = this.get('tra.parties_game_select_patching_error')),
                void this.showGameSelectErrorModal(
                  t,
                  this.leaveParty.bind(this),
                )
              );
            if (a && 503 === a)
              return void S(
                'gameSelectErrorHandler ignoring SERVICE_UNAVAILABLE error',
              );
            a &&
              403 === a &&
              (t = this.get(
                'tra.parties_game_select_confirm_error_restricted',
              ));
          }
          this.showGameSelectErrorModal(t);
        },
        getCustomGameErrorMessage: function (e) {
          if (!e || '' === e || 500 === e.status) e = 'UnknownException';
          else {
            if ('GameNameNotUniqueException' === e || 'nameError' === e)
              return !1;
            if ('InvalidCustomGameNameException' === e)
              return this.get('tra.custom_game_setup_name_error_invalid');
            if (e === b.CUSTOM_GAME_ERROR_CODES[423])
              return this.get('tra.parties_game_select_patching_error');
          }
          return this.get(`tra.custom_game_setup_error_${e.toLowerCase()}`);
        },
        startTutorial: function () {
          switch (this.get('selected.trainingGameMode')) {
            case 'TUTORIAL_FLOW':
              this.get('gameflowService').startTutorialFlow();
              break;
            case 'BATTLE_TRAINING':
              this.get('gameflowService').startBattleTraining();
              break;
            default:
              this.get('gameflowService').startBasicTutorial();
          }
        },
        joinCustomGame: function () {
          const e = this.get('customGameListService.selectedCustomGame.id'),
            t = this.get('customGameListService.selectedCustomGame.partyId'),
            a = this.get('customGameListService.isSelectedCustomGameFull'),
            n = this.get(
              'customGameListService.isSelectedCustomGameSpectatorsFull',
            ),
            o = this.get(
              'customGameListService.selectedCustomGame.hasPassword',
            );
          this.set('selected.isUpdatingSelection', !0);
          const i = { spectator: a && !n, hasPassword: o };
          e ? (i.id = e) : (i.partyId = t),
            this.get('customGameListService')
              .joinCustomGame(i)
              .then(() => {
                this.isDestroying ||
                  this.isDestroyed ||
                  (this.set('selected.isUpdatingSelection', !1),
                  this.set('selected.isJoiningCustomGame', !1),
                  this.showParty());
              })
              .catch(() => {
                this.set('selected.isUpdatingSelection', !1);
              });
        },
        confirmButtonClicked: function () {
          if (
            this.get('selected.isTrainingGame') &&
            !this.get('selected.isCreatingCustomGame')
          )
            return this.startTutorial();
          if (this.get('selected.isJoiningCustomGame')) this.joinCustomGame();
          else {
            return (
              this.set('selected.isUpdatingSelection', !0),
              this.changePartyGameConfig().then(
                () => {
                  this.set('selected.isUpdatingSelection', !1),
                    this.get('selected.isCreatingCustomGame') ||
                      this.set('showingState.showVerticalAnimation', !0),
                    this.showParty();
                },
                (e) => {
                  this.gameSelectErrorHandler(e);
                },
              )
            );
          }
        },
        closeButtonClicked: function () {
          return (
            this.restoreLastSelection(),
            this.get('lobbiesService.inLobby')
              ? (this.set('showingState.showVerticalAnimation', !0),
                void this.showParty())
              : void this.hideOurselves()
          );
        },
        restoreLastSelection() {
          const e = this.get('lobbiesService.queueId');
          null !== e && this.set('selected.queueId', e);
          const t = this.get('customGamesService.isCustomUI');
          this.set('selected.isCreatingCustomGame', t),
            t || this.set('selected.needsAdditionalGameConfig', !1),
            this.set('selected.isJoiningCustomGame', !1),
            this.set('selected.isTrainingGame', !1);
        },
        actions: {
          confirmButton: function () {
            this.confirmButtonClicked();
          },
          closeButton: function () {
            this.closeButtonClicked();
          },
        },
      },
    );
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'aDuv4si9',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\footer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\footer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\footer-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["arrow-footer"],null,[["animationsEnabled","confirmButtonDisabled","confirmButtonText","confirmButtonShowTooltip","confirmButtonTooltipText","confirmButtonHoverSound","confirmButtonClickSound","closeButtonDisabled","closeButtonText","closeButtonShowTooltip","closeButtonTooltipText","closeButtonHoverSound","closeButtonClickSound","closeButtonType","confirmButtonClicked","closeButtonClicked"],[["get",["animationsEnabled"]],["get",["confirmButtonDisabled"]],["get",["confirmButtonText"]],["get",["confirmButtonShowTooltip"]],["get",["confirmButtonTooltipText"]],["get",["buttonSounds","confirmHover"]],["get",["buttonSounds","confirmClick"]],["get",["closeButtonDisabled"]],["get",["closeButtonText"]],["get",["closeButtonShowTooltip"]],["get",["closeButtonTooltipText"]],["get",["buttonSounds","closeHover"]],["get",["buttonSounds","closeClick"]],["get",["closeButtonType"]],"confirmButton","closeButton"]]],false],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-eligibility-observer",["concat",[["unknown",["eligibilityObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-showing-party-observer",["concat",[["unknown",["showingPartyObserver"]]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(406),
      (e.exports = n.Ember.Component.extend({
        classNames: ['parties-game-type-select-wrapper'],
        customGamesService: n.Ember.inject.service('custom-games'),
        layout: a(407),
        showingState: null,
        currentCategory: null,
        selected: null,
        queues: null,
        gameTypes: n.Ember.computed(
          'currentCategory',
          'queues.queuesByCategory',
          function () {
            const e = this.get('queues'),
              t = e.getAllAvailableGameTypesForCategory(
                this.get('currentCategory'),
              );
            return n.Ember.A(t);
          },
        ),
        actions: {
          selectQueue: function (e) {
            e.queueId
              ? this.set('selected.queueId', e.queueId)
              : e.trainingGameMode &&
                (this.set('selected.trainingGameMode', e.trainingGameMode),
                this.get('customGamesService').subCategoryExists(
                  this.get('selected.mapId'),
                  this.get('selected.trainingGameMode'),
                )
                  ? (this.set('selected.isCreatingCustomGame', !0),
                    this.get('customGamesService').selectSubcategoryByMapMode(
                      this.get('selected.mapId'),
                      this.get('selected.trainingGameMode'),
                    ))
                  : (this.set('selected.isCreatingCustomGame', !1),
                    this.get('customGamesService').resetSelectedSubcategory()));
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'jYwbga6v',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\index.js\\" "],["text","\\n"],["open-element","hr",[]],["flush-element"],["close-element"],["text","\\n"],["block",["each"],[["get",["gameTypes"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["game-type-card"],null,[["showingState","mapId","gameMode","requiresCustomGameSubCategory","queues","animationLock","selectedCategory","selectedMapId","selectedGameMode","selectedQueueId","selectedAssetMutator","selectedTrainingGameMode","selectQueue"],[["get",["showingState"]],["get",["gameType","mapId"]],["get",["gameType","gameMode"]],["get",["gameType","requiresCustomGameSubCategory"]],["get",["queues"]],["get",["selected","animationLock"]],["get",["selected","category"]],["get",["selected","mapId"]],["get",["selected","gameMode"]],["get",["selected","queueId"]],["get",["selected","assetMutator"]],["get",["selected","trainingGameMode"]],"selectQueue"]]],false],["text","\\n"]],"locals":["gameType"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(26),
      s = n(i);
    a(409);
    var l = a(1),
      r = n(l),
      c = a(7),
      m = a(6),
      d = n(m);
    e.exports = o.Ember.Component.extend(s.default, r.default, {
      classNames: ['game-type-card'],
      classNameBindings: [
        'isDisabled:disabled',
        'isCurrentlySelected:selected',
        'animationLock:animation-lock',
      ],
      attributeBindings: ['mapId:data-map-id', 'gameMode:data-game-mode'],
      layout: a(410),
      summonerService: o.Ember.inject.service('summoner'),
      eligibilityService: o.Ember.inject.service('queue-eligibility'),
      customGamesService: o.Ember.inject.service('custom-games'),
      assets: o.Ember.inject.service('assets'),
      platformConfigSingleton: d.default,
      showingState: null,
      mapId: !1,
      gameMode: !1,
      requiresCustomGameSubCategory: !1,
      queues: null,
      selectedCategory: !1,
      selectedMapId: !1,
      selectedGameMode: !1,
      selectedQueueId: !1,
      selectedAssetMutator: !1,
      selectedTrainingGameMode: !1,
      animationLock: !1,
      isCurrentlySelected: o.Ember.computed(
        'mapId',
        'gameMode',
        'selectedMapId',
        'isTraining',
        'selectedGameMode',
        'selectedCategory',
        'selectedTrainingGameMode',
        function () {
          if (this.get('isTraining')) {
            this.get('eligibilityService').isTutorialRestricted() &&
              this.set(
                'selectedTrainingGameMode',
                c.TRAINING_TYPES.PRACTICE_TOOL,
              );
            const e =
              this.get('mapId') === this.get('selectedMapId') &&
              this.get('gameMode') === this.get('selectedTrainingGameMode');
            return e;
          }
          return (
            this.get('mapId') === this.get('selectedMapId') &&
            this.get('gameMode') === this.get('selectedGameMode')
          );
        },
      ),
      gameTypeQueues: o.Ember.computed(
        'mapId',
        'gameMode',
        'selectedCategory',
        'queues.availableQueues',
        'queues.availableQueueIds',
        'eligiblityService.isSolo',
        function () {
          const e = this.get('queues'),
            t = this.get('selectedCategory'),
            a = this.get('mapId'),
            n = this.get('gameMode'),
            i = o.Ember.A(e.getAvailableQueuesForCategoryAndGameType(t, a, n));
          return i;
        },
      ),
      mapTeamSizeGreedy: o.Ember.computed(
        'mapId',
        'gameMode',
        'selectedCategory',
        function () {
          const e = this.get('queues'),
            t = this.get('selectedCategory'),
            a = this.get('mapId'),
            n = this.get('gameMode'),
            o = e.getAvailableQueuesForCategoryAndGameType(t, a, n);
          let i = 0;
          return (
            o.forEach((t) => {
              const a = e.getQueueById(t);
              a.numPlayersPerTeam &&
                a.numPlayersPerTeam > i &&
                (i = a.numPlayersPerTeam);
            }),
            i
          );
        },
      ),
      mapTeamSize: o.Ember.computed(
        'mapId',
        'selectedCategory',
        'defaultQueue.numPlayersPerTeam',
        function () {
          let e = this.get('defaultQueue.numPlayersPerTeam');
          return e || (e = this.get('mapTeamSizeGreedy')), e;
        },
      ),
      queueEligibilities: o.Ember.computed(
        'gameTypeQueues',
        'eligibilityService.eligibilities.[]',
        function () {
          const e = this.get('gameTypeQueues');
          return this.get('eligibilityService').getQueueEligibilities(e);
        },
      ),
      teamQueueEligibilities: o.Ember.computed(
        'gameTypeQueues',
        'eligibilityService.eligibilities.[]',
        function () {
          const e = this.get('gameTypeQueues');
          return this.get('eligibilityService').getTeamQueueEligibilities(e);
        },
      ),
      eligibleQueues: o.Ember.computed('queueEligibilities.[]', function () {
        const e = this.get('queueEligibilities');
        if (!e) return o.Ember.A();
        const t = e.filterBy('eligible');
        return t;
      }),
      noQueues: o.Ember.computed.lt('gameTypeQueues.length', 1),
      noEligibleQueues: o.Ember.computed.lt('eligibleQueues.length', 1),
      customGameSubCategoryExists: o.Ember.computed(
        'mapId',
        'gameMode',
        function () {
          const e = this.get('mapId'),
            t = this.get('gameMode'),
            a = this.get('customGamesService').subCategoryExists(e, t);
          return (
            a
              ? this.set(
                  'customGameSubCategoryMinLevel',
                  this.get('customGamesService').getSubcategoryMinLevel(e, t),
                )
              : this.set('customGameSubCategoryMinLevel', 1),
            a
          );
        },
      ),
      customGameSubCategoryMinLevel: 1,
      customGameSubCategoryMinLevelEligible: o.Ember.computed(
        'customGamesService.localSummonerLevel',
        'customGameSubCategoryMinLevel',
        function () {
          return (
            this.get('customGamesService.localSummonerLevel') >=
            this.get('customGameSubCategoryMinLevel')
          );
        },
      ),
      isDisabled: o.Ember.computed(
        'noQueues',
        'noEligibleQueues',
        'isTraining',
        'customGameSubCategoryExists',
        'customGameSubCategoryMinLevelEligible',
        'hasSoloEligibilityWarning',
        function () {
          if (this.get('requiresCustomGameSubCategory'))
            return (
              !this.get('customGameSubCategoryExists') ||
              !this.get('customGameSubCategoryMinLevelEligible')
            );
          return this.get('isTraining')
            ? this.get('eligibilityService').isTutorialRestricted()
            : !!this.get('hasSoloEligibilityWarning') || this.get('noQueues');
        },
      ),
      shouldShowEligibilityWarning: o.Ember.computed.or(
        'hasTeamEligibilityWarning',
        'hasSoloEligibilityWarning',
      ),
      hasSoloEligibilityWarning: o.Ember.computed(
        'eligibilityService.isSolo',
        'gameTypeQueues.[]',
        'eligibilityService.eligibilities.@each.summoners',
        'customGameSubCategoryMinLevelEligible',
        'isTraining',
        function () {
          if (this.get('eligibilityService.isSolo')) {
            const e = this.get('gameTypeQueues');
            if (this.get('isTraining')) {
              if (this.get('gameMode') === c.TRAINING_TYPES.PRACTICE_TOOL)
                return !this.get('customGameSubCategoryMinLevelEligible');
              if (this.get('gameMode') === c.TRAINING_TYPES.TUTORIAL)
                return this.get('eligibilityService').isTutorialRestricted();
            } else if (0 < e.length) {
              const t =
                this.get('eligibilityService').getSoloIneligibleQueues(e);
              return (
                t.length === this.get('gameTypeQueues.length') &&
                0 < this.get('gameTypeQueues.length')
              );
            }
          }
          return !1;
        },
      ),
      soloEligibilityWarningText: o.Ember.computed(
        'hasSoloEligibilityWarning',
        function () {
          if (this.get('hasSoloEligibilityWarning')) {
            const e = this._getSoloEligibilities();
            return this.getEligibilityStrings(
              e,
              !0,
              'player_solo_queue_restriction',
            );
          }
          return [];
        },
      ),
      _getSoloEligibilities: function () {
        const e = this.get('gameTypeQueues')[0];
        return this.get('eligibilityService').getSoloEligibilities(e);
      },
      hasTeamEligibilityWarning: o.Ember.computed(
        'teamQueueEligibilities.[]',
        'gameTypeQueues.[]',
        function () {
          const e = this.get('teamQueueEligibilities.length');
          return 0 !== e && e === this.get('gameTypeQueues.length');
        },
      ),
      _handleRestriction: function (e, t, a, n, o) {
        const i = e.restrictionCode;
        let s = !1;
        if (c.TENCENT_MINOR_RESTRICTIONS.includes(i) && n) return !0;
        c.TENCENT_MINOR_RESTRICTIONS.includes(i) && (s = !0);
        let l = `${o}_${i.toLowerCase()}`;
        'TeamMaxSizeRestriction' === i &&
          (l = 'parties_premade_size_restriction');
        const r = this.get('tra').formatString(l, e.restrictionArgs);
        return t.push(i), a.push(r), s || n;
      },
      getEligibilityStrings: function (
        e,
        t = !1,
        a = 'game_select_queue_restriction_party',
      ) {
        const n = [],
          o = [],
          s = (e && e.length) || 0;
        for (let l = 0, i; l < s; l++) {
          (i = e[l].restrictions),
            (i =
              this.get('eligibilityService').groupMissingTokenRestrictions(i));
          const s = (i && i.length) || 0;
          let r = !1;
          for (let e = 0; e < s; e++) {
            const s = i[e];
            s.restrictionCode &&
              s.restrictionArgs &&
              (!t || -1 === o.indexOf(s.restrictionCode)) &&
              (r = this._handleRestriction(s, o, n, r, a));
          }
        }
        return n;
      },
      gameTypeCardRestrictionsText: o.Ember.computed(
        'teamRestrictionsText',
        'soloEligibilityWarningText',
        function () {
          const e = this.get('teamRestrictionsText');
          return e.concat(this.get('soloEligibilityWarningText'));
        },
      ),
      teamRestrictionsText: o.Ember.computed(
        'tra.ready',
        'shouldShowEligibilityWarning',
        function () {
          return this.get('shouldShowEligibilityWarning')
            ? this.getEligibilityStrings(this.get('teamQueueEligibilities'), !0)
            : [];
        },
      ),
      disabledReasons: o.Ember.A(),
      computeDisabledReasons: o.Ember.computed(
        'isDisabledFeaturedGameMode',
        'noQueues',
        'tra.ready',
        'tra.game_select_category_not_available',
        'shouldShowEligibilityWarning',
        function () {
          if (this.get('requiresCustomGameSubCategory')) {
            if (!this.get('customGameSubCategoryMinLevelEligible')) {
              const e = {
                  playerMinLevelRestriction: this.get(
                    'customGameSubCategoryMinLevel',
                  ),
                },
                t = this.get('tra').formatString(
                  'parties_queue_restriction_player_playerminlevelrestriction',
                  e,
                );
              this.set('disabledReasons', o.Ember.A([t]));
            } else
              this.set(
                'disabledReasons',
                o.Ember.A([this.get('tra.game_select_category_not_available')]),
              );
            return;
          }
          return this.get('isDisabledFeaturedGameMode')
            ? void this.set(
                'disabledReasons',
                o.Ember.A([
                  this.get('tra.game_select_featured_game_mode_not_available'),
                ]),
              )
            : this.get('shouldShowEligibilityWarning')
            ? void this.set(
                'disabledReasons',
                this.get('gameTypeCardRestrictionsText'),
              )
            : this.get('noQueues')
            ? void this.set(
                'disabledReasons',
                o.Ember.A([this.get('tra.game_select_category_not_available')]),
              )
            : '';
        },
      ),
      tooltipConfig: {
        targetAnchor: { x: 'center', y: 'bottom' },
        tooltipAnchor: { x: 'center', y: 'top' },
        offset: { x: 0, y: 0 },
        caretPosition: 'auto',
      },
      gameTypeName: o.Ember.computed(
        'selectedCategory',
        'mapId',
        'gameMode',
        'selectedAssetMutator',
        'tra.ready',
        'tra.game_select_game_type_name_11_CLASSIC',
        function () {
          const e = this.get('selectedCategory'),
            t = this.get('mapId');
          let a = this.get('gameMode');
          const n = this.get('selectedAssetMutator');
          let o;
          if (e === c.CATEGORY_NAMES.PVP) {
            const e = this.get('assets').getMap(t, a, n);
            e && e.gameModeName && (o = e.gameModeName);
          }
          if (!o) {
            a = a.toLowerCase();
            const e = `game_select_game_type_name_${t}_${a}`;
            o = this.get(`tra.${e}`);
          }
          return o;
        },
      ),
      gameTypeDescription: o.Ember.computed(
        'selectedCategory',
        'mapId',
        'tra.ready',
        'gameMode',
        'selectedAssetMutator',
        'tra.game_select_category_description_pvp_11_classic',
        function () {
          let e = this.get('selectedCategory');
          const t = this.get('mapId');
          let a = this.get('gameMode');
          const n = this.get('selectedAssetMutator');
          let o;
          if (e === c.CATEGORY_NAMES.PVP) {
            const e = this.get('assets').getMap(t, a, n);
            e && e.gameModeDescription && (o = e.gameModeDescription);
          }
          if (!o) {
            if (this.get('isDisabledFeaturedGameMode')) return '';
            (a = a.toLowerCase()), (e = e.toLowerCase());
            const n = `game_select_category_description_${e}_${t}_${a}`;
            o = this.get(`tra.${n}`);
          }
          return o;
        },
      ),
      isTraining: o.Ember.computed.equal('selectedCategory', 'Training'),
      isDisabledFeaturedGameMode: o.Ember.computed(
        'mapId',
        'gameMode',
        function () {
          return (
            this.get('mapId') === c.DISABLED_RGM_GAME_TYPE.mapId &&
            this.get('gameMode') === c.DISABLED_RGM_GAME_TYPE.gameMode
          );
        },
      ),
      mapVersus: o.Ember.computed(
        'gameMode',
        'isTraining',
        'isDisabledFeaturedGameMode',
        'mapTeamSize',
        'tra.ready',
        'tra.game_select_team_size',
        function () {
          const e = this.get('gameMode');
          if ('TFT' === e)
            return this.get('tra.game_select_team_size_free_for_all_acronym');
          const t = this.get('mapTeamSize');
          return this.get('isTraining') ||
            this.get('isDisabledFeaturedGameMode') ||
            0 === t
            ? null
            : this.translate('game_select_team_size', { size: t });
        },
      ),
      defaultQueueId: o.Ember.computed(
        'gameTypeQueues.[]',
        'isTraining',
        function () {
          const e = this.get('gameTypeQueues'),
            t = this.get('isTraining');
          if (!(!e || 1 > e.length || t)) {
            const t = e[0];
            return t;
          }
        },
      ),
      defaultQueue: o.Ember.computed('defaultQueueId', function () {
        const e = this.get('defaultQueueId'),
          t = this.get('queues');
        return t.getQueueById(e);
      }),
      shouldDisplayQueueSelect: o.Ember.computed(
        'isDisabled',
        'isTraining',
        function () {
          const e = this.get('isDisabled'),
            t = this.get('isTraining');
          return !e && !t;
        },
      ),
      hoverSoundDisabled: o.Ember.computed.or(
        'isDisabled',
        'isCurrentlySelected',
      ),
      onDidInsertElement: o.Ember.on(
        'didInsertElement',
        o.Ember.observer(
          'mapId',
          'gameMode',
          'selectedAssetMutator',
          'assets.availableMaps',
          function () {
            if (this.element) {
              const e = this.element.querySelector('.parties-game-type-icon'),
                t = this.getMapSoundUrl('gameselect-button-hover-sound');
              this.attachHoverSoundWithDisabledCheck(e, t);
            }
          },
        ),
      ),
      gameServerRegionOptions: o.Ember.computed.alias(
        'customGamesService.gameServerRegionOptions',
      ),
      gameServerRegionsExist: o.Ember.computed.gt(
        'gameServerRegionOptions.length',
        0,
      ),
      shouldDisplayGameServerRegionOptions: o.Ember.computed.and(
        'gameServerRegionsExist',
        'isTraining',
        'customGameSubCategoryExists',
      ),
      updateGameServerRegionSelection: function (e) {
        if (e) this.set('customGamesService.playerInputs.gameServerRegion', e);
        else {
          const e = this.get('gameServerRegionOptions');
          for (let t = 0; t < e.length; t++)
            if (e[t].isSelected) {
              this.set(
                'customGamesService.playerInputs.gameServerRegion',
                e[t].value,
              );
              break;
            }
        }
      },
      _selectQueue: function () {
        this.get('shouldDisplayGameServerRegionOptions')
          ? this.updateGameServerRegionSelection()
          : this.set('customGamesService.playerInputs.gameServerRegion', '');
        const e = this.get('isTraining'),
          t = this.get('defaultQueueId'),
          a = e ? this.get('gameMode') : null;
        (t || e) &&
          (this.playSound(
            '/fe/lol-parties/sfx-gameselect-button-map-click.ogg',
          ),
          this.sendAction('selectQueue', { queueId: t, trainingGameMode: a }));
      },
      actions: {
        selectGameType: function () {
          this.get('animationLock') ||
            (this.get('isDisabled')
              ? this.playSound(
                  '/fe/lol-uikit/sfx-uikit-button-locked-click.ogg',
                )
              : !this.get('isCurrentlySelected') && this._selectQueue());
        },
        selectCategory: function (e) {
          this.get('isCurrentlySelected') &&
            !this.get('isDisabled') &&
            this.sendAction('selectQueue', { queueId: e });
        },
        gameServerRegionChange: function (e) {
          this.updateGameServerRegionSelection(e);
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'uVNoKqbJ',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-upper-half"],["modifier",["action"],[["get",[null]],"selectGameType"]],["flush-element"],["text","\\n  "],["append",["helper",["game-type-icon"],null,[["mapId","currentlySelected","gameTypeName","mapSubtitle","isTraining","isDisabledFeaturedGameMode","gameMode","assetMutator"],[["get",["mapId"]],["get",["isCurrentlySelected"]],["get",["gameTypeName"]],["get",["mapVersus"]],["get",["isTraining"]],["get",["isDisabledFeaturedGameMode"]],["get",["gameMode"]],["get",["assetMutator"]]]]],false],["text","\\n"],["block",["if"],[["get",["shouldShowEligibilityWarning"]]],null,8],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-lower-half"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-game-type-card-intro"],["flush-element"],["append",["unknown",["gameTypeDescription"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldDisplayGameServerRegionOptions"]]],null,5],["text","\\n"],["block",["if"],[["get",["shouldDisplayQueueSelect"]]],null,1],["close-element"],["text","\\n"],["append",["unknown",["computeDisabledReasons"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["game-type-category-select"],null,[["queues","queueId","selectedQueueId","selectCategory"],[["get",["queues"]],["get",["queueId"]],["get",["selectedQueueId"]],"selectCategory"]]],false],["text","\\n"]],"locals":["queueId"]},{"statements":[["text","  "],["open-element","hr",[]],["flush-element"],["close-element"],["text","\\n  "],["open-element","lol-uikit-scrollable",[]],["static-attr","class","parties-game-type-card-categories"],["flush-element"],["text","\\n"],["block",["each"],[["get",["gameTypeQueues"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n            "],["append",["unknown",["option","value"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected",""],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n            "],["append",["unknown",["option","value"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,3,2]],"locals":["option"]},{"statements":[["text","    "],["open-element","label",[]],["static-attr","for","custom-game-region"],["flush-element"],["append",["unknown",["tra","custom_game_setup_region_label"]],false],["close-element"],["text","\\n    "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","custom-game-region"],["flush-element"],["text","\\n"],["block",["each"],[["get",["gameServerRegionOptions"]]],null,4],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","li",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["reason"]]],null],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","game-type-category-disabled"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["disabledReasons"]]],null,6],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-eligibility-error"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],7],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(113),
      i = a(15),
      s = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(i);
    a(412);
    const l = { HIDDEN: 'hidden', CLICKED: 'clicked', ACTIVE: 'active' };
    e.exports = n.Ember.Component.extend({
      classNames: ['parties-game-type-icon'],
      classNameBindings: ['mapIdClassName'],
      layout: a(413),
      assets: n.Ember.inject.service('assets'),
      partySettingsService: n.Ember.inject.service('party-settings'),
      animationsEnabled: n.Ember.computed.alias(
        'partySettingsService.animationsEnabled',
      ),
      animationsDisabled: n.Ember.computed.not(
        'partySettingsService.animationsEnabled',
      ),
      mapId: null,
      gameMode: null,
      assetMutator: null,
      currentlySelected: !1,
      gameTypeName: '',
      mapSubtitle: !1,
      isTraining: !1,
      isDisabledFeaturedGameMode: !1,
      _initialLoad: !0,
      viewportStateIsShow: !0,
      mapIdClassName: n.Ember.computed('mapId', function () {
        const e = this.get('mapId');
        return `map-${e}`;
      }),
      videoState: n.Ember.computed(
        'currentlySelected',
        'animationsDisabled',
        'viewportStateIsShow',
        function () {
          const e = this.get('viewportStateIsShow');
          if (!0 === e) {
            const e = this.get('currentlySelected');
            let t;
            !0 === this._initialLoad
              ? ((t = !0), (this._initialLoad = !1))
              : (t = !this.get('animationsDisabled'));
            let a;
            return (
              (a = e && t ? l.ACTIVE : e ? l.CLICKED : l.HIDDEN),
              this.sendVideoEvent(a),
              a
            );
          }
          return this.sendVideoEvent(l.HIDDEN), l.HIDDEN;
        },
      ),
      sendVideoEvent: function (e) {
        e = e || this.get('videoState');
        const t = this.videoWrapper(),
          a = this.get('haveVideoUrls');
        t && a && t.dispatchEvent(new Event(e));
      },
      _getTrainingAssetUrl: function (e) {
        const t = this.get('gameMode');
        return o.TUTORIAL_ASSETS[t][e];
      },
      activeVideoUrl: n.Ember.computed(
        'isTraining',
        'mapId',
        'assets.availableMaps',
        function () {
          return this._getAssetUrl('game-select-icon-active-video');
        },
      ),
      introVideoUrl: n.Ember.computed(
        'isTraining',
        'mapId',
        'assets.availableMaps',
        function () {
          return this._getAssetUrl('game-select-icon-intro-video');
        },
      ),
      backgroundDefaultUrl: n.Ember.computed(
        'isTraining',
        'mapId',
        'assets.availableMaps',
        function () {
          return this._getAssetUrl('game-select-icon-default');
        },
      ),
      backgroundHoverUrl: n.Ember.computed(
        'isTraining',
        'mapId',
        'assets.availableMaps',
        function () {
          return this._getAssetUrl('game-select-icon-hover');
        },
      ),
      backgroundDisabledUrl: n.Ember.computed(
        'isTraining',
        'mapId',
        'assets.availableMaps',
        function () {
          return this._getAssetUrl('game-select-icon-disabled');
        },
      ),
      backgroundActiveUrl: n.Ember.computed(
        'isTraining',
        'mapId',
        'assets.availableMaps',
        function () {
          return this._getAssetUrl('icon-victory');
        },
      ),
      backgroundFillerUrl: n.Ember.computed(
        'isTraining',
        'mapId',
        'assets.availableMaps',
        function () {
          return this._getAssetUrl('game-select-icon-active');
        },
      ),
      backgroundFillerImageClass: n.Ember.computed('videoState', function () {
        return this.get('videoState') === l.CLICKED
          ? 'icon-bg-filler-fade-in'
          : 'icon-bg-filler-show';
      }),
      mapSubtitleBreakClass: n.Ember.computed(
        'isDisabledFeaturedGameMode',
        function () {
          return this.get('isDisabledFeaturedGameMode')
            ? 'parties-disabled-featured-game-mode-break'
            : '';
        },
      ),
      mapSubtitleText: n.Ember.computed('mapSubtitle', function () {
        return this.get('mapSubtitle') ? this.get('mapSubtitle') : '';
      }),
      haveVideoUrls: n.Ember.computed(
        'activeVideoUrl',
        'introVideoUrl',
        function () {
          const e = this.get('activeVideoUrl'),
            t = this.get('introVideoUrl');
          return e && '/' !== e && t && '/' !== t;
        },
      ),
      videoWrapper: function () {
        return this.element
          ? this.element.querySelector('#game-type-icon-state-machine')
          : null;
      },
      _getAssetUrl: function (e) {
        return this.get('isTraining')
          ? this._getTrainingAssetUrl(e)
          : this._getMapAssetUrl(e);
      },
      _getMapAssetUrl: function (e) {
        const t = this.get('assets').getMap(
            this.get('mapId'),
            this.get('gameMode'),
            this.get('assetMutator'),
          ),
          a = t && t.assets ? t.assets[e] : '';
        return `/${a}`;
      },
      videoURLObserver: n.Ember.computed('haveVideoUrls', function () {
        const e = this.get('haveVideoUrls');
        e && this.sendVideoEvent();
      }),
      _screenRootShowListener: null,
      _screenRootHideListener: null,
      _attachViewportListeners: function () {
        const e = n.Viewport.main().getScreenRoot(
          s.default.get('viewportApiKey'),
          'rcp-fe-lol-parties',
        );
        (this._screenRootShowListener = function () {
          (this._initialLoad = !0), this.set('viewportStateIsShow', !0);
        }.bind(this)),
          (this._screenRootHideListener = function () {
            this.set('viewportStateIsShow', !1);
          }.bind(this)),
          e.on('show', this._screenRootShowListener),
          e.on('hide', this._screenRootHideListener);
      },
      _detachViewportListeners: function () {
        const e = n.Viewport.main().getScreenRoot(
          s.default.get('viewportApiKey'),
          'rcp-fe-lol-parties',
        );
        this._screenRootShowListener &&
          (e.off('show', this._screenRootShowListener),
          (this._screenRootShowListener = null)),
          this._screenRootHideListener &&
            (e.off('hide', this._screenRootHideListener),
            (this._screenRootHideListener = null));
      },
      didInsertElement: function () {
        this._super(...arguments), this._attachViewportListeners();
      },
      willDestroyElement: function () {
        this._super(...arguments), this._detachViewportListeners();
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'sqto6gxT',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-icon-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-icon-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-icon-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-card-selected-glow"],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","icon-frame"],["flush-element"],["text","\\n"],["block",["if"],[["get",["animationsEnabled"]]],null,2],["text","  "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-default"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundDefaultUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-hover"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundHoverUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-disabled"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundDisabledUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["animationsDisabled"]]],null,1,0],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-game-type-card-break ",["unknown",["mapSubtitleBreakClass"]]]]],["flush-element"],["append",["unknown",["mapSubtitleText"]],false],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-card-name"],["flush-element"],["append",["unknown",["gameTypeName"]],false],["close-element"],["text","\\n\\n"],["append",["unknown",["videoURLObserver"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","lol-uikit-video-state-machine",[]],["static-attr","id","game-type-icon-state-machine"],["dynamic-attr","data-map-id",["concat",[["unknown",["mapId"]]]]],["flush-element"],["text","\\n      "],["open-element","lol-uikit-video-group",[]],["flush-element"],["text","\\n        "],["open-element","lol-uikit-video-state",[]],["static-attr","state","active"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-video",[]],["static-attr","type","idle"],["static-attr","class","icon-bg video-icon"],["dynamic-attr","src",["concat",[["unknown",["activeVideoUrl"]]]]],["static-attr","fade-in","0"],["static-attr","fade-out","333"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n\\n        "],["open-element","lol-uikit-video-state",[]],["static-attr","state","clicked"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-video",[]],["static-attr","type","intro"],["static-attr","class","icon-bg video-icon"],["dynamic-attr","src",["concat",[["unknown",["introVideoUrl"]]]]],["flush-element"],["close-element"],["text","\\n\\n          "],["open-element","lol-uikit-video",[]],["static-attr","type","idle"],["static-attr","class","icon-bg video-icon"],["dynamic-attr","src",["concat",[["unknown",["activeVideoUrl"]]]]],["static-attr","fade-out","333"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n\\n        "],["open-element","lol-uikit-video-state",[]],["static-attr","state","hidden"],["static-attr","no-preserve-state",""],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-active"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundActiveUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["icon-bg icon-bg-filler ",["unknown",["backgroundFillerImageClass"]]]]],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundFillerUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(1),
      r = n(l),
      c = a(6),
      m = n(c);
    a(415);
    const d = 440;
    e.exports = s.Ember.Component.extend(r.default, {
      classNames: ['parties-game-type-card-category-div'],
      classNameBindings: ['isSelected:selected', 'isDisabled:disabled'],
      eligibilityService: s.Ember.inject.service('queue-eligibility'),
      summonerService: s.Ember.inject.service('summoner'),
      platformConfigSingleton: m.default,
      layout: a(416),
      summonerId: s.Ember.computed.alias('summonerService.localSummonerId'),
      isSelected: s.Ember.computed(
        'selectedQueueId',
        'queueId',
        'isDisabled',
        function () {
          return (
            this.get('selectedQueueId') === this.get('queueId') &&
            !this.get('isDisabled')
          );
        },
      ),
      queueObj: s.Ember.computed('queueId', function () {
        return this.get('queues').getQueueById(this.get('queueId'));
      }),
      eligibility: s.Ember.computed(
        'queueId',
        'eligibilityService.eligibilities',
        function () {
          const e = this.get('queueId'),
            t = this.get('eligibilityService.eligibilities');
          let a = {};
          if (t && t[e]) {
            a = t[e];
            let n = a.restrictions;
            (n = this.get('eligibilityService').groupMissingTokenRestrictions(
              a.restrictions,
            )),
              (a.restrictions = n);
          }
          return a;
        },
      ),
      isDisabled: !1,
      isEligibilityRestricted: s.Ember.computed.not('eligibility.eligible'),
      gameTypeQueueName: s.Ember.computed(
        'queueId',
        'queues.platformJson',
        function () {
          const e = this.get('queueId'),
            t = this.get('queues.platformJson'),
            a = e && t ? t.find((t) => t.id === e) : null;
          return a ? a.description : '';
        },
      ),
      tooltipConfig: {
        targetAnchor: { x: 'center', y: 'bottom' },
        tooltipAnchor: { x: 'center', y: 'top' },
        offset: { x: 0, y: 0 },
      },
      disabledReasons: s.Ember.A(),
      disabledReasonsObserver: s.Ember.on(
        'init',
        s.Ember.observer('eligibility', function () {
          s.Ember.run.once(this, function () {
            this.computeDisabledReasons();
          });
        }),
      ),
      computeDisabledReasons: function () {
        const e = this.get('eligibility');
        if (!e || !e.eligible) {
          const t = this.get('eligibilityService');
          return t.generateDisabledReasonForParty(e).then((a) => {
            this.set(
              'isDisabled',
              t.isSummonerRestricted(e, this.get('summonerId')),
            ),
              this.set('disabledReasons', s.Ember.A(a));
          });
        }
        return this.set('isDisabled', !1), i.default.resolve();
      },
      click: function () {
        if (!this.get('isSelected') && !this.get('isDisabled')) {
          const e = this.get('queueId');
          this.sendAction('selectCategory', e),
            this.playSound('/fe/lol-uikit/sfx-uikit-radio-click.ogg');
        }
        return !1;
      },
      isSoloRewardsEnabled: s.Ember.computed.or(
        'soloIpIncentivesEnabled',
        'soloAutofillProtectionEnabled',
      ),
      soloIpIncentivesEnabled: s.Ember.computed.alias(
        'platformConfigSingleton.soloIpRewardsForQueueId440',
      ),
      soloAutofillProtectionEnabled: s.Ember.computed.alias(
        'platformConfigSingleton.soloAutoFillProtectionForQueueId440',
      ),
      shouldShowSoloRewards: s.Ember.computed(
        'queueId',
        'isSoloRewardsEnabled',
        'isDisabled',
        function () {
          return (
            this.get('queueId') === d &&
            this.get('isSoloRewardsEnabled') &&
            !this.get('isDisabled')
          );
        },
      ),
      allowablePremadeSizesForQueue440: s.Ember.computed.alias(
        'platformConfigSingleton.allowablePremadeSizesForQueue440',
      ),
      shouldShowAllowablePremadeSizes: s.Ember.computed('queueId', function () {
        return this.get('queueId') === d;
      }),
      allowablePremadeSizesString: s.Ember.computed(
        'tra',
        'tra.ready',
        'tra.game_select_flex_premade_size_any',
        'tra.game_select_flex_premade_size_fours_disabled',
        'tra.game_select_flex_premade_size_fives_only',
        'shouldShowAllowablePremadeSizes',
        'allowablePremadeSizesForQueue440',
        function () {
          if (
            !this.get('shouldShowAllowablePremadeSizes') ||
            !this.get('platformConfigSingleton')
          )
            return '';
          const e = this.get('allowablePremadeSizesForQueue440');
          return e === '1,2,3,4,5'
            ? this.get('tra.game_select_flex_premade_size_any')
            : e === '1,2,3,5'
            ? this.get('tra.game_select_flex_premade_size_fours_disabled')
            : e === '5'
            ? this.get('tra.game_select_flex_premade_size_fives_only')
            : '';
        },
      ),
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'sp1MqA+b',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-category-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-category-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-category-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-card-category-radio-option"],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["queue-eligibility-error queue-status-icon ",["helper",["if"],[["get",["isEligibilityRestricted"]],"queue-status-icon-visible"],null]]]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],5],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["solo-rewards-icon queue-status-icon ",["helper",["if"],[["get",["shouldShowSoloRewards"]],"queue-status-icon-visible"],null]]]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],3],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","data-queue-id",["concat",[["unknown",["queueId"]]]]],["dynamic-attr","data-disabled-reason",["concat",[["unknown",["computeDisabledReasons"]]]]],["dynamic-attr","class",["concat",[["helper",["if"],[["get",["isSelected"]],"current"],null]," ",["helper",["if"],[["get",["isDisabled"]],"disabled"],null]," parties-game-type-card-category-btn"]]],["flush-element"],["text","\\n  "],["append",["unknown",["gameTypeQueueName"]],false],["text","\\n"],["block",["if"],[["get",["shouldShowAllowablePremadeSizes"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","allowable-premade-sizes-text"],["flush-element"],["append",["unknown",["allowablePremadeSizesString"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","game-select-solo-rewards-item"],["flush-element"],["append",["unknown",["tra","game_select_solo_rewards_ip_incentive"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","game-select-solo-rewards-item"],["flush-element"],["append",["unknown",["tra","game_select_solo_rewards_autofill_protection"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n      "],["open-element","h5",[]],["flush-element"],["append",["unknown",["tra","game_select_solo_rewards_title"]],false],["close-element"],["text","\\n      "],["open-element","hr",[]],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["soloAutofillProtectionEnabled"]]],null,2],["block",["if"],[["get",["soloIpIncentivesEnabled"]]],null,1],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["reason"]]],null],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","class","game-type-category-disabled"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n      "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["disabledReasons"]]],null,4],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(27),
      i = n(o),
      s = a(0),
      l = a(6),
      r = n(l),
      c = a(7);
    e.exports = s.Ember.Component.extend({
      classNames: ['parties-game-navs'],
      classNameBindings: ['hasAlphaQueues'],
      layout: a(418),
      customGamesService: s.Ember.inject.service('custom-games'),
      eligibilityService: s.Ember.inject.service('queue-eligibility'),
      platformConfigSingleton: r.default,
      categories: s.Ember.computed('queues.queuesByCategory', function () {
        return this.convertCategories('primary');
      }),
      secondaryCategories: s.Ember.computed('queues', function () {
        return this.convertCategories('secondary');
      }),
      selectedIndex: s.Ember.computed(
        'categories',
        'selected.category',
        function () {
          const e = [].concat(
              c.CATEGORIES_DISPLAY_ORDER.primary,
              c.CATEGORIES_DISPLAY_ORDER.secondary,
            ),
            t = this.get('selected.category'),
            a = e.indexOf(t);
          return Math.max(a, 0);
        },
      ),
      actions: {
        selectCategory(e) {
          this.setCategory(e);
        },
      },
      setCategory: function (e) {
        if (
          (this.set('selected.category', e),
          this.set('selected.needsAdditionalGameConfig', !1),
          this.set('selected.isCreatingCustomGame', !1),
          this.set('selected.isJoiningCustomGame', !1),
          this.set('selected.isTrainingGame', !1),
          this.set('selected.queueId', null),
          'CreateCustom' === e)
        ) {
          this.get('customGamesService').resetSelectedSubcategory(),
            this.set('selected.isCreatingCustomGame', !0),
            this.set('selected.needsAdditionalGameConfig', !0);
          const e = this.get('customGamesService.selectedSubcategory.mapId');
          this.set('selected.mapId', e);
        } else if ('JoinCustom' === e)
          this.set('selected.isJoiningCustomGame', !0);
        else if ('Training' === e) {
          this.set('selected.isTrainingGame', !0);
          const e = this.get('queues').getTutorialQueues();
          e &&
            0 < e.length &&
            (this.get('eligibilityService').isTutorialRestricted() &&
            1 < e.length
              ? (this.set('selected.trainingGameMode', e[1].gameMode),
                this.set('selected.isCreatingCustomGame', !0))
              : this.set('selected.trainingGameMode', e[0].gameMode));
        } else {
          const t = this.getDefaultQueue(e);
          t && this.set('selected.queueId', t);
        }
      },
      getDefaultQueue: function (e) {
        const t = this.get('queues'),
          a = t.getAllAvailableGameTypesForCategory(e);
        var n = !0,
          o = !1,
          s = void 0;
        try {
          for (
            var l = (0, i.default)(a), r;
            !(n = (r = l.next()).done);
            n = !0
          ) {
            const a = r.value,
              n = t.getAvailableQueuesForCategoryAndGameType(
                e,
                a.mapId,
                a.gameMode,
              ),
              o = this.get('eligibilityService').getQueueEligibilities(n);
            for (let e = 0; e < n.length; e++) {
              const t = o[e];
              if (t && t.eligible) return n[e];
            }
          }
        } catch (e) {
          (o = !0), (s = e);
        } finally {
          try {
            !n && l.return && l.return();
          } finally {
            if (o) throw s;
          }
        }
        return !1;
      },
      convertCategories: function (e) {
        const t = [],
          a = this.get('queues');
        return (
          c.CATEGORIES_DISPLAY_ORDER[e].forEach((e) => {
            const n = a.categoryHasQueues(e);
            t.push(s.Ember.Object.create({ name: e, hasQueues: n }));
          }),
          s.Ember.A(t)
        );
      },
    });
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'uOA1/+Mt',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-navigation-bar",[]],["dynamic-attr","selectedindex",["concat",[["unknown",["selectedIndex"]]]]],["static-attr","type","nav-bar-secondary"],["static-attr","class","parties-game-navs-list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["categories"]]],null,1],["text","  "],["open-element","span",[]],["static-attr","class","parties-game-navs-break"],["flush-element"],["close-element"],["text","\\n"],["block",["each"],[["get",["secondaryCategories"]]],null,0],["close-element"],["text","\\n"],["append",["unknown",["custom-game-tournament-code"]],false]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["playable-category"],null,[["category","selected","action"],[["get",["catObj"]],["get",["selected"]],"selectCategory"]]],false],["text","\\n"]],"locals":["catObj"]},{"statements":[["text","    "],["append",["helper",["playable-category"],null,[["category","selected","action"],[["get",["catObj"]],["get",["selected"]],"selectCategory"]]],false],["text","\\n"]],"locals":["catObj"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(6),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    e.exports = n.Ember.Component.extend({
      tagName: 'lol-uikit-navigation-item',
      classNames: ['parties-game-navs-item'],
      customGamesService: n.Ember.inject.service('custom-games'),
      attributeBindings: [
        'disabled:disabled',
        'active:active',
        'category.name:data-category',
      ],
      layout: a(420),
      platformConfigSingleton: i.default,
      active: n.Ember.computed(
        'category.name',
        'selected.category',
        function () {
          return this.get('category.name') === this.get('selected.category');
        },
      ),
      isCreateCustom: n.Ember.computed.equal('category.name', 'CreateCustom'),
      isJoinCustom: n.Ember.computed.equal('category.name', 'JoinCustom'),
      isTraining: n.Ember.computed.equal('category.name', 'Training'),
      disabled: n.Ember.computed(
        'category.hasQueues',
        'isCreateCustom',
        'isJoinCustom',
        'isTraining',
        'customGamesService.available',
        'platformConfigSingleton.tutorialEnabled',
        function () {
          return this.get('isTraining')
            ? !this.get('platformConfigSingleton.tutorialEnabled')
            : this.get('isCreateCustom') || this.get('isJoinCustom')
            ? !this.get('customGamesService.available')
            : !this.get('category.hasQueues');
        },
      ),
      name: n.Ember.computed(
        'category.name',
        'tra.ready',
        'tra.parties_game_category_pvp',
        function () {
          const e = this.get('category.name');
          return e
            ? this.get(`tra.parties_game_category_${e.toLowerCase()}`)
            : '';
        },
      ),
      tooltipConfig: {
        targetAnchor: { x: 'center', y: 'bottom' },
        tooltipAnchor: { x: 'center', y: 'top' },
        offset: { x: 0, y: 0 },
      },
      click: function () {
        this.get('disabled') ||
          this.get('active') ||
          this.sendAction('action', this.get('category.name'));
      },
    });
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '0h3NR8nD',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\category-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\category-component\\\\index.js\\" "],["text","\\n"],["append",["unknown",["name"]],false],["text","\\n"],["block",["if"],[["get",["disabled"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","game_select_category_nav_not_available"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(17),
      i = a(5),
      s = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(i);
    a(422);
    const l = n.UIKit.getTooltipManager(),
      r = n.UIKit.getTemplateHelper();
    e.exports = n.Ember.Component.extend(s.default, {
      classNames: ['parties-custom-game-setup'],
      classNameBindings: ['haveNameError:name-error'],
      customGamesService: n.Ember.inject.service('custom-games'),
      layout: a(423),
      showingState: null,
      selected: null,
      queues: null,
      playerInputs: n.Ember.computed.alias('customGamesService.playerInputs'),
      selectedSubcategory: n.Ember.computed.alias(
        'customGamesService.selectedSubcategory',
      ),
      subcategories: n.Ember.computed.alias(
        'customGamesService.shownCustomSubcategories',
      ),
      spectatorTypes: n.Ember.computed.alias(
        'customGamesService.spectatorTypes',
      ),
      onDidInsertListener: n.Ember.on('didInsertElement', function () {
        this.set('playerInputs.password', ''),
          this.set('playerInputs.name', this.get('defaultGameName'));
      }),
      maxTeamSize: n.Ember.computed(
        'selectedSubcategory.numPlayersPerTeam',
        'selectedSubcategory.mutators',
        'playerInputs.mutatorId',
        function () {
          const e = this.get('selectedSubcategory.numPlayersPerTeam'),
            t = this.get('selectedSubcategory.mutators'),
            a = this.get('playerInputs.mutatorId');
          if (t) {
            const e = t.find((e) => e.id === a);
            if (e && e.numPlayersPerTeamOverride)
              return e.numPlayersPerTeamOverride;
          }
          return e;
        },
      ),
      teamSizeOptions: n.Ember.computed(
        'maxTeamSize',
        'minPlayersPerTeam',
        function () {
          const e = this.get('maxTeamSize');
          this.get('playerInputs.numPlayersPerTeam') > e &&
            this.set('playerInputs.numPlayersPerTeam', e);
          const t = this.get('playerInputs.numPlayersPerTeam'),
            a = this.get('minPlayersPerTeam'),
            o = [];
          for (let n = a; n <= e; n++) {
            const e = n === t;
            o.push({ value: n, isSelected: e });
          }
          return n.Ember.A(o);
        },
      ),
      minPlayersPerTeam: n.Ember.computed(
        'customGamesService.gameMapMinPlayers.[]',
        'customGamesService.gameMapMinPlayers.@each.minPlayers',
        'customGamesService.minPlayers',
        'selected.mapId',
        function () {
          let e = 1;
          const t = this.get('selected.mapId'),
            a = this.get('customGamesService.minPlayers');
          (e = this.get('customGamesService').findMinPlayersForMap(t)),
            a && a > e && (e = a);
          const n = Math.ceil(e / 2);
          return (
            this.get('playerInputs.numPlayersPerTeam') < n &&
              this.send('teamSizeChange', n),
            n
          );
        },
      ),
      gameServerRegionOptions: n.Ember.computed.alias(
        'customGamesService.gameServerRegionOptions',
      ),
      mutatorOptions: n.Ember.computed(
        'tra.ready',
        'selectedSubcategory.mutators.@each.name',
        function () {
          const e = this.get('selectedSubcategory.mutators');
          if (e && !(1 > e.length)) {
            this.resetMutatorOverrides(
              this.get('selectedSubcategory.mapId'),
              this.get('playerInputs.mutatorId'),
            );
            const t = [],
              a = this.get('playerInputs.mutatorId');
            for (let n = 0; n < e.length; n++) {
              const i = e[n].get('name');
              let s = e[n].get('id');
              s = parseInt(s, 10);
              const l = this.get('selectedSubcategory.mapId');
              if (
                -1 === o.CUSTOM_GAME_NORMAL_MUTATORS.indexOf(s) &&
                !this.isValidMutatorOverride(l, e[n])
              )
                continue;
              let r = i;
              o.CUSTOM_GAME_MUTATOR_NAMES[i] &&
                (r = this.get(
                  `tra.custom_game_mutator_type_${o.CUSTOM_GAME_MUTATOR_NAMES[i]}`,
                ));
              const c = s === a;
              t.push({ value: s, label: r, isSelected: c });
            }
            return n.Ember.A(t);
          }
        },
      ),
      spectatorOptions: n.Ember.computed(
        'tra.ready',
        'spectatorTypes',
        'selectedSubcategory.customSpectatorPolicies',
        function () {
          const e = this.get('playerInputs.spectatorType');
          let t = this.get('spectatorTypes');
          const a = this.get('selectedSubcategory.customSpectatorPolicies');
          (t && t.length) || (t = ['NotAllowed']), a && 0 < a.length && (t = a);
          const n = [];
          let i = !1;
          return (
            t.forEach((t) => {
              let a = t;
              o.CUSTOM_GAME_SPECTATOR_TYPES[t] &&
                (a = this.get(
                  `tra.custom_game_setup_spectator_type_${o.CUSTOM_GAME_SPECTATOR_TYPES[t]}`,
                ));
              const s = t === e;
              s && (i = !0);
              const l = { value: t, label: a, isSelected: s };
              n.push(l);
            }),
            i ||
              ((n[0].isSelected = !0),
              this.set('playerInputs.spectatorType', n[0].value)),
            n
          );
        },
      ),
      defaultGameName: n.Ember.computed.alias(
        'customGamesService.defaultGameName',
      ),
      nameError: n.Ember.computed.alias('customGamesService.nameError'),
      haveNameError: n.Ember.computed.alias('customGamesService.haveNameError'),
      nameErrorMessage: '',
      nameInput: function () {
        return this.element
          ? this.element.querySelector('input#custom-game-name')
          : null;
      },
      nameErrorObserver: n.Ember.computed(
        'tra.ready',
        'nameError',
        function () {
          const e = this.get('nameError');
          if (null === e) return;
          let t = '';
          switch (e) {
            case 'length':
              t = this.get('tra.custom_game_setup_name_error_length');
              break;
            case 'duplicate':
              const a = this.get('tra.formatString');
              t = a('custom_game_setup_name_error_duplicate', {
                name: this.get('playerInputs.name'),
              });
          }
          t && this.set('nameErrorMessage', t);
        },
      ),
      nameErrorTooltipObserver: n.Ember.computed(
        'nameErrorMessage',
        function () {
          const e = this.nameInput();
          if (e) {
            const t = this.get('nameErrorMessage');
            if (!t) return void l.unassign(e);
            const a = this.createTooltip(t);
            l.assign(
              e,
              a,
              {},
              {
                type: 'info',
                showDelay: 0,
                targetAnchor: { x: 'center', y: 'top' },
                tooltipAnchor: { x: 'center', y: 'bottom' },
                showEvent: 'nothing',
                hideEvent: 'nothing',
              },
            ),
              l.show(e);
          }
        },
      ),
      createTooltip: function (e) {
        const t = document.createElement('lol-uikit-tooltip');
        t.classList.add('parties-custom-game-name-error-tooltip'),
          t.setAttribute('position', 'bottom');
        const a = r.contentBlockDialogSimple(e);
        return a.setAttribute('padding', 'small'), t.appendChild(a), t;
      },
      haveNameLengthError: function () {
        const e = this.nameInput();
        return (
          !e ||
          (!(e.value && !(3 > e.value.trim().length)) &&
            (this.set('nameError', 'length'), !0))
        );
      },
      clearNameError: function () {
        this.set('nameError', null), this.set('nameErrorMessage', null);
      },
      resetMutatorOverrides: function (e, t) {
        if (this.get('selectedSubcategory.mutators')) {
          const a = this.get('selectedSubcategory.mutators').find(
            (e) => e.id === t,
          );
          if (
            a &&
            -1 === o.CUSTOM_GAME_NORMAL_MUTATORS.indexOf(t) &&
            !this.isValidMutatorOverride(e, a)
          ) {
            const e = this.get('selectedSubcategory.mutators')[0].id;
            this.set('playerInputs.mutatorId', e),
              this.set(
                'playerInputs.queueId',
                this.get('customGamesService').getQueueId(e),
              );
          }
        }
      },
      isValidMutatorOverride: function (e, t) {
        return (
          !!(
            o.CUSTOM_GAME_MAP_MUTATOR_OVERRIDES[e] &&
            -1 !== o.CUSTOM_GAME_MAP_MUTATOR_OVERRIDES[e].indexOf(t.id)
          ) &&
          (t.gameModeOverride || t.numPlayersPerTeamOverride)
        );
      },
      actions: {
        nameKeyUp: function () {
          this.haveNameLengthError() || this.clearNameError();
        },
        nameChange: function () {
          const e = this.nameInput();
          if (e && !this.haveNameLengthError()) {
            const t = e.value.trim();
            this.clearNameError(), this.set('playerInputs.name', t);
          }
        },
        passwordChange: function () {
          const e = this.element.querySelector('input#custom-game-password');
          e && e.value && this.set('playerInputs.password', e.value);
        },
        teamSizeChange: function (e) {
          const t = this.get('minPlayersPerTeam');
          e >= t && this.set('playerInputs.numPlayersPerTeam', e);
        },
        gameServerRegionChange: function (e) {
          this.set('playerInputs.gameServerRegion', e);
        },
        mutatorChanged: function () {
          const e = this.element.querySelector(
            '#custom-game-mutator lol-uikit-radio-input-option[selected]',
          );
          if (!e) return;
          let t = e.getAttribute('value');
          (t = parseInt(t, 10)),
            this.set('playerInputs.mutatorId', t),
            this.set(
              'playerInputs.queueId',
              this.get('customGamesService').getQueueId(t),
            );
        },
        spectatorChanged: function () {
          const e = this.element.querySelector(
            '#custom-game-spectator lol-uikit-radio-input-option[selected]',
          );
          e && this.set('playerInputs.spectatorType', e.getAttribute('value'));
        },
        selectSubcategory: function (e) {
          if (this.get('customGamesService').selectSubcategory(e)) {
            const e = this.get('selectedSubcategory.mapId');
            this.set('selected.mapId', e);
          }
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'N/ROf+D+',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-custom-game-subcategory-select"],["flush-element"],["text","\\n"],["block",["each"],[["get",["subcategories"]]],null,14],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-custom-game-lower-half"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-custom-game-text-inputs"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-custom-game-name-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-name"],["flush-element"],["append",["unknown",["tra","custom_game_setup_name_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-flat-input",[]],["flush-element"],["text","\\n        "],["open-element","input",[]],["static-attr","type","text"],["static-attr","name","custom-game-name"],["static-attr","id","custom-game-name"],["dynamic-attr","value",["concat",[["unknown",["defaultGameName"]]]]],["static-attr","maxlength","30"],["modifier",["action"],[["get",[null]],"nameChange"],[["on"],["focusOut"]]],["modifier",["action"],[["get",[null]],"nameKeyUp"],[["on"],["keyUp"]]],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","parties-custom-game-dropdown-fields"],["flush-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","parties-custom-game-size-field"],["flush-element"],["text","\\n        "],["open-element","label",[]],["static-attr","for","custom-game-size"],["flush-element"],["append",["unknown",["tra","custom_game_setup_team_size_label"]],false],["close-element"],["text","\\n        "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","custom-game-size"],["flush-element"],["text","\\n"],["block",["each"],[["get",["teamSizeOptions"]]],null,13],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"],["block",["if"],[["get",["gameServerRegionOptions"]]],null,10],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-custom-game-password-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-password"],["flush-element"],["append",["unknown",["tra","custom_game_setup_password_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-flat-input",[]],["flush-element"],["text","\\n        "],["open-element","input",[]],["static-attr","type","password"],["static-attr","name","custom-game-password"],["static-attr","id","custom-game-password"],["modifier",["action"],[["get",[null]],"passwordChange"],[["on"],["change"]]],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-custom-game-radio-options"],["flush-element"],["text","\\n"],["block",["if"],[["get",["mutatorOptions","length"]]],null,6],["text","    "],["open-element","div",[]],["static-attr","class","parties-custom-game-spectator-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-spectator"],["flush-element"],["append",["unknown",["tra","custom_game_setup_spectator_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-radio-input",[]],["static-attr","id","custom-game-spectator"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"spectatorChanged"],null],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["spectatorOptions"]]],null,2],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["nameErrorObserver"]],false],["text","\\n  "],["append",["unknown",["nameErrorTooltipObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["static-attr","selected",""],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,1,0]],"locals":["option"]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["static-attr","selected",""],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,4,3]],"locals":["option"]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-custom-game-type-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-mutator"],["flush-element"],["append",["unknown",["tra","custom_game_setup_type_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-radio-input",[]],["static-attr","id","custom-game-mutator"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"mutatorChanged"],null],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["mutatorOptions"]]],null,5],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                  "],["append",["unknown",["option","value"]],false],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected",""],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                  "],["append",["unknown",["option","value"]],false],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,8,7]],"locals":["option"]},{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","parties-custom-game-region-field"],["flush-element"],["text","\\n          "],["open-element","label",[]],["static-attr","for","custom-game-region"],["flush-element"],["append",["unknown",["tra","custom_game_setup_region_label"]],false],["close-element"],["text","\\n          "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","custom-game-region"],["flush-element"],["text","\\n"],["block",["each"],[["get",["gameServerRegionOptions"]]],null,9],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"teamSizeChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                "],["append",["unknown",["option","value"]],false],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected",""],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"teamSizeChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                "],["append",["unknown",["option","value"]],false],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,12,11]],"locals":["option"]},{"statements":[["text","    "],["append",["helper",["custom-game-subcategory-card"],null,[["index","animationLock","subcategory","selectedSubcategoryIndex","selected"],[["get",["index"]],["get",["selected","animationLock"]],["get",["subcategory"]],["get",["playerInputs","subcategoryIndex"]],"selectSubcategory"]]],false],["text","\\n"]],"locals":["subcategory","index"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(1),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o),
      s = a(17);
    e.exports = n.Ember.Component.extend(i.default, {
      classNames: ['parties-custom-game-subcategory-card'],
      classNameBindings: [
        'currentlySelected:selected',
        'unavailable:disabled',
        'animationLock:animation-lock',
      ],
      attributeBindings: ['mapId:data-map-id'],
      index: null,
      subcategory: null,
      selectedSubcategoryIndex: null,
      animationLock: !1,
      layout: a(425),
      assets: n.Ember.inject.service(),
      mapId: n.Ember.computed.alias('subcategory.mapId'),
      availability: n.Ember.computed(
        'subcategory.queueAvailability',
        function () {
          const e = this.get('subcategory.queueAvailability');
          return !!s.GAME_AVAILABILITY_TYPES[e] && s.GAME_AVAILABILITY_TYPES[e];
        },
      ),
      available: n.Ember.computed.equal('availability', 'available'),
      unavailable: n.Ember.computed.not('available'),
      unavailableTooltip: n.Ember.computed(
        'tra.ready',
        'tra.custom_game_setup_subcategory_unavailable_generic',
        function () {
          const e = this.get(
            'tra.custom_game_setup_subcategory_unavailable_generic',
          );
          return e;
        },
      ),
      currentlySelected: n.Ember.computed(
        'index',
        'selectedSubcategoryIndex',
        function () {
          const e = this.get('index'),
            t = this.get('selectedSubcategoryIndex');
          return e === t;
        },
      ),
      name: n.Ember.computed(
        'tra.ready',
        'subcategory.mapId',
        'subcategory.modifiers',
        'subcategory.gameMode',
        'assets',
        function () {
          const e = this.get('mapId'),
            t = this.get('gameMode'),
            a = this.get('assets').getMap(e, t);
          return a && a.name
            ? a.name
            : this.get(`tra.game_select_map_name_${e}`);
        },
      ),
      hoverSoundDisabled: n.Ember.computed.or(
        'currentlySelected',
        'unavailable',
      ),
      onDidInsertElement: n.Ember.on(
        'didInsertElement',
        n.Ember.observer('mapId', 'assets.availableMaps', function () {
          const e = this.element.querySelector('.subcategory-map-icon'),
            t = this.getMapSoundUrl('gameselect-button-hover-sound');
          this.attachHoverSoundWithDisabledCheck(e, t);
        }),
      ),
      tooltipConfig: {
        targetAnchor: { x: 'center', y: 'bottom' },
        tooltipAnchor: { x: 'center', y: 'top' },
        offset: { x: 0, y: 0 },
      },
      actions: {
        selectSubcategory: function () {
          this.get('animationLock') ||
            (this.get('unavailable')
              ? this.playSound(
                  '/fe/lol-parties/sfx-uikit-button-locked-click.ogg',
                )
              : !this.get('currentlySelected') &&
                (this.playSound(
                  '/fe/lol-parties/sfx-gameselect-button-map-click.ogg',
                ),
                this.sendAction('selected', this.get('index'))));
        },
      },
    });
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'KsAQT1/N',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\subcategory-card-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\subcategory-card-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","subcategory-map-icon"],["modifier",["action"],[["get",[null]],"selectSubcategory"]],["flush-element"],["text","\\n  "],["append",["helper",["game-type-icon"],null,[["mapId","currentlySelected","gameTypeName"],[["get",["mapId"]],["get",["currentlySelected"]],["get",["name"]]]]],false],["text","\\n"],["block",["if"],[["get",["unavailable"]]],null,1],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["unavailableTooltip"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","subcategory-tooltip-proxy"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(17);
    a(427),
      (e.exports = n.Ember.Component.extend({
        layout: a(428),
        classNames: ['custom-root'],
        classNameBindings: [
          'isShowingParty:custom-lobby-show:custom-lobby-hide',
        ],
        lobbiesService: n.Ember.inject.service('lobbies'),
        matchmakingService: n.Ember.inject.service('matchmaking'),
        customGameService: n.Ember.inject.service('custom-games'),
        selected: !1,
        isTFT: n.Ember.computed.alias('customGameService.isTFT'),
        isShowingParty: n.Ember.computed.alias('showingState.isShowingParty'),
        currentPlayer: n.Ember.computed.alias('lobbiesService.currentPlayer'),
        currentPlayerCanInvite: n.Ember.computed.alias(
          'lobbiesService.currentPlayerCanInvite',
        ),
        isCurrentPlayerPartyLeader: n.Ember.computed.alias(
          'lobbiesService.isCurrentPlayerPartyLeader',
        ),
        inviteButtonDisabled: n.Ember.computed.or(
          'matchmakingService.isSearching',
          'matchmakingService.isMatchFound',
        ),
        currentPartyIsFull: n.Ember.computed.alias(
          'lobbiesService.currentPartyIsFull',
        ),
        showSpectators: n.Ember.computed(
          'customGameService.spectatorPolicy',
          function () {
            const e = this.get('customGameService.spectatorPolicy');
            return !!(
              e &&
              o.CUSTOM_GAME_SPECTATOR_TYPES[e] &&
              'none' !== o.CUSTOM_GAME_SPECTATOR_TYPES[e] &&
              'dropin' !== o.CUSTOM_GAME_SPECTATOR_TYPES[e]
            );
          },
        ),
        isLobbyFull: n.Ember.computed.alias('customGameService.isLobbyFull'),
        didInsertElementListener: n.Ember.on('didInsertElement', function () {
          this.get('customGameService.isCustomUI') &&
            this.set('selected.animationLock', !1);
        }),
        actions: {
          showInviteModal: function () {
            this.sendAction('showInviteModal');
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'wfoIddFP',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-game-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-game-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-game-root-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","custom-game-invite-button-container"],["flush-element"],["text","\\n  "],["append",["helper",["invite-button"],null,[["currentPlayerCanInvite","buttonsDisabled","currentPartyIsFull","isCurrentPlayerPartyLeader","showInviteModal","isLobbyFull"],[["get",["currentPlayerCanInvite"]],["get",["inviteButtonDisabled"]],["get",["currentPartyIsFull"]],["get",["isCurrentPlayerPartyLeader"]],"showInviteModal",["get",["isLobbyFull"]]]]],false],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["lower-section"],null,[["currentPlayer"],[["get",["currentPlayer"]]]],2],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["unknown",["spectator-info"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["point-eligibility"],null,[["selected","isCustomGame"],[["get",["selected"]],true]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,1],["text","\\n  "],["append",["helper",["custom-teams"],null,[["isTFT"],[["get",["isTFT"]]]]],false],["text","\\n\\n  "],["append",["helper",["invite-info-panel"],null,[["currentPlayerCanInvite","isCustom"],[["get",["currentPlayerCanInvite"]],true]]],false],["text","\\n\\n"],["block",["if"],[["get",["showSpectators"]]],null,0],["text","\\n  "],["append",["helper",["parties-footer"],null,[["showingState","selected"],[["get",["showingState"]],["get",["selected"]]]]],false],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","parties-chat-room-custom"],["flush-element"],["text","\\n    "],["open-element","lol-social-chat-room",[]],["static-attr","type","lobby"],["static-attr","disabled-when-connecting",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(1),
      r = n(l);
    a(430),
      (e.exports = s.Ember.Component.extend(r.default, {
        classNames: ['custom-game-spectator-info'],
        layout: a(431),
        customGamesService: s.Ember.inject.service('custom-games'),
        summonerService: s.Ember.inject.service('summoner'),
        _buttonClickSound: '/fe/lol-parties/sfx-lobby-button-banner-click.ogg',
        _spectatorSummoners: s.Ember.A(),
        spectateButtonDisabled: s.Ember.computed(
          'spectatorSlotsFull',
          'onlyOnePlayerOnTeams',
          'customGamesService.preventTeamChanges',
          'customGamesService.isSwitchingTeamsOrSpectating',
          'customGameService.isTFT',
          function () {
            return (
              this.get('spectatorSlotsFull') ||
              (!this.get('customGamesService.isTFT') &&
                this.get('onlyOnePlayerOnTeams')) ||
              this.get('customGamesService.preventTeamChanges') ||
              this.get('customGamesService.isSwitchingTeamsOrSpectating')
            );
          },
        ),
        spectatorSlotsFull: s.Ember.computed(
          'spectators',
          'spectators.@each.summonerId',
          'spectatorSlotLimit',
          function () {
            const e = this.get('spectatorSlotLimit');
            if (!e) return !0;
            const t = this.get('spectators');
            return !t || t.length >= e;
          },
        ),
        currentPlayerIsSpectator: s.Ember.computed.alias(
          'customGamesService.currentPlayerIsSpectator',
        ),
        currentPlayerIsNotSpectator: s.Ember.computed.not(
          'currentPlayerIsSpectator',
        ),
        currentNumPlayers: s.Ember.computed.alias(
          'customGamesService.currentNumPlayers',
        ),
        onlyOnePlayerOnTeams: s.Ember.computed.equal('currentNumPlayers', 1),
        showSpectatorButton: s.Ember.computed.and(
          'currentPlayerIsNotSpectator',
        ),
        spectatorSlotLimit: s.Ember.computed.alias(
          'customGamesService.spectatorSlotLimit',
        ),
        spectators: s.Ember.computed.alias('customGamesService.spectators'),
        hasSpectators: s.Ember.computed.notEmpty('spectatorSummoners'),
        spectatorsCountText: s.Ember.computed(
          'tra.custom_game_spectators_count',
          'spectators',
          'spectatorSlotLimit',
          function () {
            const e = this.get('spectators'),
              t = this.get('spectatorSlotLimit'),
              a = this.get('tra.formatString');
            return a('custom_game_spectators_count', {
              currentNumber: e.length,
              maxNumber: t,
            });
          },
        ),
        spectateDisabledTooltip: s.Ember.computed(
          'tra.ready',
          'tra.custom_game_spectating_disabled',
          'spectateButtonDisabled',
          function () {
            if (this.get('spectatorSlotsFull'))
              return this.get('tra.custom_game_spectator_slots_full');
            return this.get('onlyOnePlayerOnTeams')
              ? this.get('tra.custom_game_spectator_need_players')
              : this.get('tra.custom_game_spectating_disabled');
          },
        ),
        spectatorsObserver: s.Ember.computed('spectators.[]', function () {
          const e = this.get('spectators'),
            t = e.map((e) =>
              this.get('summonerService').getSummoner(e.summonerId),
            );
          return (
            i.default.all(t).then((e) => {
              if (e && 0 < e.length) {
                const t = s.Ember.A();
                e.forEach((e) => {
                  e && e.summonerId && t.push(e);
                }),
                  this.set('_spectatorSummoners', s.Ember.A(t));
              }
            }),
            e
          );
        }),
        spectatorSummoners: s.Ember.computed(
          'spectators.[]',
          '_spectatorSummoners',
          '_spectatorSummoners.[]',
          function () {
            const e = this.get('_spectatorSummoners');
            if (!e) return s.Ember.A();
            const t = s.Ember.A();
            return (
              this.get('spectators').forEach((a) => {
                const n = e.findBy('summonerId', a.summonerId);
                n && t.push(n);
              }),
              t
            );
          },
        ),
        actions: {
          currentPlayerToSpectator: function () {
            this.get('customGamesService.isSwitchingTeamsOrSpectating') ||
              (this.playSound(this._buttonClickSound),
              this.get('customGamesService').joinSpectators());
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'kc6oKOUq',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","spectator-info-header-wrapper"],["flush-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","spectator-info-header"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","custom_game_spectators"]],false],["text"," ("],["append",["unknown",["spectatorsCountText"]],false],["text",")\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["showSpectatorButton"]]],null,5],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","spectator-info-spectators"],["flush-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","spectator-info-spectators-list"],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasSpectators"]]],null,2,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["comment"," We need to include spectatorsObserver in the layout or Ember will not fire that computed, for shame. "],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["append",["unknown",["spectatorsObserver"]],false],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["static-attr","class","spectator-info-spectators-list-item"],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","spectator-info-empty"],["flush-element"],["append",["unknown",["tra","custom_game_no_spectators"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["spectator-member"],null,[["spectator"],[["get",["spectator"]]]]],false],["text","\\n"]],"locals":["spectator"]},{"statements":[["block",["each"],[["get",["spectatorSummoners"]]],null,1]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n            "],["open-element","p",[]],["flush-element"],["text","\\n              "],["append",["unknown",["spectateDisabledTooltip"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],3]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","custom-game-spectate-button-wrapper"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-flat-button-secondary",[]],["static-attr","class","custom-game-spectate-button"],["dynamic-attr","disabled",["unknown",["spectateButtonDisabled"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"currentPlayerToSpectator"],null],null],["flush-element"],["text","\\n        "],["append",["unknown",["tra","custom_game_spectate"]],false],["text","\\n"],["block",["if"],[["get",["spectateButtonDisabled"]]],null,4],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(5),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    a(433),
      (e.exports = n.Ember.Component.extend(i.default, {
        layout: a(434),
        tagName: 'li',
        classNames: ['spectator-info-spectators-list-item'],
        lobbiesService: n.Ember.inject.service('lobbies'),
        chatService: n.Ember.inject.service('chat'),
        customGamesService: n.Ember.inject.service('custom-games'),
        contextMenuManager: n.UIKit.getContextMenuManager(),
        spectator: null,
        spectatorId: n.Ember.computed.alias('spectator.summonerId'),
        currentPlayer: n.Ember.computed.alias(
          'customGamesService.currentPlayer',
        ),
        currentPlayerId: n.Ember.computed.alias('currentPlayer.summonerId'),
        currentPlayerIsLeader: n.Ember.computed.alias(
          'lobbiesService.isCurrentPlayerPartyLeader',
        ),
        showManagementTools: n.Ember.computed.and(
          'currentPlayerIsLeader',
          'spectator',
        ),
        spectators: n.Ember.computed.alias('customGamesService.spectators'),
        isLeader: n.Ember.computed(
          'lobbiesService.currentPartyLeader.summonerId',
          'spectatorId',
          function () {
            return (
              this.get('spectatorId') ===
              this.get('lobbiesService.currentPartyLeader.summonerId')
            );
          },
        ),
        canInviteOthers: n.Ember.computed(
          'spectators.[]',
          'spectators.@each.allowedInviteOthers',
          'spectatorId',
          function () {
            const e = this.get('spectators').findBy(
              'summonerId',
              this.get('spectatorId'),
            );
            return !!e && e.allowedInviteOthers;
          },
        ),
        contextMenuModel: n.Ember.computed(
          'showManagementTools',
          'currentPlayerId',
          'spectatorId',
          'chatService.friends.[]',
          'canInviteOthers',
          'tra.ready',
          'tra.context_menu_kick',
          'tra.context_menu_friend_request',
          'tra.context_menu_revoke_invite_privilege',
          'tra.context_menu_grant_invite_privilege',
          function () {
            return this.get('currentPlayerId') === this.get('spectatorId')
              ? null
              : [
                  {
                    action: function () {
                      this.send('kick');
                    },
                    class: 'kick',
                    target: this,
                    label: this.get('tra.context_menu_kick'),
                    hidden: !this.get('showManagementTools'),
                  },
                  {
                    action: function () {
                      this.send('sendFriendRequest');
                    },
                    class: 'add-friend',
                    target: this,
                    label: this.get('tra.context_menu_friend_request'),
                    hidden: this.get('chatService').isFriend(
                      this.get('spectatorId'),
                    ),
                  },
                  {
                    action: function () {
                      this.send('toggleInvitePrivilege');
                    },
                    class: this.get('canInviteOthers')
                      ? 'revoke-invite'
                      : 'grant-invite',
                    target: this,
                    label: this.get('canInviteOthers')
                      ? this.get('tra.context_menu_revoke_invite_privilege')
                      : this.get('tra.context_menu_grant_invite_privilege'),
                    hidden: !this.get('showManagementTools'),
                  },
                ];
          },
        ),
        contextMenu: function (e) {
          this.contextMenuManager.setMenuItems(this.get('contextMenuModel')),
            this.contextMenuManager.openAtEvent(e);
        },
        actions: {
          sendFriendRequest: function () {
            if (this.get('spectator')) {
              const e = {
                direction: 'out',
                name: this.get('spectator.summonerName'),
              };
              this.get('chatService').sendFriendRequest(e);
            }
          },
          kick: function () {
            if (this.get('spectator')) {
              const e = this.get('tra').formatString(
                  'lobby_kick_confirmation_text',
                  { summonerName: this.get('spectator.displayName') },
                ),
                t = this.$(`<lol-uikit-content-block type="dialog-small">
          <p>${e}</p>
        </<lol-uikit-content-block>`);
              if (this.get('currentPlayerIsLeader')) {
                const e = this.showModal({
                  type: 'DialogConfirm',
                  data: {
                    contents: t,
                    acceptText: this.get('tra.parties_button_kick'),
                    declineText: this.get('tra.parties_button_cancel'),
                    onAccept: () => {
                      this.get('lobbiesService').removePlayerFromParty(
                        this.get('spectator.summonerId'),
                      );
                    },
                  },
                });
                e.domNode.classList.add('parties-kick-player-modal');
              }
            }
          },
          toggleInvitePrivilege: function () {
            if (this.get('showManagementTools')) {
              const e = this.get('canInviteOthers')
                ? 'revoke-invite'
                : 'grant-invite';
              this.get('lobbiesService').sendInvitePrivilegeAction(
                this.get('spectatorId'),
                e,
              );
            }
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'XeKAIIvF',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\spectator-member-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\spectator-member-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\spectator-member-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","spectator-info-container"],["flush-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","spectator-info-name"],["flush-element"],["append",["unknown",["spectator","displayName"]],false],["close-element"],["text","\\n  "],["open-element","span",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLeader"]]],null,1],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n            "],["open-element","p",[]],["flush-element"],["text","\\n              "],["append",["unknown",["tra","custom_game_is_leader"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-leader-icon"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],0],["text","      "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(436),
      (e.exports = n.Ember.Component.extend({
        classNames: ['custom-game-teams'],
        layout: a(437),
        customGameService: n.Ember.inject.service('custom-games'),
        teamSize: n.Ember.computed.alias('customGameService.teamSize'),
        currentPlayer: n.Ember.computed.alias(
          'customGameService.currentPlayer',
        ),
        currentPlayersTeam: n.Ember.computed.alias(
          'customGameService.currentPlayersTeam',
        ),
        team100: n.Ember.computed(
          'customGameService.team100',
          'customGameService.team100.[]',
          'customGameService.team100.@each.id',
          'customGameService.team100.@each.isBotLoading',
          'teamSize',
          function () {
            const e = this.get('customGameService.team100');
            return this._addTeamMembers(e);
          },
        ),
        team200: n.Ember.computed(
          'customGameService.team200',
          'customGameService.team200.[]',
          'customGameService.team200.@each.id',
          'customGameService.team200.@each.isBotLoading',
          'teamSize',
          function () {
            const e = this.get('customGameService.team200');
            return this._addTeamMembers(e);
          },
        ),
        availableBotsForTeam100: n.Ember.computed(
          'customGameService.availableBotDetails',
          'customGameService.availableBotDetails.[]',
          'customGameService.team100',
          'customGameService.team100.[]',
          'customGameService.team100.@each.id',
          function () {
            return this._getAvailableBotsForTeam(
              this.get('customGameService.team100'),
            );
          },
        ),
        availableBotsForTeam200: n.Ember.computed(
          'customGameService.availableBotDetails',
          'customGameService.availableBotDetails.[]',
          'customGameService.team200',
          'customGameService.team200.[]',
          'customGameService.team200.@each.id',
          function () {
            return this._getAvailableBotsForTeam(
              this.get('customGameService.team200'),
            );
          },
        ),
        _getAvailableBotsForTeam: function (e) {
          const t = this.get('customGameService.availableBotDetails');
          if (!t) return n.Ember.A();
          const a = n.Ember.A(e.filterBy('isBot', !0)),
            o = t.reject((e) => a.isAny('botChampionId', e.id));
          return n.Ember.A(o);
        },
        _addTeamMembers: function (e) {
          const t = this.get('teamSize'),
            a = n.Ember.A();
          return this._addPlayers(a, e), this._addPlaceholders(a, t), a;
        },
        _addPlaceholders: function (e, t) {
          if (e.length >= t) return;
          let a = !0;
          for (let o = 0; o < t; o++)
            if (!e[o]) {
              const t = n.Ember.Object.create({
                isPlaceholder: !0,
                isFirstPlaceholder: a,
              });
              (e[o] = t), (a = !1);
            }
        },
        _addPlayers: function (e, t) {
          t &&
            0 < t.length &&
            t.forEach(function (t) {
              e.push(t);
            });
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'ZYPhpzFm',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\index.js\\" "],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,4,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["custom-team-member"],null,[["id","member","currentPlayersTeam","team","availableBotsForTeam","isTFT"],[["get",["team100Member","summonerId"]],["get",["team100Member"]],["get",["currentPlayersTeam"]],1,["get",["availableBotsForTeam100"]],["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["team100Member"]},{"statements":[["open-element","div",[]],["static-attr","class","custom-game-team custom-game-team-tft"],["flush-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","custom-game-team-members"],["flush-element"],["text","\\n"],["block",["each"],[["get",["team100"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["custom-team-member"],null,[["id","member","currentPlayersTeam","team","availableBotsForTeam","isTFT"],[["get",["team200Member","summonerId"]],["get",["team200Member"]],["get",["currentPlayersTeam"]],2,["get",["availableBotsForTeam200"]],["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["team200Member"]},{"statements":[["text","      "],["append",["helper",["custom-team-member"],null,[["id","member","currentPlayersTeam","team","availableBotsForTeam","isTFT"],[["get",["team100Member","summonerId"]],["get",["team100Member"]],["get",["currentPlayersTeam"]],1,["get",["availableBotsForTeam100"]],["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["team100Member"]},{"statements":[["open-element","div",[]],["static-attr","class","custom-game-team custom-game-team-one"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","team-header"],["flush-element"],["append",["unknown",["tra","custom_game_team_one"]],false],["close-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","custom-game-team-members"],["flush-element"],["text","\\n"],["block",["each"],[["get",["team100"]]],null,3],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","custom-game-team custom-game-team-two"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","team-header"],["flush-element"],["append",["unknown",["tra","custom_game_team_two"]],false],["close-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","custom-game-team-members"],["flush-element"],["text","\\n"],["block",["each"],[["get",["team200"]]],null,2],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(5),
      s = n(i),
      l = a(1),
      r = n(l),
      c = a(118),
      m = n(c);
    a(443);
    const d = o.EmberAddons.EmberLifeline.RunMixin,
      p = (0, o.emberDataBinding)({
        Ember: o.Ember,
        websocket: (0, o.getProvider)().getSocket(),
        logPrefix: 'parties:player-banner:component',
        basePaths: { gameData: '/lol-game-data', ranked: '/lol-ranked' },
        boundProperties: {
          _botChampionDetails: {
            api: 'gameData',
            path: '/assets/v1/champions/{{botChampionId}}.json',
          },
          _rankedData: {
            api: 'ranked',
            path: '/v1/ranked-stats/{{member.puuid}}',
          },
          _profileIcons: {
            api: 'gameData',
            path: '/assets/v1/summoner-icons.json',
          },
        },
      }),
      u = o.UIKit.getModalManager();
    e.exports = o.Ember.Component.extend(
      d,
      p,
      s.default,
      r.default,
      m.default,
      {
        tagName: 'li',
        classNames: ['custom-game-team-member'],
        classNameBindings: [
          'isCurrentPlayer:is-current-custom-player',
          'canHover:is-other-player',
          'currentPlayerIsLeader:can-moderate',
          'isLeader:is-custom-leader',
          'isFriend:is-custom-friend:is-not-custom-friend',
          'isBot:is-bot',
        ],
        attributeBindings: [
          'memberType:data-custom-member-type',
          'id:data-custom-member-summoner-id',
          'botChampionId:data-bot-champion',
        ],
        layout: a(444),
        id: null,
        member: null,
        currentPlayersTeam: null,
        team: null,
        availableBotsForTeam: null,
        inviteDisabled: !1,
        _friendRequestSent: !1,
        _buttonClickSound: '/fe/lol-parties/sfx-lobby-button-banner-click.ogg',
        _modal: null,
        _joinLocked: !1,
        joinDisabled: o.Ember.computed.or(
          '_joinLocked',
          'customGameService.preventTeamChanges',
          'customGameService.isSwitchingTeamsOrSpectating',
        ),
        _isUpdatingBot: !1,
        _isBotLoading: o.Ember.computed('id', 'member.isBot', function () {
          return this.get('member.isBot') && -1 === this.get('id');
        }),
        updatingBotDisabled: o.Ember.computed.or(
          '_isUpdatingBot',
          '_isBotLoading',
          'customGameService.preventTeamChanges',
        ),
        customGameService: o.Ember.inject.service('custom-games'),
        chatService: o.Ember.inject.service('chat'),
        lobbiesService: o.Ember.inject.service('lobbies'),
        tftCosmeticsService: o.Ember.inject.service('tft-cosmetics'),
        summonerName: o.Ember.computed.alias('member.summonerName'),
        summonerLevel: o.Ember.computed.alias('member.summonerLevel'),
        accountId: o.Ember.computed.alias('member.accountId'),
        internalName: o.Ember.computed.alias('member.summonerInternalName'),
        botId: o.Ember.computed.alias('member.botId'),
        rankedWins: o.Ember.computed.alias('_rankedStats.wins'),
        rankedTier: o.Ember.computed.alias('_rankedStats.tier'),
        rankedDivision: o.Ember.computed.alias('_rankedStats.division'),
        currentPlayer: o.Ember.computed.alias(
          'customGameService.currentPlayer',
        ),
        currentPlayerIsLeader: o.Ember.computed.alias('currentPlayer.isLeader'),
        currentPlayerIsNotLeader: o.Ember.computed.not('currentPlayerIsLeader'),
        isNotCurrentPlayersTeam: o.Ember.computed.not('isCurrentPlayersTeam'),
        isNotCurrentPlayer: o.Ember.computed.not('isCurrentPlayer'),
        isBotOrPlaceholder: o.Ember.computed.or('isBot', 'isPlaceholder'),
        isPlayer: o.Ember.computed.not('isBotOrPlaceholder'),
        isPlaceholder: o.Ember.computed.alias('member.isPlaceholder'),
        isFirstPlaceholder: o.Ember.computed.alias('member.isFirstPlaceholder'),
        isRanked: o.Ember.computed.notEmpty('_rankedStats'),
        isLeader: o.Ember.computed.alias('member.isLeader'),
        hasInvitePrivileges: o.Ember.computed.alias(
          'member.allowedInviteOthers',
        ),
        canHover: o.Ember.computed.and('isPlayer', 'isNotCurrentPlayer'),
        isNotFriend: o.Ember.computed.not('isFriend'),
        isBot: o.Ember.computed.alias('member.isBot'),
        botChampionId: o.Ember.computed.alias('member.botChampionId'),
        botDifficulty: o.Ember.computed.alias('member.botDifficulty'),
        botsButtonDisabled: o.Ember.computed.or(
          'customGameService.customBotsDisabled',
          'customGameService.preventTeamChanges',
          '_availableBotsForCurrentTeamEmpty',
        ),
        _availableBotsForCurrentTeamEmpty: o.Ember.computed.empty(
          'availableBotsForCurrentTeam',
        ),
        currentBot: o.Ember.computed(
          'botChampionId',
          'botDifficulty',
          'customGameService.availableBotDetails',
          'customGameService.availableBotDetails.[]',
          function () {
            this.set('_isUpdatingBot', !1);
            const e = this.get('customGameService.availableBotDetails');
            return e ? e.findBy('id', this.get('botChampionId')) : null;
          },
        ),
        currentBotDifficulties: o.Ember.computed(
          'botDifficulty',
          'currentBot',
          'currentBot.botDifficulties',
          'currentBot.botDifficulties.[]',
          function () {
            const e = this.get('currentBot.botDifficulties');
            return e
              ? (e.forEach((e) => {
                  e.difficulty === this.get('botDifficulty')
                    ? o.Ember.set(e, 'selected', 'selected')
                    : o.Ember.set(e, 'selected', null);
                }),
                e)
              : o.Ember.A();
          },
        ),
        availableBotsForCurrentTeam: o.Ember.computed(
          'currentBot',
          'availableBotsForTeam',
          'availableBotsForTeam.[]',
          function () {
            const e = o.Ember.A(),
              t = this.get('currentBot');
            return (
              t && (o.Ember.set(t, 'selected', 'selected'), e.pushObject(t)),
              this.get('availableBotsForTeam').forEach((t) => {
                o.Ember.set(t, 'selected', null), e.pushObject(t);
              }),
              e.sortBy('name')
            );
          },
        ),
        memberType: o.Ember.computed(
          'isPlayer',
          'isBot',
          'isPlaceholder',
          function () {
            let e = '';
            return (
              this.get('isPlayer')
                ? (e = 'player')
                : this.get('isBot')
                ? (e = 'bot')
                : this.get('isPlaceholder') && (e = 'placeholder'),
              e
            );
          },
        ),
        isCurrentPlayer: o.Ember.computed('currentPlayer', 'id', function () {
          return this.get('currentPlayer.summonerId') === this.get('id');
        }),
        isCurrentPlayersTeam: o.Ember.computed(
          'team',
          'currentPlayersTeam',
          function () {
            const e = this.get('currentPlayersTeam');
            return null !== e && e === this.get('team');
          },
        ),
        isFriend: o.Ember.computed('chatService.friends.[]', 'id', function () {
          const e = this.get('chatService'),
            t = e.get('friends');
          return !!(t && 0 < t.length) && t.isAny('summonerId', this.get('id'));
        }),
        rankedTierAndDivisionText: o.Ember.computed(
          'rankedTier',
          'rankedDivision',
          function () {
            const e = this.get('rankedTier'),
              t = this.get('rankedDivision');
            return o.LeagueTierNames.getFullTierDivisionName(e, t);
          },
        ),
        botName: o.Ember.computed.alias('_botChampionDetails.name'),
        botProfileIconUrl: o.Ember.computed.alias(
          '_botChampionDetails.squarePortraitPath',
        ),
        botDifficultyString: o.Ember.computed('botDifficulty', function () {
          return this.get('customGameService').getDifficultyDisplayName(
            this.get('botDifficulty'),
          );
        }),
        disableInviteButton: function () {
          this.set('inviteDisabled', !0);
        },
        enableInviteButton: function (e = 0) {
          this.runTask(() => this.set('inviteDisabled', !1), e);
        },
        _updateModalShowNone(e) {
          e &&
            (this._showNoneOption
              ? e.setAttribute('show-none', '')
              : e.removeAttribute('show-none'));
        },
        companionIconUrl: o.Ember.computed('companionIconId', function () {
          return this.get(
            'tftCosmeticsService.companionIconUrls',
          )[this.get('companionIconId')];
        }),
        _rankedStats: o.Ember.computed(
          '_rankedData.highestRankedEntry',
          function () {
            return this.get('_rankedData.highestRankedEntry') || null;
          },
        ),
        actions: {
          joinOtherTeam: function () {
            if (!this.get('joinDisabled')) {
              this.set('_joinLocked', !0),
                this.playSound(this._buttonClickSound);
              const e = this.get('team');
              e && this.get('customGameService').switchTeams(e);
            }
          },
          addBot: function () {
            const e = this.get('availableBotsForCurrentTeam');
            if (
              !(
                this.get('updatingBotDisabled') ||
                this.get('botsButtonDisabled') ||
                1 > e.length
              )
            ) {
              this.playSound(this._buttonClickSound);
              const t = Math.floor(Math.random() * e.length),
                a = e.objectAt(t);
              this.get('customGameService').addBot(
                this.get('team'),
                a.id,
                a.botDifficulties[0].difficulty,
              );
            }
          },
          changeBotChampion: function (e) {
            !e ||
              e.id === this.get('botChampionId') ||
              this.get('updatingBotDisabled') ||
              (this.set('_isUpdatingBot', !0),
              this.get('customGameService').changeBot(
                this.get('botId'),
                this.get('team'),
                e.id,
                e.botDifficulties[0].difficulty,
              ));
          },
          changeBotDifficulty: function (e) {
            this.get('updatingBotDisabled') ||
              e === this.get('botDifficulty') ||
              this.get('_isUpdatingBot') ||
              (this.set('_isUpdatingBot', !0),
              this.get('customGameService').changeBot(
                this.get('botId'),
                this.get('team'),
                this.get('botChampionId'),
                e,
              ));
          },
          toggleInvite: function () {
            this.playSound(this._buttonClickSound);
            const e = this.get('member');
            if (
              this.get('currentPlayerIsLeader') &&
              !this.get('inviteDisabled')
            ) {
              this.disableInviteButton();
              const t = e.allowedInviteOthers
                ? 'revoke-invite'
                : 'grant-invite';
              this.get('lobbiesService').sendInvitePrivilegeAction(
                this.get('id'),
                t,
              ),
                this.enableInviteButton(1e3);
            }
          },
          addFriend: function () {
            if ((this.playSound(this._buttonClickSound), this.get('member'))) {
              const e = { direction: 'out', name: this.get('summonerName') };
              this.get('chatService').sendFriendRequest(e),
                this.set('_friendRequestSent', !0);
            }
          },
          kick: function () {
            if (!this.get('updatingBotDisabled')) {
              this.playSound(this._buttonClickSound);
              const e = this.get('tra').formatString(
                  'lobby_kick_confirmation_text',
                  { summonerName: this.get('summonerName') },
                ),
                t = this.$(`<lol-uikit-content-block type="dialog-small">
          <p>${e}</p>
        </lol-uikit-content-block>`);
              this.get('currentPlayerIsLeader') &&
                this.showModal({
                  type: 'DialogConfirm',
                  data: {
                    contents: t,
                    acceptText: this.get('tra.parties_button_kick'),
                    declineText: this.get('tra.parties_button_cancel'),
                    onAccept: () => {
                      this.get('lobbiesService').removePlayerFromParty(
                        this.get('id'),
                      );
                    },
                  },
                });
            }
          },
          removeBot: function () {
            this.get('updatingBotDisabled') ||
              (this.playSound(this._buttonClickSound),
              this.get('customGameService').removeBot(this.get('botId')));
          },
          openLoadoutsModal: function () {
            this._modal ||
              (this._modal = document.createElement(
                'lol-parties-loadouts-modal',
              )),
              this._modal.setAttribute('set-name', 'tft'),
              this._modal.setAttribute('types', [
                'companions',
                'tft_map_skins',
                'tft_damage_skins',
              ]),
              this._modal.setAttribute('active-type', 'companions'),
              this._updateModalShowNone(this._modal),
              (this._modalRoot = u.add({
                type: 'DialogAlert',
                data: {
                  contents: this._modal,
                  dismissible: !0,
                  dismissibleType: 'inside',
                },
              }));
          },
        },
      },
    );
  },
  function (e, t, a) {
    e.exports = { default: a(440), __esModule: !0 };
  },
  function (e, t, a) {
    a(441), (e.exports = a(4).Number.isInteger);
  },
  function (e, t, a) {
    var n = a(11);
    n(n.S, 'Number', { isInteger: a(442) });
  },
  function (e, t, a) {
    var n = a(14),
      o = Math.floor;
    e.exports = function (e) {
      return !n(e) && isFinite(e) && o(e) === e;
    };
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 's6iuzHdr',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\custom-team-member-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\custom-team-member-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\custom-team-member-component\\\\index.js\\" "],["text","\\n"],["comment"," PLACEHOLDER MEMBER "],["text","\\n"],["block",["if"],[["get",["isPlaceholder"]]],null,30],["text","\\n"],["comment"," PLAYER MEMBER "],["text","\\n"],["block",["if"],[["get",["isPlayer"]]],null,24],["text","\\n"],["comment"," BOTS "],["text","\\n"],["block",["if"],[["get",["isBot"]]],null,4]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["botDifficulty","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"changeBotDifficulty",["get",["botDifficulty","difficulty"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n              "],["append",["unknown",["botDifficulty","difficultyDisplayName"]],false],["text","\\n            "],["close-element"],["text","\\n"]],"locals":["botDifficulty"]},{"statements":[["text","            "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","class","custom-bot-champions-dropdown-option"],["dynamic-attr","selected",["unknown",["availableBot","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"changeBotChampion",["get",["availableBot"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","custom-bot-champions-dropdown-option-content"],["flush-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","custom-member-icon ui-dropdown-option-only"],["flush-element"],["text","\\n                    "],["open-element","div",[]],["static-attr","class","custom-member-bot-icon"],["flush-element"],["text","\\n                      "],["open-element","img",[]],["static-attr","class","custom-member-bot-icon-img"],["dynamic-attr","src",["concat",[["unknown",["availableBot","botIconUrl"]]]]],["flush-element"],["close-element"],["text","\\n                      "],["open-element","div",[]],["static-attr","class","ring"],["flush-element"],["close-element"],["text","\\n                    "],["close-element"],["text","\\n                  "],["close-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","custom-bot-champion-name"],["flush-element"],["text","\\n                    "],["append",["unknown",["availableBot","name"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":["availableBot"]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-bot-options"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","direction","downward"],["static-attr","class","custom-bot-champions-dropdown"],["dynamic-attr","disabled",["unknown",["updatingBotDisabled"]],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["availableBotsForCurrentTeam"]]],null,1],["text","        "],["close-element"],["text","\\n        "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","class","custom-bot-difficulties-dropdown"],["dynamic-attr","disabled",["unknown",["updatingBotDisabled"]],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["currentBotDifficulties"]]],null,0],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","custom_game_bot_remove"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","custom-member-info-left"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-info-left-first"],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-summoner-level"],["flush-element"],["open-element","hr",[]],["flush-element"],["close-element"],["close-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-kick-member-button"],["modifier",["action"],[["get",[null]],"removeBot"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],3],["text","        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-member-icon"],["flush-element"],["text","\\n      "],["comment"," TODO: This is a hacky copy of lol-social-avatar since it does not support champion icons as of this writing, but should just use lol-social-avatar if we can "],["text","\\n      "],["open-element","div",[]],["static-attr","class","custom-member-bot-icon"],["flush-element"],["text","\\n        "],["open-element","img",[]],["static-attr","class","custom-member-bot-icon-img"],["dynamic-attr","data-bot-icon-id",["unknown",["botChampionId"]],null],["dynamic-attr","src",["unknown",["botProfileIconUrl"]],null],["static-attr","draggable","false"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","ring"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-member-bot-name"],["flush-element"],["append",["unknown",["botName"]],false],["text"," "],["append",["unknown",["tra","custom_game_bot_name"]],false],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-member-info-right"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-member-bot-skill-level"],["flush-element"],["append",["unknown",["botDifficultyString"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["currentPlayerIsLeader"]]],null,2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                      "],["append",["unknown",["tra","context_menu_friend_request"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                      "],["append",["unknown",["tra","custom_game_friend_request_sent"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","p",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["_friendRequestSent"]]],null,6,5],["text","                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-add-friend"],["flush-element"],["text","\\n        "],["open-element","button",[]],["static-attr","class","custom-add-friend-button"],["dynamic-attr","disabled",["unknown",["_friendRequestSent"]],null],["modifier",["action"],[["get",[null]],"addFriend"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],7],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["tra","grant_invite_privileges_tooltip"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["tra","revoke_invite_privileges_tooltip"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n            "],["open-element","p",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasInvitePrivileges"]]],null,10,9],["text","            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","kick_tooltip"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","span",[]],["static-attr","class","custom-kick-member-button custom-kick-member-button-tft"],["modifier",["action"],[["get",[null]],"kick"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],12],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-flat-button-secondary",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"openLoadoutsModal"],null],null],["static-attr","class","custom-loadouts-button"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","custom_game_loadouts_button"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isCurrentPlayer"]]],null,14]],"locals":[]},{"statements":[["text","          "],["comment"," TODO: normal wins here "],["text","\\n          "],["open-element","span",[]],["static-attr","class","custom-member-info-wins"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","span",[]],["static-attr","class","custom-member-info-ranked-tier"],["flush-element"],["text","\\n            "],["append",["unknown",["rankedTierAndDivisionText"]],false],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","custom-member-info-ranked-wins"],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_wins"]],false],["text"," "],["append",["unknown",["rankedWins"]],false],["text"," "],["append",["unknown",["tra","custom_game_ranked"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-member-info-stats"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isRanked"]]],null,17,16],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_is_leader"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-social-avatar-icon",[]],["dynamic-attr","icon-url",["unknown",["companionIconUrl"]],null],["dynamic-attr","availability",["concat",[["unknown",["_chatAvailability"]]]]],["static-attr","show-availability","true"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-social-avatar-icon",[]],["dynamic-attr","icon-id",["unknown",["profileIconId"]],null],["dynamic-attr","availability",["concat",[["unknown",["_chatAvailability"]]]]],["static-attr","show-availability","true"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","kick_tooltip"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-info-left-first"],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-summoner-level"],["flush-element"],["append",["unknown",["summonerLevel"]],false],["close-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-kick-member-button"],["modifier",["action"],[["get",[null]],"kick"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],22],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["comment"," items in this list are hidden and displayed on hover in styles "],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-member-info-left"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,23],["text","    "],["open-element","div",[]],["static-attr","class","custom-member-icon"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,21,20],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-member-name"],["flush-element"],["append",["unknown",["summonerName"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-leader-icon"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],19],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-member-info-right"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,18,15],["text","    "],["open-element","div",[]],["static-attr","class","custom-invite-privileges"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isTFT"]]],null,13],["text","      "],["open-element","button",[]],["dynamic-attr","class",["concat",["custom-invite-privilege-button ",["helper",["if"],[["get",["hasInvitePrivileges"]],"privileges-granted"],null]]]],["modifier",["action"],[["get",[null]],"toggleInvite"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],11],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["isNotFriend"]]],null,8],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","p",[]],["flush-element"],["text","\\n                    "],["append",["unknown",["tra","custom_game_bot_add_disabled_no_available_bots"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],25]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","member-add-bot"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-flat-button-secondary",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"addBot"],null],null],["dynamic-attr","disabled",["unknown",["botsButtonDisabled"]],null],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_bot_add"]],false],["text","\\n"],["block",["if"],[["get",["botsButtonDisabled"]]],null,26],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","member-join-other-team"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-flat-button-secondary",[]],["static-attr","class","member-join-other-team-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"joinOtherTeam"],null],null],["dynamic-attr","disabled",["unknown",["joinDisabled"]],null],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_join"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","custom-member-info-right custom-placeholder-buttons"],["flush-element"],["text","\\n      "],["comment"," JOIN OTHER TEAM "],["text","\\n"],["block",["if"],[["get",["isNotCurrentPlayersTeam"]]],null,28],["text","      "],["comment"," ADD BOT "],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,27],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","custom-member-info-left"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-team-member-placeholder member-info-left"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","custom_game_empty"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["isFirstPlaceholder"]]],null,29]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(1),
      s = n(i),
      l = a(446),
      r = n(l);
    a(447);
    const c = new r.default([], {
      keys: [
        { name: 'lobbyName', weight: '1' },
        { name: 'ownerSummonerName', weight: '0.5' },
      ],
    });
    e.exports = o.Ember.Component.extend(s.default, {
      layout: a(448),
      classNames: ['custom-game-list'],
      classNameBindings: ['searchString:custom-game-list-searched'],
      customGameListService: o.Ember.inject.service('custom-game-list'),
      customGames: o.Ember.computed.readOnly(
        'customGameListService.customGames',
      ),
      refreshEnabled: !0,
      refreshDisabled: o.Ember.computed.not('refreshEnabled'),
      sortBy: 'lobbyName',
      selectedCustomGame: null,
      isSortReversed: !1,
      lobbyNameSorted: !0,
      ownerSummonerNameSorted: !1,
      mapNameSorted: !1,
      _isSelectingCustomGame: !1,
      isNotSearched: o.Ember.computed.empty('searchString'),
      showLobbyNameSorted: o.Ember.computed.and(
        'lobbyNameSorted',
        'isNotSearched',
      ),
      showOwnerSummonerNameSorted: o.Ember.computed.and(
        'ownerSummonerNameSorted',
        'isNotSearched',
      ),
      showMapNameSorted: o.Ember.computed.and('mapNameSorted', 'isNotSearched'),
      handleWillDestroyElement: o.Ember.on('willDestroyElement', function () {
        this.set('customGameListService.selectedCustomGame', null);
      }),
      sortOrder: o.Ember.computed('isSortReversed', function () {
        return this.get('isSortReversed') ? 'desc' : 'asc';
      }),
      sortOrderClass: o.Ember.computed('sortOrder', function () {
        return `custom-game-header-${this.get('sortOrder')}`;
      }),
      sortDefinition: o.Ember.computed('sortBy', 'isSortReversed', function () {
        return [`${this.get('sortBy')}:${this.get('sortOrder')}`];
      }),
      filteredCustomGames: o.Ember.computed(
        'customGames.@each.{lobbyName,ownerSummonerName,maxSpectatorSlots,hasPassword}',
        'shouldShowSpectators',
        'shouldShowPrivateOnly',
        'searchString',
        function () {
          const e = this.get('shouldShowSpectators'),
            t = this.get('shouldShowPrivateOnly'),
            a = this.get('customGames');
          if (a) {
            const n = a.filter(
                (a) =>
                  (!t || a.get('hasPassword')) &&
                  (!e || a.get('maxSpectatorSlots')),
              ),
              i = this.get('searchString');
            return i
              ? (c.list !== n && c.set(n), o.Ember.A(c.search(i)))
              : o.Ember.A(n);
          }
        },
      ),
      sortedFilteredCustomGames: o.Ember.computed.sort(
        'filteredCustomGames',
        'sortDefinition',
      ),
      customGameRenderList: o.Ember.computed(
        'filteredCustomGames',
        'sortedFilteredCustomGames',
        'searchString',
        function () {
          return this.get('searchString')
            ? this.get('filteredCustomGames')
            : this.get('sortedFilteredCustomGames');
        },
      ),
      clearHeaderFlags: function () {
        this.set('lobbyNameSorted', !1),
          this.set('ownerSummonerNameSorted', !1),
          this.set('mapNameSorted', !1);
      },
      setHeaderFlag: function (e) {
        const t = this.get('sortOrder');
        this.clearHeaderFlags(), this.set(`${e}Sorted`, t);
      },
      handleDidInsertElement: o.Ember.on('didInsertElement', function () {
        this.get('customGameListService').refreshGameList();
      }),
      actions: {
        sort: function (e) {
          this.get('sortBy') === e
            ? this.toggleProperty('isSortReversed')
            : this.set('isSortReversed', !1),
            this.set('sortBy', e),
            this.setHeaderFlag(e);
        },
        selectCustomGame: function (e) {
          this.get('_isSelectingCustomGame') ||
            (this.set('_isSelectingCustomGame', !0),
            this.set('selectedCustomGame', e),
            this.set('customGameListService.selectedCustomGame', e),
            this.set('_isSelectingCustomGame', !1));
        },
        joinSelectedCustomGame: function (e = { spectator: !1 }) {
          if (!this.get('_isSelectingCustomGame')) {
            const t = this.get('selectedCustomGame.id'),
              a = this.get('selectedCustomGame.partyId'),
              n = this.get('selectedCustomGame.hasPassword'),
              o = { spectator: e.spectator, hasPassword: n };
            t ? (o.id = t) : (o.partyId = a),
              this.get('customGameListService')
                .joinCustomGame(o)
                .then(() => {
                  this.isDestroying ||
                    this.isDestroyed ||
                    this.get('customGameListService').triggerShowParty();
                });
          }
        },
        refresh: function () {
          const e = this.get('refreshEnabled');
          e &&
            (this.playSound('/fe/lol-uikit/sfx-uikit-text-click-small.ogg'),
            this.set('refreshEnabled', !1),
            o.bluebird
              .all([
                this.get('customGameListService').refreshGameList(),
                o.bluebird.delay(500),
              ])
              .then(() => {
                this.isDestroying ||
                  this.isDestroyed ||
                  this.set('refreshEnabled', !0);
              }));
        },
      },
    });
  },
  function (e) {
    var t = Math.max,
      a = Math.min;
    (function (n) {
      'use strict';
      function o() {
        console.log.apply(console, arguments);
      }
      function i(e, t) {
        for (var a in ((this.list = e), (this.options = t = t || {}), c))
          c.hasOwnProperty(a) &&
            (this.options[a] =
              'boolean' == typeof c[a] ? (a in t ? t[a] : c[a]) : t[a] || c[a]);
      }
      function s(e, t, a) {
        var n, o, r, c, m, i;
        if (!t) a.push(e);
        else if (
          ((r = t.indexOf('.')),
          -1 === r ? (n = t) : ((n = t.slice(0, r)), (o = t.slice(r + 1))),
          (c = e[n]),
          null !== c && void 0 !== c)
        )
          if (!o && ('string' == typeof c || 'number' == typeof c)) a.push(c);
          else if (l(c)) for (m = 0, i = c.length; m < i; m++) s(c[m], o, a);
          else o && s(c, o, a);
        return a;
      }
      function l(e) {
        return '[object Array]' === Object.prototype.toString.call(e);
      }
      function r(e, t) {
        (t = t || {}),
          (this.options = t),
          (this.options.location = t.location || r.defaultOptions.location),
          (this.options.distance =
            'distance' in t ? t.distance : r.defaultOptions.distance),
          (this.options.threshold =
            'threshold' in t ? t.threshold : r.defaultOptions.threshold),
          (this.options.maxPatternLength =
            t.maxPatternLength || r.defaultOptions.maxPatternLength),
          (this.pattern = t.caseSensitive ? e : e.toLowerCase()),
          (this.patternLen = e.length),
          this.patternLen <= this.options.maxPatternLength &&
            ((this.matchmask = 1 << (this.patternLen - 1)),
            (this.patternAlphabet = this._calculatePatternAlphabet()));
      }
      var c = {
        id: null,
        caseSensitive: !1,
        include: [],
        shouldSort: !0,
        searchFn: r,
        sortFn: function (e, t) {
          return e.score - t.score;
        },
        getFn: s,
        keys: [],
        verbose: !1,
        tokenize: !1,
        matchAllTokens: !1,
        tokenSeparator: / +/g,
        minMatchCharLength: 1,
        findAllMatches: !1,
      };
      (i.VERSION = '2.7.3'),
        (i.prototype.set = function (e) {
          return (this.list = e), e;
        }),
        (i.prototype.search = function (e) {
          this.options.verbose && o('\nSearch term:', e, '\n'),
            (this.pattern = e),
            (this.results = []),
            (this.resultMap = {}),
            (this._keyMap = null),
            this._prepareSearchers(),
            this._startSearch(),
            this._computeScore(),
            this._sort();
          var t = this._format();
          return t;
        }),
        (i.prototype._prepareSearchers = function () {
          var e = this.options,
            t = this.pattern,
            a = e.searchFn,
            n = t.split(e.tokenSeparator),
            o = 0,
            i = n.length;
          if (this.options.tokenize)
            for (this.tokenSearchers = []; o < i; o++)
              this.tokenSearchers.push(new a(n[o], e));
          this.fullSeacher = new a(t, e);
        }),
        (i.prototype._startSearch = function () {
          var e = this.options,
            t = e.getFn,
            a = this.list,
            n = a.length,
            o = this.options.keys,
            s = o.length,
            l = null,
            r,
            c,
            m,
            i;
          if ('string' == typeof a[0])
            for (m = 0; m < n; m++) this._analyze('', a[m], m, m);
          else
            for (this._keyMap = {}, m = 0; m < n; m++)
              for (l = a[m], i = 0; i < s; i++) {
                if (((r = o[i]), 'string' != typeof r)) {
                  if (
                    ((c = 1 - r.weight || 1),
                    (this._keyMap[r.name] = { weight: c }),
                    0 >= r.weight || 1 < r.weight)
                  )
                    throw new Error('Key weight has to be > 0 and <= 1');
                  r = r.name;
                } else this._keyMap[r] = { weight: 1 };
                this._analyze(r, t(l, r, []), l, m);
              }
        }),
        (i.prototype._analyze = function (e, t, a, n) {
          var s = this.options,
            r = !1,
            c,
            m,
            d,
            p,
            u,
            g,
            b,
            h,
            f,
            y,
            _,
            v,
            S,
            x,
            i;
          if (void 0 !== t && null !== t) {
            m = [];
            var E = 0;
            if ('string' == typeof t) {
              if (
                ((c = t.split(s.tokenSeparator)),
                s.verbose && o('---------\nKey:', e),
                this.options.tokenize)
              ) {
                for (x = 0; x < this.tokenSearchers.length; x++) {
                  for (
                    h = this.tokenSearchers[x],
                      s.verbose && o('Pattern:', h.pattern),
                      f = [],
                      v = !1,
                      i = 0;
                    i < c.length;
                    i++
                  ) {
                    (y = c[i]), (_ = h.search(y));
                    var k = {};
                    _.isMatch
                      ? ((k[y] = _.score), (r = !0), (v = !0), m.push(_.score))
                      : ((k[y] = 1), !this.options.matchAllTokens && m.push(1)),
                      f.push(k);
                  }
                  v && E++, s.verbose && o('Token scores:', f);
                }
                for (p = m[0], g = m.length, x = 1; x < g; x++) p += m[x];
                (p /= g), s.verbose && o('Token score average:', p);
              }
              (b = this.fullSeacher.search(t)),
                s.verbose && o('Full text score:', b.score),
                (u = b.score),
                void 0 !== p && (u = (u + p) / 2),
                s.verbose && o('Score average:', u),
                (S =
                  !(this.options.tokenize && this.options.matchAllTokens) ||
                  E >= this.tokenSearchers.length),
                s.verbose && o('Check Matches', S),
                (r || b.isMatch) &&
                  S &&
                  ((d = this.resultMap[n]),
                  d
                    ? d.output.push({
                        key: e,
                        score: u,
                        matchedIndices: b.matchedIndices,
                      })
                    : ((this.resultMap[n] = {
                        item: a,
                        output: [
                          {
                            key: e,
                            score: u,
                            matchedIndices: b.matchedIndices,
                          },
                        ],
                      }),
                      this.results.push(this.resultMap[n])));
            } else if (l(t))
              for (x = 0; x < t.length; x++) this._analyze(e, t[x], a, n);
          }
        }),
        (i.prototype._computeScore = function () {
          var e = this._keyMap,
            t = this.results,
            n,
            i,
            s,
            l,
            r,
            c,
            m,
            d,
            p;
          for (
            this.options.verbose && o('\n\nComputing score:\n'), n = 0;
            n < t.length;
            n++
          ) {
            for (s = 0, l = t[n].output, r = l.length, d = 1, i = 0; i < r; i++)
              (c = l[i].score),
                (m = e ? e[l[i].key].weight : 1),
                (p = c * m),
                1 === m ? ((s += p), (l[i].nScore = p)) : (d = a(d, p));
            (t[n].score = 1 === d ? s / r : d), this.options.verbose && o(t[n]);
          }
        }),
        (i.prototype._sort = function () {
          var e = this.options;
          e.shouldSort &&
            (e.verbose && o('\n\nSorting....'), this.results.sort(e.sortFn));
        }),
        (i.prototype._format = function () {
          var e = this.options,
            t = e.getFn,
            a = [],
            n = this.results,
            s = e.include,
            l,
            i,
            r,
            c;
          for (
            e.verbose && o('\n\nOutput:\n\n', n),
              r = e.id
                ? function (a) {
                    n[a].item = t(n[a].item, e.id, [])[0];
                  }
                : function () {},
              c = function (e) {
                var t = n[e],
                  a,
                  o,
                  i,
                  l,
                  r;
                if (0 < s.length) {
                  if (((a = { item: t.item }), -1 !== s.indexOf('matches')))
                    for (i = t.output, a.matches = [], o = 0; o < i.length; o++)
                      (l = i[o]),
                        (r = { indices: l.matchedIndices }),
                        l.key && (r.key = l.key),
                        a.matches.push(r);
                  -1 !== s.indexOf('score') && (a.score = n[e].score);
                } else a = t.item;
                return a;
              },
              ((l = 0), (i = n.length));
            l < i;
            l++
          )
            r(l), a.push(c(l));
          return a;
        }),
        (r.defaultOptions = {
          location: 0,
          distance: 100,
          threshold: 0.6,
          maxPatternLength: 32,
        }),
        (r.prototype._calculatePatternAlphabet = function () {
          var e = {},
            t = 0;
          for (t = 0; t < this.patternLen; t++) e[this.pattern.charAt(t)] = 0;
          for (t = 0; t < this.patternLen; t++)
            e[this.pattern.charAt(t)] |= 1 << (this.pattern.length - t - 1);
          return e;
        }),
        (r.prototype._bitapScore = function (e, t) {
          var a = e / this.patternLen,
            n = Math.abs(this.options.location - t);
          return this.options.distance
            ? a + n / this.options.distance
            : n
            ? 1
            : a;
        }),
        (r.prototype.search = function (e) {
          var n = this.options,
            o,
            i,
            s,
            l,
            r,
            c,
            m,
            d,
            p,
            u,
            g,
            b,
            h,
            f,
            y,
            _,
            v,
            S,
            x,
            E,
            k,
            C,
            I;
          if (((e = n.caseSensitive ? e : e.toLowerCase()), this.pattern === e))
            return {
              isMatch: !0,
              score: 0,
              matchedIndices: [[0, e.length - 1]],
            };
          if (this.patternLen > n.maxPatternLength) {
            if (
              ((S = e.match(
                new RegExp(this.pattern.replace(n.tokenSeparator, '|')),
              )),
              (x = !!S),
              x)
            )
              for (k = [], o = 0, C = S.length; o < C; o++)
                (I = S[o]), k.push([e.indexOf(I), I.length - 1]);
            return { isMatch: x, score: x ? 0.5 : 1, matchedIndices: k };
          }
          for (
            l = n.findAllMatches,
              r = n.location,
              s = e.length,
              c = n.threshold,
              m = e.indexOf(this.pattern, r),
              E = [],
              o = 0;
            o < s;
            o++
          )
            E[o] = 0;
          for (
            -1 != m &&
              ((c = a(this._bitapScore(0, m), c)),
              (m = e.lastIndexOf(this.pattern, r + this.patternLen)),
              -1 != m && (c = a(this._bitapScore(0, m), c))),
              m = -1,
              _ = 1,
              v = [],
              u = this.patternLen + s,
              o = 0;
            o < this.patternLen;
            o++
          ) {
            for (d = 0, p = u; d < p; )
              this._bitapScore(o, r + p) <= c ? (d = p) : (u = p),
                (p = Math.floor((u - d) / 2 + d));
            for (
              u = p,
                g = t(1, r - p + 1),
                b = l ? s : a(r + p, s) + this.patternLen,
                h = Array(b + 2),
                h[b + 1] = (1 << o) - 1,
                i = b;
              i >= g;
              i--
            )
              if (
                ((y = this.patternAlphabet[e.charAt(i - 1)]),
                y && (E[i - 1] = 1),
                (h[i] = (1 | (h[i + 1] << 1)) & y),
                0 !== o && (h[i] |= 1 | ((f[i + 1] | f[i]) << 1) | f[i + 1]),
                h[i] & this.matchmask &&
                  ((_ = this._bitapScore(o, i - 1)), _ <= c))
              ) {
                if (((c = _), (m = i - 1), v.push(m), m <= r)) break;
                g = t(1, 2 * r - m);
              }
            if (this._bitapScore(o + 1, r) > c) break;
            f = h;
          }
          return (
            (k = this._getMatchedIndices(E)),
            { isMatch: 0 <= m, score: 0 === _ ? 0.001 : _, matchedIndices: k }
          );
        }),
        (r.prototype._getMatchedIndices = function (e) {
          for (var t = [], a = -1, n = -1, o = 0, i = e.length, s; o < i; o++)
            (s = e[o]),
              s && -1 == a
                ? (a = o)
                : !s &&
                  -1 != a &&
                  ((n = o - 1),
                  n - a + 1 >= this.options.minMatchCharLength &&
                    t.push([a, n]),
                  (a = -1));
          return (
            e[o - 1] &&
              o - 1 - a + 1 >= this.options.minMatchCharLength &&
              t.push([a, o - 1]),
            t
          );
        }),
        (e.exports = i);
    })(this);
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '+caFJOFT',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-list-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-list-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-list-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","custom-game-list-header"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-game-list-title"],["flush-element"],["append",["unknown",["tra","custom_game_list_title"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","custom-game-list-subheader"],["flush-element"],["text","\\n"],["block",["uikit-framed-icon"],null,[["onclick","class","borderWidth","disabled"],[["helper",["action"],[["get",[null]],"refresh"],null],"custom-game-list-button-refresh",2,["get",["refreshDisabled"]]]],1],["text","  "],["open-element","div",[]],["static-attr","class","custom-game-list-filters"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-flat-input",[]],["static-attr","class","custom-game-list-search"],["flush-element"],["text","\\n      "],["append",["helper",["input"],null,[["type","name","maxlength","placeholder","disabled","value","autocomplete","autocorrect","autocapitalize","spellcheck"],["search","search","48",["get",["tra","custom_game_list_search_placeholder"]],false,["get",["searchString"]],"off","off","off",false]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","custom-game-list-filters-checkbox"],["flush-element"],["text","\\n      "],["append",["helper",["input"],null,[["slot","id","type","checked"],["input","custom-game-filter-spectators","checkbox",["get",["shouldShowSpectators"]]]]],false],["text","\\n      "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","custom-game-filter-spectators"],["flush-element"],["append",["unknown",["tra","custom_game_list_spectators_allowed"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","custom-game-list-filters-checkbox"],["flush-element"],["text","\\n      "],["append",["helper",["input"],null,[["slot","id","type","checked"],["input","custom-game-filter-private","checkbox",["get",["shouldShowPrivateOnly"]]]]],false],["text","\\n      "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","custom-game-filter-private"],["flush-element"],["append",["unknown",["tra","custom_game_list_private_only"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","custom-game-list-body"],["flush-element"],["text","\\n  "],["open-element","table",[]],["static-attr","class","custom-game-list-table"],["flush-element"],["text","\\n    "],["open-element","thead",[]],["static-attr","class","custom-game-list-table-header"],["flush-element"],["text","\\n      "],["open-element","tr",[]],["static-attr","class","custom-game-list-table-header-row"],["flush-element"],["text","\\n        "],["open-element","th",[]],["static-attr","class","custom-game-list-table-header-private"],["flush-element"],["close-element"],["text","\\n"],["text","        "],["open-element","th",[]],["dynamic-attr","class",["concat",["custom-game-list-table-header-name ",["helper",["if"],[["get",["showLobbyNameSorted"]],["get",["sortOrderClass"]],""],null]]]],["modifier",["action"],[["get",[null]],"sort","lobbyName"]],["flush-element"],["append",["unknown",["tra","custom_game_list_header_lobby_name"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["dynamic-attr","class",["concat",["custom-game-list-table-header-owner ",["helper",["if"],[["get",["showOwnerSummonerNameSorted"]],["get",["sortOrderClass"]],""],null]]]],["modifier",["action"],[["get",[null]],"sort","ownerSummonerName"]],["flush-element"],["append",["unknown",["tra","custom_game_list_header_owner"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["dynamic-attr","class",["concat",["custom-game-list-table-header-map ",["helper",["if"],[["get",["showMapNameSorted"]],["get",["sortOrderClass"]],""],null]]]],["modifier",["action"],[["get",[null]],"sort","mapName"]],["flush-element"],["append",["unknown",["tra","custom_game_list_header_map"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["static-attr","class","custom-game-list-table-header-slots"],["flush-element"],["close-element"],["text","\\n        "],["open-element","th",[]],["static-attr","class","custom-game-list-table-header-spectators"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","lol-uikit-scrollable",[]],["static-attr","class","custom-game-list-table-scroll"],["static-attr","overflow-masks","enabled"],["flush-element"],["text","\\n      "],["open-element","tbody",[]],["static-attr","class","custom-game-list-table-body"],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameRenderList"]]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["append",["helper",["custom-game-row"],null,[["customGame","selectedCustomGame","joinSelectedCustomGame","selectCustomGame"],[["get",["customGame"]],["get",["selectedCustomGame"]],"joinSelectedCustomGame","selectCustomGame"]]],false],["text","\\n"]],"locals":["customGame"]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","custom-game-list-button-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(1),
      s = n(i),
      l = a(115),
      r = n(l);
    a(450),
      (e.exports = o.Ember.Component.extend(s.default, {
        layout: a(451),
        classNames: ['custom-game-tournament-code-container'],
        customGameListService: o.Ember.inject.service('custom-game-list'),
        tournamentCodeInput: null,
        tournamentCodeFlatInput: null,
        tournamentCodeInputListener: null,
        tournamentCodeReadyToSubmit: !0,
        tournamentCodeEnabled: o.Ember.computed.and(
          'customGameListService.tournamentShortCodesEnabled',
          'tournamentCodeReadyToSubmit',
        ),
        tournamentCodeDisabled: o.Ember.computed.not('tournamentCodeEnabled'),
        handleDidInsertElement: o.Ember.on('didInsertElement', function () {
          const e = this.element.querySelector(
            'lol-uikit-flat-input.custom-game-list-tournament-code',
          );
          this.set('tournamentCodeFlatInput', e);
          const t = e.querySelector('input');
          this.set('tournamentCodeInput', t);
          const a = () => {
            this.checkForValidValue();
          };
          t.addEventListener('keyup', a),
            this.set('tournamentCodeInputListener', a),
            this.element.removeChild(e);
        }),
        handleWillDestroyElement: o.Ember.on('willDestroyElement', function () {
          const e = this.get('tournamentCodeInput'),
            t = this.get('tournamentCodeInputListener');
          e && t && e.removeEventListener('keyup', t);
        }),
        tooltipText: o.Ember.computed(
          'tournamentCodeEnabled',
          'tra.custom_game_list_tournament_code_tooltip',
          'tra.custom_game_list_tournament_code_disabled_tooltip',
          function () {
            return this.get('tournamentCodeEnabled')
              ? this.get('tra.custom_game_list_tournament_code_tooltip')
              : this.get(
                  'tra.custom_game_list_tournament_code_disabled_tooltip',
                );
          },
        ),
        click: function () {
          if (
            (this.playSound('/fe/lol-uikit/sfx-uikit-text-click-small.ogg'),
            !this.get('tournamentCodeDisabled'))
          ) {
            const e = this.get('tournamentCodeFlatInput'),
              t = document.createElement('lol-uikit-content-block');
            t.setAttribute('type', 'dialog-small'),
              (t.innerHTML = `<h4>${this.get(
                'tra.custom_game_list_tournament_code_header',
              )}</h4>
       <hr class="heading-spacer">`),
              t.appendChild(e);
            const a = o.UIKit.getModalManager().add({
              type: 'DialogConfirm',
              data: {
                contents: t,
                acceptText: this.get(
                  'tra.custom_game_list_tournament_code_join',
                ),
                declineText: this.get(
                  'tra.custom_game_list_tournament_code_cancel',
                ),
                closeButton: !1,
              },
            });
            return (
              a.domNode.classList.add('custom-game-tournament-code-modal'),
              this.set('tournamentCodeModal', a),
              this.checkForValidValue(),
              a.acceptPromise.then(
                () => {
                  this.joinWithTournamentCode(),
                    this.set('tournamentCodeModal', !1);
                },
                () => {
                  this.resetInputValue(), this.set('tournamentCodeModal', !1);
                },
              )
            );
          }
        },
        inputValue: function () {
          const e = this.get('tournamentCodeInput');
          return !!(e && e.value) && e.value;
        },
        resetInputValue: function () {
          const e = this.get('tournamentCodeInput');
          e && (e.value = '');
        },
        checkForValidValue: function () {
          const e = this.get('tournamentCodeModal');
          if (e) {
            const t = this.inputValue();
            t ? e.enableAcceptButton() : e.disableAcceptButton();
          }
        },
        joinWithTournamentCode: function () {
          const e = this.inputValue();
          this.set('tournamentCodeReadyToSubmit', !1),
            this.get('customGameListService')
              .joinWithTournamentCode(e)
              .then(() => {
                this.isDestroying ||
                  this.isDestroyed ||
                  (this.set('tournamentCodeReadyToSubmit', !0),
                  this.get('customGameListService').triggerShowParty());
              })
              .catch((t) => {
                this.isDestroying ||
                  this.isDestroyed ||
                  (this.set('tournamentCodeReadyToSubmit', !0),
                  this.showTournamentCodeError(t));
              });
        },
        showTournamentCodeError: function (t) {
          this.resetInputValue();
          const e =
            438 === t.status
              ? this.get('tra.custom_game_list_error_438')
              : this.get('tra.custom_game_list_tournament_code_error_body');
          r.default.promptJoinErrorModal(e);
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '/zY9wnQe',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-tournament-code-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-tournament-code-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-tournament-code-component\\\\index.js\\" "],["text","\\n"],["open-element","button",[]],["static-attr","class","show-tournament-code-entry-modal"],["dynamic-attr","disabled",["unknown",["tournamentCodeDisabled"]],null],["flush-element"],["text","\xA0"],["close-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],0],["open-element","lol-uikit-flat-input",[]],["static-attr","class","custom-game-list-tournament-code"],["flush-element"],["text","\\n  "],["open-element","input",[]],["static-attr","class","custom-game-list-tournament-code-input"],["static-attr","type","text"],["static-attr","name","search"],["static-attr","maxlength","48"],["static-attr","autocomplete","off"],["static-attr","autocorrect","off"],["static-attr","autocapitalize","off"],["static-attr","spellcheck","false"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["text","\\n      "],["append",["unknown",["tooltipText"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    e.exports = n.Ember.Component.extend({
      customGame: null,
      layout: a(453),
      classNames: ['custom-game-list-table-body-row'],
      classNameBindings: ['isSelected:custom-list-row-selected'],
      tagName: 'tr',
      contextMenuManager: n.UIKit.getContextMenuManager(),
      isSelected: n.Ember.computed(
        'selectedCustomGame',
        'selectedCustomGame.id',
        'customGame.id',
        function () {
          return (
            this.get('selectedCustomGame.id') === this.get('customGame.id')
          );
        },
      ),
      slotString: n.Ember.computed(
        'customGame.filledPlayerSlots',
        'customGame.maxPlayerSlots',
        function () {
          return (
            this.get('customGame.filledPlayerSlots') +
            '/' +
            this.get('customGame.maxPlayerSlots')
          );
        },
      ),
      spectatorString: n.Ember.computed(
        'customGame.filledSpectatorSlots',
        'customGame.maxSpectatorSlots',
        function () {
          const e = this.get('customGame.maxSpectatorSlots');
          return e
            ? this.get('customGame.filledSpectatorSlots') + '/' + e
            : '-';
        },
      ),
      isJoinable: n.Ember.computed(
        'customGame.filledPlayerSlots',
        'customGame.maxPlayerSlots',
        function () {
          return (
            this.get('customGame.filledPlayerSlots') <
            this.get('customGame.maxPlayerSlots')
          );
        },
      ),
      isSpectateable: n.Ember.computed(
        'customGame.filledSpectatorSlots',
        'customGame.maxSpectatorSlots',
        function () {
          return (
            this.get('customGame.filledSpectatorSlots') <
            this.get('customGame.maxSpectatorSlots')
          );
        },
      ),
      click: function () {
        this.sendAction('selectCustomGame', this.get('customGame'));
      },
      doubleClick: function () {
        this.sendAction('selectCustomGame', this.get('customGame')),
          this.joinGame();
      },
      spectateGame: function () {
        this.sendAction('joinSelectedCustomGame', { spectator: !0 });
      },
      joinGame: function () {
        this.sendAction('joinSelectedCustomGame');
      },
      contextMenu: function (e) {
        this.sendAction('selectCustomGame', this.get('customGame')),
          this.contextMenuManager.setMenuItems([
            {
              label: this.get('tra.custom_game_join'),
              action: 'joinGame',
              class: 'custom-game-join-game',
              target: this,
              disabled: !this.get('isJoinable'),
            },
            {
              label: this.get('tra.custom_game_spectate'),
              action: 'spectateGame',
              class: 'custom-game-spectate-game',
              target: this,
              disabled: !this.get('isSpectateable'),
            },
          ]),
          this.contextMenuManager.openAtEvent(e);
      },
    });
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'QOEwKm1T',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-row-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-row-component\\\\index.js\\" "],["text","\\n"],["open-element","td",[]],["dynamic-attr","class",["concat",["custom-game-list-table-body-private ",["helper",["if"],[["get",["customGame","hasPassword"]],"","custom-lock-hidden"],null]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-name"],["flush-element"],["append",["unknown",["customGame","lobbyName"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-owner"],["flush-element"],["append",["unknown",["customGame","ownerSummonerName"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-map"],["flush-element"],["append",["unknown",["customGame","mapName"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-slots"],["flush-element"],["append",["unknown",["slotString"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-spectators"],["flush-element"],["append",["unknown",["spectatorString"]],false],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(116),
      s = n(i),
      l = a(40),
      r = a(7),
      c = a(6),
      m = n(c);
    a(455),
      (e.exports = s.default.extend({
        classNames: ['tft-lobby'],
        classNameBindings: ['isPair: tft-lobby-pair'],
        layout: a(456),
        platformConfigSingleton: m.default,
        lobbiesService: o.Ember.inject.service('lobbies'),
        pendingInviteCount: o.Ember.computed.alias(
          'lobbiesService.pendingInvites.length',
        ),
        patchNotesUrl: o.Ember.computed.alias(
          'platformConfigSingleton.TftPatchNotesUrl',
        ),
        hasNoPatchNotes: o.Ember.computed.empty('patchNotesUrl'),
        isPair: o.Ember.computed('lobbiesService.queueId', function () {
          return r.PAIRS_QUEUE_IDS.includes(this.get('lobbiesService.queueId'));
        }),
        nonSelfCards: o.Ember.computed(
          'otherPartyMembers.[]',
          'playerPlaceholders.[]',
          'pendingInviteCount',
          'isPair',
          function () {
            function e(e) {
              3 < i
                ? n.get('bottom').push(e)
                : 0 == i % 2
                ? n.get('left').push(e)
                : n.get('right').push(e),
                i++;
            }
            const t = this.get('otherPartyMembers'),
              a = this.get('playerPlaceholders'),
              n = o.Ember.Object.create({
                left: o.Ember.A(),
                right: o.Ember.A(),
                bottom: o.Ember.A(),
              });
            let i = this.get('isPair') ? 1 : 0;
            if (t && 0 < t.length) for (let a = 0; a < t.length; a++) e(t[a]);
            let s = this.get('pendingInviteCount');
            if ((o.lodash.isNumber(s) || (s = 0), a && 0 < a.length))
              for (let t = 0; t < a.length; t++)
                0 < s
                  ? (e(o.Ember.Object.create({ isInvited: !0 })), s--)
                  : e(a[t]);
            return n;
          },
        ),
        partySizeExceedsNormalLimit: o.Ember.computed.gt(
          'lobbiesService.currentPartyMembers.length',
          l.NORMAL_MAX_PARTY_SIZE,
        ),
        partySizeExceedsError: o.Ember.computed('tra.ready', function () {
          const e = this.get('tra.formatString');
          return e('parties_cannot_change_mode_when_exceed_limit', {
            max: l.NORMAL_MAX_PARTY_SIZE,
          });
        }),
        backButtonDisabled: o.Ember.computed.or(
          'partySizeExceedsNormalLimit',
          'buttonsDisabled',
        ),
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'YAtisOro',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-lobby-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-lobby-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-lobby-component\\\\index.js\\" "],["text","\\n"],["block",["lower-section"],null,[["currentPlayer"],[["get",["currentPlayer"]]]],11],["text","\\n"],["open-element","div",[]],["static-attr","class","header-text-gradient"],["flush-element"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","parties-header-button-container"],["flush-element"],["text","\\n\\n"],["block",["unless"],[["get",["hasNoPatchNotes"]]],null,3],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["back-button-container ",["unknown",["backButtonContainerClass"]]]]],["flush-element"],["text","\\n    "],["open-element","lol-uikit-flat-button",[]],["static-attr","class","parties-back-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"backButtonClick"],null],null],["dynamic-attr","disabled",["unknown",["backButtonDisabled"]],null],["flush-element"],["text","\\n      "],["append",["unknown",["tra","parties_button_change_mode"]],false],["text","\\n\\n"],["block",["if"],[["get",["partySizeExceedsNormalLimit"]]],null,2],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","eligibility-loading-spinner"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["lobbiesService","isOpenPartyEnabled"]]],null,0],["close-element"],["text","\\n\\n\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["invitationsObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["open-party-toggle"],null,[["showingState"],[["get",["showingState"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n            "],["open-element","p",[]],["flush-element"],["text","\\n              "],["append",["unknown",["partySizeExceedsError"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],1]],"locals":[]},{"statements":[["text","    "],["open-element","a",[]],["dynamic-attr","href",["concat",[["unknown",["patchNotesUrl"]]]]],["static-attr","target","_new"],["static-attr","class","patch-notes-button"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","tft_patch_notes"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["tft-player-card"],null,[["isPlaceholder","isInvited","partyInvitesAllowed","member","isInQueue","selected","showInviteModal","isFullCard"],[["get",["member","isPlaceholder"]],["get",["member","isInvited"]],["get",["partyInvitesAllowed"]],["get",["member"]],["get",["isInQueue"]],["get",["selected"]],"showInviteModal",["get",["isPair"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","tft-cards-second-row"],["flush-element"],["text","\\n"],["block",["each"],[["get",["nonSelfCards","bottom"]]],null,4],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["tft-player-card"],null,[["isPlaceholder","isInvited","partyInvitesAllowed","member","isInQueue","selected","showInviteModal","isFullCard"],[["get",["member","isPlaceholder"]],["get",["member","isInvited"]],["get",["partyInvitesAllowed"]],["get",["member"]],["get",["isInQueue"]],["get",["selected"]],"showInviteModal",["get",["isPair"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","            "],["append",["helper",["tft-player-card"],null,[["member","isMe","isInQueue","selected","isFullCard"],[["get",["currentPlayer"]],true,["get",["isInQueue"]],["get",["selected"]],["get",["isPair"]]]]],false],["text","\\n            "],["open-element","lol-parties-series-button",[]],["static-attr","class","tft-missions-button"],["static-attr","type","simple"],["static-attr","series","TFTBattlepass_Weeklies_Series"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["append",["helper",["tft-player-card"],null,[["isInvited","isPlaceholder","partyInvitesAllowed","member","isInQueue","selected","showInviteModal","isFullCard"],[["get",["member","isInvited"]],["get",["member","isPlaceholder"]],["get",["partyInvitesAllowed"]],["get",["member"]],["get",["isInQueue"]],["get",["selected"]],"showInviteModal",["get",["isPair"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","tft-cards-first-row-left"],["flush-element"],["text","\\n"],["block",["each"],[["get",["nonSelfCards","left"]]],null,8],["text","          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","tft-cards-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","tft-cards-first-row"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isPair"]]],null,9],["text","        "],["open-element","div",[]],["static-attr","class","tft-cards-first-row-middle"],["flush-element"],["text","\\n"],["block",["if"],[["get",["currentPlayer"]]],null,7],["text","        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","tft-cards-first-row-right"],["flush-element"],["text","\\n"],["block",["each"],[["get",["nonSelfCards","right"]]],null,6],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"],["block",["unless"],[["get",["isPair"]]],null,5],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","\\n  "],["open-element","div",[]],["static-attr","class","upper-right-container"],["flush-element"],["text","\\n    "],["append",["unknown",["disband-countdown"]],false],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["inParty"]]],null,10],["text","\\n  "],["append",["helper",["parties-footer-notifications"],null,[["positionError","positionWarning","readyWarning","readyWarningTooltip","autoFillEligible","autoFillProtectedForStreaking","autoFillProtectedForPromos","autoFillProtectedForSoloing","premadeSizeAllowed","allowablePremadeSizes","currentPartySize","isCurrentPlayerPartyLeader","shouldShowBetaWatermark"],[["get",["positionError"]],["get",["positionWarning"]],["get",["readyWarning"]],["get",["readyWarningTooltip"]],["get",["autoFillEligible"]],["get",["autoFillProtectedForStreaking"]],["get",["autoFillProtectedForPromos"]],["get",["autoFillProtectedForSoloing"]],["get",["premadeSizeAllowed"]],["get",["allowablePremadeSizes"]],["get",["currentPartySize"]],["get",["isCurrentPlayerPartyLeader"]],false]]],false],["text","\\n\\n  "],["append",["helper",["parties-footer"],null,[["showingState","selected","readyWarning"],[["get",["showingState"]],["get",["selected"]],["get",["readyWarning"]]]]],false],["text","\\n\\n  "],["append",["helper",["invite-info-panel"],null,[["showingState","currentPlayerCanInvite","isTFT"],[["get",["showingState"]],["get",["currentPlayerCanInvite"]],true]]],false],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","parties-chat-room"],["flush-element"],["text","\\n    "],["open-element","lol-social-chat-room",[]],["static-attr","type","lobby"],["static-attr","disabled-when-connecting",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      s = a(458),
      i = a(118),
      l = n(i);
    a(476);
    var r = a(13),
      c = n(r);
    const m = { companion: 'companion', summonerIcon: 'summonerIcon' },
      d = (0, o.emberDataBinding)({
        Ember: o.Ember,
        websocket: (0, o.getProvider)().getSocket(),
        logPrefix: 'party:tft-player-card',
        basePaths: {
          regalia: '/lol-regalia',
          gameData: '/lol-game-data',
          ranked: '/lol-ranked',
          cosmetics: '/lol-cosmetics',
        },
        boundProperties: {
          regaliaHash: {
            api: 'regalia',
            path: '/v2/summoners/{{summonerId}}/regalia/async',
          },
          _rankedData: { api: 'ranked', path: '/v1/ranked-stats/{{puuid}}' },
          _profileIcons: {
            api: 'gameData',
            path: '/assets/v1/summoner-icons.json',
          },
          _companions: {
            api: 'cosmetics',
            path: '/v1/inventories/tft/companions',
          },
        },
      });
    e.exports = o.Ember.Component.extend(d, l.default, {
      layout: a(477),
      classNames: ['tft-player-card'],
      classNameBindings: [
        'isMe:tft-player-card-self',
        'isPlaceholder:tft-player-placeholder',
        'isInvited:tft-player-invited',
        'isNotReady:tft-player-not-ready',
        'isFullCard:tft-player-card-full',
      ],
      member: null,
      isMe: !1,
      isInQueue: !1,
      isInvited: !1,
      isPlaceholder: !1,
      lobbiesService: o.Ember.inject.service('lobbies'),
      matchmakingService: o.Ember.inject.service('matchmaking'),
      tftCosmeticsService: o.Ember.inject.service('tft-cosmetics'),
      summonerId: o.Ember.computed.alias('member.summonerId'),
      puuid: o.Ember.computed.alias('member.puuid'),
      summonerLevel: o.Ember.computed.alias('member.summonerLevel'),
      queueType: o.Ember.computed.alias('selected.queue.type'),
      settingsService: o.Ember.inject.service('party-settings'),
      myIconOverride: o.Ember.computed.alias('settingsService.iconOverride'),
      rankedQueue: o.Ember.computed(
        '_rankedData.queues.@each.queueType',
        function () {
          const e = this.get('_rankedData.queues');
          if (e)
            for (let t = 0; t < e.length; t++)
              if (e[t].queueType === s.QUEUES.RANKED_TFT_QUEUE_TYPE)
                return e[t];
          return null;
        },
      ),
      ratedQueue: o.Ember.computed(
        '_rankedData.queues.@each.queueType',
        'queueType',
        function () {
          const e = this.get('_rankedData.queues'),
            t = this.get('queueType');
          if (!s.QUEUES.RATED_TFT_QUEUE_TYPES.includes(t)) return null;
          if (e && t)
            for (let a = 0; a < e.length; a++)
              if (e[a].queueType === t) return e[a];
          return null;
        },
      ),
      isReady: o.Ember.computed.equal('member.ready', !0),
      isSearching: o.Ember.computed.alias('matchmakingService.isSearching'),
      isReadyOrSearching: o.Ember.computed.or('isReady', 'isSearching'),
      isNotReady: o.Ember.computed.not('isReady'),
      rankedTier: o.Ember.computed.alias('rankedQueue.tier'),
      isRanked: o.Ember.computed('rankedTier', function () {
        const e = this.get('rankedTier');
        return e && e !== o.LeagueTierNames.getConstants().TIER_NAME_NONE;
      }),
      isRated: o.Ember.computed('ratedQueue', function () {
        const e = this.get('ratedQueue');
        return e && 'NONE' !== e.ratedTier;
      }),
      showRanked: o.Ember.computed.and('isRanked', 'isReadyOrSearching'),
      showRankedOrRated: o.Ember.computed.or('isRanked', 'isRated'),
      rankedDivision: o.Ember.computed.alias('rankedQueue.division'),
      rankedLeaguePoints: o.Ember.computed.alias('rankedQueue.leaguePoints'),
      rankedTierAndDivisionText: o.Ember.computed(
        'rankedTier',
        'rankedDivision',
        function () {
          const e = this.get('rankedTier'),
            t = this.get('rankedDivision');
          return 'NONE' === e
            ? ''
            : o.LeagueTierNames.getFullTierDivisionName(e, t);
        },
      ),
      rankedIcon: o.Ember.computed('rankedTier', function () {
        const e = this.get('rankedTier');
        return o.LeagueTierNames.getRankedMiniRegalia(e);
      }),
      rankedLeaguePointsText: o.Ember.computed(
        'rankedLeaguePoints',
        'rankedTier',
        function () {
          const e = this.get('rankedTier');
          if ('NONE' === e) return '';
          const t = this.get('rankedLeaguePoints'),
            a = this.get('tra.formatString');
          return a('ranked_lp', { num_points: t });
        },
      ),
      showRated: o.Ember.computed.and('isRated', 'isReadyOrSearching'),
      ratedRating: o.Ember.computed.alias('ratedQueue.ratedRating'),
      ratedTier: o.Ember.computed.alias('ratedQueue.ratedTier'),
      ratiedTierIcon: o.Ember.computed('ratedTier', 'queueType', function () {
        const e = this.get('ratedTier'),
          t = this.get('queueType');
        return o.LeagueTierNames.getTFTRatedMiniBadge(e, t);
      }),
      iconOverride: o.Ember.computed(
        'chatIconOverride',
        'myIconOverride',
        function () {
          return this.get('isMe')
            ? this.get('myIconOverride')
            : this.get('chatIconOverride');
        },
      ),
      hasSummonerIcon: o.Ember.computed('profileIconId', function () {
        return this.get('profileIconId') !== s.SOCIAL.DEFAULT_SUMMONER_ICON_ID;
      }),
      showIconToggle: o.Ember.computed.and('hasSummonerIcon', 'isMe'),
      allIconUrls: o.Ember.computed.alias(
        'tftCosmeticsService.companionIconUrls',
      ),
      hasCompanion: o.Ember.computed(
        'companionIconId, _companions.defaultItemId',
        function () {
          const e = this.get('_companions.defaultItemId'),
            t = this.get('companionIconId');
          return t && t !== e;
        },
      ),
      shouldShowSummonerIcon: o.Ember.computed(
        'hasCompanion',
        'hasSummonerIcon',
        'iconOverride',
        function () {
          const e = this.get('iconOverride');
          return (
            !!(e !== m.companion && this.get('hasSummonerIcon')) &&
            (e === m.summonerIcon || !this.get('hasCompanion'))
          );
        },
      ),
      shouldShowSummonerLevel: o.Ember.computed(
        'shouldShowSummonerIcon',
        'isMe',
        'isFullCard',
        function () {
          return (
            this.get('shouldShowSummonerIcon') &&
            (this.get('isMe') || this.get('isFullCard'))
          );
        },
      ),
      displayedIcon: o.Ember.computed(
        'shouldShowSummonerIcon',
        'allIconUrls',
        'profileIconUrl',
        'companionIconId',
        function () {
          const e = this.get('profileIconUrl'),
            t = this.get('allIconUrls')[this.get('companionIconId')];
          return this.get('shouldShowSummonerIcon') ? e : t;
        },
      ),
      showCosmetics: o.Ember.computed.or('isMe', 'isFullCard'),
      isLeader: o.Ember.computed(
        'member.isLeader',
        'lobbiesService.otherCurrentPartyMembers.@each.isLeader',
        function () {
          const e = this.get('member');
          return !!e && e.isLeader;
        },
      ),
      setIconOverride: function (e) {
        this.set('myIconOverride', e);
      },
      actions: {
        showInviteModal: function () {
          this.get('partyInvitesAllowed') && this.sendAction('showInviteModal');
        },
        handleMouseOver: function () {
          this.get('hasSummonerIcon') &&
            this.get('isMe') &&
            o.Audio.getChannel(c.default.SFX_CHANNEL).playSound(
              c.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER,
            );
        },
        iconClick: function () {
          if (this.get('hasSummonerIcon') && this.get('isMe')) {
            const e = this.get('iconOverride');
            switch (
              (o.Audio.getChannel(c.default.SFX_CHANNEL).playSound(
                c.default.SFX_URLS.SFX_COMPANION_PICKER_CLICK,
              ),
              e)
            ) {
              case m.companion: {
                this.setIconOverride(m.summonerIcon);
                break;
              }
              case m.summonerIcon: {
                this.setIconOverride(m.companion);
                break;
              }
              default: {
                this.setIconOverride(
                  this.get('hasCompanion') ? m.summonerIcon : m.companion,
                );
                break;
              }
            }
          }
        },
      },
    });
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(459),
      o = a(470),
      i = a(471),
      s = a(472),
      l = a(473),
      r = a(474),
      c = a(475);
    a.d(t, 'PAW', function () {
      return n.a;
    }),
      a.d(t, 'QUEUES', function () {
        return o.a;
      }),
      a.d(t, 'REWARD_TRACKER', function () {
        return i.a;
      }),
      a.d(t, 'SOCIAL', function () {
        return s.a;
      }),
      a.d(t, 'SETTINGS', function () {
        return l.a;
      }),
      a.d(t, 'PROFILE_PRIVACY', function () {
        return r.a;
      }),
      a.d(t, 'TIME', function () {
        return c.a;
      });
  },
  function (e, t, a) {
    'use strict';
    var n = a(460),
      o = a(461),
      i = a(462),
      s = a(463),
      l = a(464),
      r = a(465),
      c = a(466),
      m = a(467),
      d = a(468),
      p = a(469);
    const u = {
      COMPONENT_TYPES: n.a,
      CURRENCY_TYPES: o.a,
      INVENTORY_TYPES: i.a,
      MEDIA_TYPES: s.a,
      MEDIA_LOAD_TYPES: l.a,
      MODAL_TYPES: r.a,
      OFFER_PURCHASE_STATES: c.a,
      OFFER_VALIDATION_STATES: m.a,
      SCROLL_LIST_DISPLAY_TYPES: d.a,
      TEMPLATE_TYPES: p.a,
    };
    t.a = u;
  },
  function (e, t) {
    'use strict';
    t.a = {
      TEXT: 'TEXT',
      TITLE_SUBTITLE: 'TITLE_SUBTITLE',
      PURCHASE: 'PURCHASE',
      MEDIA: 'MEDIA',
      IMAGE_CAROUSEL: 'IMAGE_CAROUSEL',
      SCROLL_LIST: 'SCROLL_LIST',
      VERTICAL_LIST: 'VERTICAL_LIST',
    };
  },
  function (e, t) {
    'use strict';
    t.a = { RP: 'RP', IP: 'IP', BE: 'lol_blue_essence', CUSTOM: 'CUSTOM' };
  },
  function (e, t) {
    'use strict';
    t.a = {
      CHAMPION: 'CHAMPION',
      CHAMPION_SKIN: 'CHAMPION_SKIN',
      WARD_SKIN: 'WARD_SKIN',
      BATTLE_BOOST: 'BATTLE_BOOST',
      GIFT: 'GIFT',
      MYSTERY: 'MYSTERY',
      BUNDLES: 'BUNDLES',
      SUMMONER_ICON: 'SUMMONER_ICON',
      STATSTONE: 'STATSTONE',
    };
  },
  function (e, t) {
    'use strict';
    t.a = { SVG: 'SVG', IMAGE: 'IMAGE', VIDEO: 'VIDEO' };
  },
  function (e, t) {
    'use strict';
    t.a = {
      LOCAL_ASSET: 'LOCAL_ASSET',
      EXTERNAL_URL: 'EXTERNAL_URL',
      GAME_DATA: 'GAME_DATA',
    };
  },
  function (e, t) {
    'use strict';
    t.a = {
      CHAMPION_MODAL: 'CHAMPION_MODAL',
      SKIN_VIEWER_MODAL: 'SKIN_VIEWER_MODAL',
      MULTIPLE_PURCHASE_MODAL: 'MULTIPLE_PURCHASE_MODAL',
      CHROMA_MODAL: 'CHROMA_MODAL',
      CHROMA_BUNDLE_MODAL: 'CHROMA_BUNDLE_MODAL',
      SUMMONER_ICON_MODAL: 'SUMMONER_ICON_MODAL',
      WARD_SKIN_MODAL: 'WARD_SKIN_MODAL',
      SKIN_WITH_DEPENDENCY_MODAL: 'SKIN_WITH_DEPENDENCY_MODAL',
      PAW_GENERIC_MODAL: 'PAW_GENERIC_MODAL',
    };
  },
  function (e, t) {
    'use strict';
    t.a = {
      NOT_STARTED: 'NOT_STARTED',
      IN_PROGRESS: 'IN_PROGRESS',
      SUCCESS: 'SUCCESS',
      FAIL: 'FAIL',
    };
  },
  function (e, t) {
    'use strict';
    t.a = {
      NOT_STARTED: 'NOT_STARTED',
      IN_PROGRESS: 'IN_PROGRESS',
      COMPLETED: 'COMPLETED',
    };
  },
  function (e, t) {
    'use strict';
    t.a = { EXPANDED: 'EXPANDED', COMPACT: 'COMPACT', DETAILED: 'DETAILED' };
  },
  function (e, t) {
    'use strict';
    t.a = { LARGE_TWO_COLUMN_LANDSCAPE: 'LARGE_TWO_COLUMN_LANDSCAPE' };
  },
  function (e, t) {
    'use strict';
    const a = 'RANKED_SOLO_5x5',
      n = 'RANKED_FLEX_SR',
      o = 'RANKED_FLEX_TT',
      i = 'RANKED_TFT',
      s = 'RANKED_TFT_TURBO',
      l = 'RANKED_TFT_PAIRS',
      r = [a, n],
      c = [...r, o],
      m = [i],
      d = [s, l],
      p = [...m, ...d],
      u = [...c, ...m],
      g = [...d],
      b = [...c, ...p];
    t.a = {
      RANKED_SOLO_5x5_QUEUE_TYPE: a,
      RANKED_FLEX_SR_QUEUE_TYPE: n,
      RANKED_FLEX_TT_QUEUE_TYPE: o,
      RANKED_TFT_QUEUE_TYPE: i,
      RANKED_TFT_TURBO_QUEUE_TYPE: s,
      RANKED_TFT_PAIRS_QUEUE_TYPE: l,
      RANKED_LOL_QUEUE_TYPES: c,
      RANKED_SR_QUEUE_TYPES: r,
      RANKED_TFT_QUEUE_TYPES: m,
      RATED_TFT_QUEUE_TYPES: d,
      RANKED_AND_RATED_TFT_QUEUE_TYPES: p,
      ALL_RANKED_QUEUE_TYPES: u,
      ALL_RATED_QUEUE_TYPES: g,
      ALL_RANKED_AND_RATED_QUEUE_TYPES: b,
    };
  },
  function (e, t) {
    'use strict';
    t.a = {
      REWARD_TAGS: {
        INSTANT: 'Instant',
        FREE: 'Free',
        RARE: 'Rare',
        CHOICE: 'Choice',
        MULTIPLE: 'Multiple',
      },
      MILESTONE_STAGES: {
        COMPLETED: 'completed',
        CURRENT: 'current',
        FUTURE: 'future',
        HOVERING_COMPLETED: 'future-completed',
      },
      REWARD_STATE: {
        LOCKED: 'Locked',
        UNLOCKED: 'Unlocked',
        UNSELECTED: 'Unselected',
        SELECTED: 'Selected',
      },
      TRACKER_SIZE: {
        SMALL: 'tracker-size-small',
        MEDIUM: 'tracker-size-medium',
      },
    };
  },
  function (e, t) {
    'use strict';
    t.a = {
      WINDOW_NAME_NEW_CHAT: 'new-chat-window',
      DEFAULT_SUMMONER_ICON_ID: 29,
    };
  },
  function (e, t) {
    'use strict';
    t.a = { AUTO: 'auto', ALWAYS: 'always', NEVER: 'never' };
  },
  function (e, t) {
    'use strict';
    const a = { UNKNOWN: 'UNKNOWN', ENABLED: 'ENABLED', DISABLED: 'DISABLED' },
      n = { PRIVATE: 'PRIVATE', PUBLIC: 'PUBLIC' },
      o = { enabledState: a.UNKNOWN, setting: n.PUBLIC };
    t.a = {
      ProfilePrivacyEnabledState: a,
      ProfilePrivacySetting: n,
      DEFAULT_PROFILE_PRIVACY: o,
    };
  },
  function (e, t) {
    'use strict';
    const a = 1e3,
      n = 60 * a,
      o = 60 * n,
      i = 24 * o,
      s = 7 * i;
    t.a = {
      TIME_UNITS: {
        MILLISECONDS: 'milliseconds',
        SECONDS: 'seconds',
        MINUTES: 'minutes',
        HOURS: 'hours',
        DAYS: 'days',
        WEEKS: 'weeks',
        MONTHS: 'months',
        YEARS: 'years',
      },
      TIME_CONVERSIONS: {
        MILLISECONDS_IN_A_SECOND: a,
        MILLISECONDS_IN_A_MINUTE: n,
        MILLISECONDS_IN_A_HOUR: o,
        MILLISECONDS_IN_A_DAY: i,
        MILLISECONDS_IN_A_WEEK: s,
        MILLISECONDS_IN_A_YEAR: 52 * s,
      },
    };
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'kg5+QFju',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","inner-border-1"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","inner-border-2"],["flush-element"],["text","\\n    \\n"],["block",["if"],[["get",["isInvited"]]],null,13,12],["text","  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["tft-player-card-cosmetics"],null,[["isMe","companionIconId","mapSkinIconId","damageSkinIconId","isFullCard"],[["get",["isMe"]],["get",["companionIconId"]],["get",["mapSkinIconId"]],["get",["damageSkinIconId"]],["get",["isFullCard"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","rank-wrapper"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rated-tier-icon"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["ratiedTierIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rated-rating"],["flush-element"],["append",["unknown",["ratedRating"]],false],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","span",[]],["static-attr","class","rank-rated-divider"],["flush-element"],["text","/\xA0"],["close-element"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","rank-wrapper"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rank-icon"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["rankedIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rank-name"],["flush-element"],["append",["unknown",["rankedTierAndDivisionText"]],false],["text"," "],["append",["unknown",["rankedLeaguePointsText"]],false],["text"," "],["block",["if"],[["get",["showRated"]]],null,2],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","level-label"],["flush-element"],["append",["unknown",["summonerLevel"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","tft_icon_tooltip"]],false],["close-element"],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition"],["bottom"]],5]],"locals":[]},{"statements":[["block",["if"],[["get",["isMe"]]],null,6]],"locals":[]},{"statements":[["text","      "],["append",["helper",["player-party-controls"],null,[["member","isLeader","isMe"],[["get",["member"]],["get",["isLeader"]],["get",["isMe"]]]]],false],["text","\\n\\n      "],["open-element","div",[]],["static-attr","class","icon-wrapper"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"iconClick"],null],null],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","icon-image"],["dynamic-attr","style",["concat",["background-image:url(",["unknown",["displayedIcon"]],");"]]],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","onmouseover",["helper",["action"],[["get",[null]],"handleMouseOver"],null],null],["dynamic-attr","class",["concat",["icon-frame ",["helper",["if"],[["get",["showIconToggle"]],"has-toggle",""],null]," ",["helper",["if"],[["get",["shouldShowSummonerIcon"]],"","no-level"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasSummonerIcon"]]],null,7],["text","        "],["close-element"],["text","\\n                \\n"],["block",["if"],[["get",["shouldShowSummonerLevel"]]],null,4],["text","      "],["close-element"],["text","\\n\\n      "],["open-element","div",[]],["static-attr","class","current-rank"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showRanked"]]],null,3],["block",["if"],[["get",["showRated"]]],null,1],["text","      "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showCosmetics"]]],null,0],["text","    "]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","invite_tooltip"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","placeholder-invite-button"],["flush-element"],["text","\\n"],["block",["player-management-button"],null,[["type","action"],["invite","showInviteModal"]],9],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["partyInvitesAllowed"]]],null,10]],"locals":[]},{"statements":[["block",["if"],[["get",["isPlaceholder"]]],null,11,8]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","invited-spinner"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(479),
      (e.exports = n.Ember.Component.extend({
        layout: a(480),
        classNames: ['cosmetics-section'],
        classNameBindings: [
          'isMe:cosmetics-section-self',
          'isFullCard:cosmetics-section-full',
        ],
        tftCosmeticsService: n.Ember.inject.service('tft-cosmetics'),
        companionIcon: n.Ember.computed(
          'tftCosmeticsService.companionIconUrls',
          'companionIconId',
          function () {
            return this.get('tftCosmeticsService.companionIconUrls')[
              this.get('companionIconId') || 1
            ];
          },
        ),
        mapSkinIcon: n.Ember.computed(
          'tftCosmeticsService.mapSkinIconUrls',
          'mapSkinIconId',
          function () {
            return this.get('tftCosmeticsService.mapSkinIconUrls')[
              this.get('mapSkinIconId') || 1
            ];
          },
        ),
        damageSkinIcon: n.Ember.computed(
          'tftCosmeticsService.damageSkinIconUrls',
          'damageSkinIconId',
          function () {
            return this.get('tftCosmeticsService.damageSkinIconUrls')[
              this.get('damageSkinIconId') || 1
            ];
          },
        ),
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'pjpZVWYQ',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-cosmetics-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-cosmetics-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-cosmetics-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","cosmetics-wrapper"],["flush-element"],["text","\\n    "],["open-element","div",[]],["flush-element"],["append",["unknown",["tra","tft_companions_label"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isMe"]]],null,5,4],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","cosmetics-wrapper"],["flush-element"],["text","\\n    "],["open-element","div",[]],["flush-element"],["append",["unknown",["tra","tft_map_skins_label"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isMe"]]],null,3,2],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","cosmetics-wrapper"],["flush-element"],["text","\\n    "],["open-element","div",[]],["flush-element"],["append",["unknown",["tra","tft_damage_skins_label"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isMe"]]],null,1,0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","loadouts-icon-container"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["damageSkinIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-parties-cosmetics-picker",[]],["static-attr","type","tft_damage_skins"],["static-attr","set-name","tft"],["static-attr","orientation","right"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","loadouts-icon-container"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["mapSkinIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-parties-cosmetics-picker",[]],["static-attr","type","tft_map_skins"],["static-attr","set-name","tft"],["static-attr","orientation","left"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","loadouts-icon-container"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["companionIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-parties-cosmetics-picker",[]],["static-attr","type","companions"],["static-attr","set-name","tft"],["static-attr","orientation","left"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(79),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o),
      s = a(7),
      l = a(119);
    a(482);
    const r = n.EmberAddons.EmberLifeline.RunMixin;
    e.exports = n.Ember.Component.extend(r, i.default, {
      classNames: ['social-leaderboard-button'],
      layout: a(483),
      isPipShown: !1,
      socialLeaderboardService: n.Ember.inject.service('socialLeaderboard'),
      numFriends: n.Ember.computed('friendsList', function () {
        const e = this.get('friendsList');
        return (0, l.friendsWithSummonerNamesCount)(e);
      }),
      isButtonShown: n.Ember.computed(
        'isSocialLeaderboardEnabled',
        'queueType',
        function () {
          const e = this.get('isSocialLeaderboardEnabled'),
            t = this.get('queueType');
          return e && this.isQueueEnabledForSocialLeaderboard(t);
        },
      ),
      createFlyout() {
        const e = this.element,
          t = {
            showEvent: 'show',
            hideEvent: 'hide',
            targetAnchor: { x: 'center', y: 'bottom' },
            tooltipAnchor: { x: 'center', y: 'top' },
            offset: { x: -1, y: 15 },
            orientation: 'bottom',
            animated: 'true',
            ComponentFactory: n.ComponentFactory,
          },
          a = {
            caller: this.element,
            selected: this.get('selected'),
            currentSummonerName: this.get('currentPlayer.summonerName'),
            onResetNextUpdateTime: (e) => {
              this.setPipTimer(e);
            },
            numFriends: this.get('numFriends'),
            minFriendCount: this.get('minFriendCount'),
            closeSocialLeaderboard: () => {
              this.closeSocialLeaderboard();
            },
          };
        e.addEventListener('willHide', this.handleHideEvent),
          n.FlyoutManager.assignFlyout(
            e,
            'SocialLeaderboardFeatureFlyoutComponent',
            a,
            t,
          );
      },
      init() {
        this._super(...arguments),
          (this.handleHideEvent = this.handleHideEvent.bind(this));
      },
      willDestroyElement() {
        this._super(...arguments),
          this.element.removeEventListener('willHide', this.handleHideEvent),
          this.cancelTimer();
      },
      didReceiveAttrs() {
        this._super(...arguments);
        const e = this.get('queueType');
        if (this.isQueueEnabledForSocialLeaderboard(e)) {
          const t = this.get('socialLeaderboardService');
          t.getSocialLeaderboardNextUpdateTime(e).then((e, t) => {
            t || this.handleGetSocialLeaderboardNextUpdateTime(1e3 * e);
          });
        }
      },
      handleGetSocialLeaderboardNextUpdateTime(e) {
        const t = e;
        0 !== t && (t < Date.now() ? this.setPipToShow() : this.setPipTimer(t));
      },
      handleHideEvent() {
        this.set('isFlyoutOpen', !1);
      },
      setPipTimer(e) {
        this.cancelTimer();
        const t = e - Date.now();
        this.set(
          'timer',
          n.Ember.run.later(
            this,
            () => {
              this.setPipToShow();
            },
            t,
          ),
        );
      },
      setPipToShow() {
        this.get('isFlyoutOpen') || this.set('isPipShown', !0);
      },
      cancelTimer() {
        const e = this.get('timer');
        e && (n.Ember.run.cancel(e), this.set('timer', null));
      },
      isQueueEnabledForSocialLeaderboard(e) {
        return (
          e === s.QUEUE_TYPE.RANKED_FLEX_SR ||
          e === s.QUEUE_TYPE.RANKED_SOLO_5x5
        );
      },
      toggleSocialLeaderboardFlyoutHelper() {
        this.get('isFlyoutOpen')
          ? this.closeSocialLeaderboard()
          : (n.Telemetry.sendEvent('social-leaderboard-open-on-button-click'),
            this.set('isPipShown', !1),
            this.createFlyout(),
            n.FlyoutManager.sendEvent(this.element, 'show'),
            this.set('isFlyoutOpen', !0));
      },
      closeSocialLeaderboard() {
        n.FlyoutManager.sendEvent(this.element, 'hide'),
          this.runTask(() => {
            n.FlyoutManager.unassignFlyout(this.element);
          }, 133),
          this.set('isFlyoutOpen', !1);
      },
      actions: {
        toggleSocialLeaderboardFlyout() {
          this.toggleSocialLeaderboardFlyoutHelper();
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'rnaTibRF',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\button-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isButtonShown"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","social-leaderboard-pip-cta"],["flush-element"],["text","\\n        "],["append",["unknown",["call-to-action-pip"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","social-leaderboard-button-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"toggleSocialLeaderboardFlyout"],null],null],["static-attr","remove-padding",""],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","social-leaderboard-button-icon"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["isPipShown"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(68),
      i = n(o),
      s = a(0),
      l = a(12),
      r = a(117);
    a(485);
    var c = a(6),
      m = n(c);
    const d = (0, i.default)({
        NONE: 'none',
        PRESTIGE: 'prestige',
        RANKED: 'ranked',
      }),
      p = (0, s.emberDataBinding)({
        Ember: s.Ember,
        websocket: (0, s.getProvider)().getSocket(),
        logPrefix: 'parties:player-banner:component',
        basePaths: { ranked: '/lol-ranked' },
        boundProperties: {
          rankedData: { api: 'ranked', path: '/v1/ranked-stats/{{puuid}}' },
        },
      });
    e.exports = s.Ember.Component.extend(p, {
      layout: a(486),
      classNames: ['v2-banner-component'],
      classNameBindings: [
        'lobbyChallengesEnabled:challenges-enabled:challenges-disabled',
      ],
      selected: null,
      puuid: null,
      summonerId: null,
      member: null,
      isLocalPlayer: !1,
      rankedData: null,
      crestType: null,
      lobbiesService: s.Ember.inject.service('lobbies'),
      matchmakingService: s.Ember.inject.service('matchmaking'),
      isNotLocalPlayer: s.Ember.computed.not('isLocalPlayer'),
      isEmpty: s.Ember.computed.empty('member'),
      queueType: s.Ember.computed.alias('selected.queue.type'),
      isRanked: s.Ember.computed.alias('selected.queue.isRanked'),
      isSearching: s.Ember.computed.alias('matchmakingService.isSearching'),
      isMatchFound: s.Ember.computed.alias('matchmakingService.isMatchFound'),
      isRankedCrestEquipped: s.Ember.computed.equal('crestType', d.RANKED),
      showPositionSelector: s.Ember.computed.alias(
        'lobbiesService.showPositionSelector',
      ),
      primaryPosition: s.Ember.computed.alias('member.firstPositionPreference'),
      secondaryPosition: s.Ember.computed.alias(
        'member.secondPositionPreference',
      ),
      isPrimaryFill: s.Ember.computed.equal(
        'primaryPosition',
        l.POSITIONS.FILL,
      ),
      currentTeamIsFull: s.Ember.computed.alias(
        'lobbiesService.currentTeamIsFull',
      ),
      playerTitle: s.Ember.computed.alias('challengesSummary.title.name'),
      showSinglePosition: s.Ember.computed.or(
        'isPrimaryFill',
        'currentTeamIsFull',
      ),
      selectedChallenges: s.Ember.computed.alias(
        'challengesSummary.topChallenges',
      ),
      platformConfigSingleton: m.default,
      lobbyChallengesEnabled: s.Ember.computed.alias(
        'platformConfigSingleton.lobbyChallengesEnabled',
      ),
      init() {
        this._super(...arguments),
          (this.challengesBinding = (0, s.dataBinding)(
            '/lol-challenges',
            (0, s.getProvider)().getSocket(),
          )),
          (this.regaliaBinding = (0, s.dataBinding)(
            '/lol-regalia',
            (0, s.getProvider)().getSocket(),
          ));
      },
      didReceiveAttrs() {
        this._super(...arguments);
        const e = this.get('summonerId');
        if ((this.getRegaliaCached(e), !!this.get('lobbyChallengesEnabled'))) {
          const e = this.get('puuid');
          e && this._prevPuuid && e !== this._prevPuuid
            ? (this.challengesBinding.unobserve(this.challengesDataPath, this),
              (this.challengesDataPath = `v1/summary-player-data/LOL_MOBA/player/${e}`),
              this.challengesBinding.observe(
                this.challengesDataPath,
                this,
                this.handleSummaryPlayerData,
              ))
            : !e && this._prevPuuid
            ? this.challengesBinding.unobserve(this.challengesDataPath, this)
            : e &&
              !this._prevPuuid &&
              ((this.challengesDataPath = `v1/summary-player-data/LOL_MOBA/player/${e}`),
              this.challengesBinding.observe(
                this.challengesDataPath,
                this,
                this.handleSummaryPlayerData,
              )),
            (this._prevPuuid = e);
        }
      },
      didInsertElement() {
        if ((this._super(...arguments), this.get('introAnimationComplete'))) {
          const e = this.element.querySelector(
            'lol-regalia-parties-v2-element',
          );
          e.setAttribute('animations', !0), e.setAttribute('show-intro', !0);
        }
      },
      isLeader: s.Ember.computed(
        'member.isLeader',
        'lobbiesService.otherCurrentPartyMembers.@each.isLeader',
        function () {
          const e = this.get('member');
          return !!e && e.isLeader;
        },
      ),
      memberType: s.Ember.computed('isLocalPlayer', function () {
        return this.get('isLocalPlayer')
          ? r.BANNER_TYPES.CURRENT_PLAYER
          : r.BANNER_TYPES.OTHER_PLAYER;
      }),
      primaryTooltipConfig: {
        targetAnchor: { x: 'left', y: 'center' },
        tooltipAnchor: { x: 'right', y: 'center' },
        offset: { x: 0, y: 0 },
      },
      secondaryTooltipConfig: {
        targetAnchor: { x: 'right', y: 'center' },
        tooltipAnchor: { x: 'left', y: 'center' },
        offset: { x: 0, y: 0 },
      },
      primaryPositionLabelText: s.Ember.computed(
        'isPrimaryFill',
        'tra.parties_primary_position',
        'tra.parties_primary_fill',
        function () {
          return this.get('isPrimaryFill')
            ? this.get('tra.parties_primary_fill')
            : this.get('tra.parties_primary_position');
        },
      ),
      primaryPositionText: s.Ember.computed(
        'isPrimaryFill',
        'primaryPosition',
        function () {
          if (this.get('isPrimaryFill')) return '';
          const e = (this.get('primaryPosition') || '').toLowerCase();
          return this.get(`tra.parties_position_${e}`);
        },
      ),
      secondaryPositionText: s.Ember.computed('secondaryPosition', function () {
        const e = (this.get('secondaryPosition') || '').toLowerCase();
        return this.get(`tra.parties_position_${e}`);
      }),
      showRankTooltip: s.Ember.computed(
        'rankedData.queueMap',
        'queueType',
        'isRanked',
        'isRankedCrestEquipped',
        function () {
          if (!this.get('isRankedCrestEquipped')) return !1;
          if (!this.get('isRanked')) return !0;
          const e = this.get('rankedData.queueMap'),
            t = this.get('queueType');
          if (e && t) {
            const a = e[t];
            if (!a || 'NONE' === a.tier) return !1;
          }
          return !0;
        },
      ),
      handleSummaryPlayerData(e) {
        this.set('challengesSummary', e);
      },
      getRegaliaCached(e) {
        e &&
          this._prevSummonerId !== e &&
          (this.getRegalia(e, !1),
          this._prevSummonerId &&
            this.regaliaSummonerPath &&
            this.regaliaBinding.unobserve(this.regaliaSummonerPath, this),
          (this.regaliaSummonerPath = `/v2/summoners/${e}/regalia/async`),
          this.regaliaBinding.observe(
            this.regaliaSummonerPath,
            this,
            this.handleRegaliaAsync,
          )),
          (this._prevSummonerId = e);
      },
      handleRegaliaAsync(e) {
        const t = this.get('summonerId');
        e &&
          e.md5 !== this._regaliaMd5 &&
          t &&
          (this.getRegalia(t, !0), (this._regaliaMd5 = e.md5));
      },
      getRegalia(e, t) {
        const a = `/v2/summoners/${e}/regalia`;
        this.regaliaBinding.get(a, { skipCache: t }).then((e) => {
          e && this.set('crestType', e.crestType);
        });
      },
      willDestroyElement() {
        this.challengesBinding.unobserve(this.challengesDataPath, this),
          this.regaliaBinding.unobserve(this.regaliaSummonerPath, this);
      },
      actions: {
        showInvite() {
          this.get('isEmpty') && this.sendAction('showInviteModal');
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'wj5sFhRe',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-component\\\\index.js\\" "],["text","\\n"],["block",["unless"],[["get",["isEmpty"]]],null,8]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","              "],["open-element","lol-uikit-content-block",[]],["static-attr","class","position-tooltip"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                "],["append",["unknown",["primaryPositionLabelText"]],false],["text","\\n                "],["open-element","h5",[]],["flush-element"],["append",["unknown",["primaryPositionText"]],false],["close-element"],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-content-block",[]],["static-attr","class","position-tooltip"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                "],["append",["unknown",["tra","parties_secondary_position"]],false],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n                "],["open-element","h5",[]],["flush-element"],["append",["unknown",["secondaryPositionText"]],false],["close-element"],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["dynamic-attr","class",["concat",["position-icons-container ",["helper",["if"],[["get",["showSinglePosition"]],"single-selector"],null]]]],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-element secondary"],["flush-element"],["text","\\n            "],["append",["helper",["v2-banner-position-icon"],null,[["position","isPrimary"],[["get",["secondaryPosition"]],["get",["isLeader"]]]]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["secondaryTooltipConfig"]]]],1],["text","          "],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-element primary"],["flush-element"],["text","\\n            "],["append",["helper",["v2-banner-position-icon"],null,[["position","isPrimary"],[["get",["primaryPosition"]],["get",["isLeader"]]]]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["primaryTooltipConfig"]]]],0],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["challenge-banner-token"],null,[["challengeData","localPlayerChallengesData","isLocalPlayer","isComparable"],[["get",["challengeData"]],["get",["localPlayerChallengesData"]],["get",["isLocalPlayer"]],true]]],false],["text","\\n"]],"locals":["challengeData","index"]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","leader-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["identity-tooltip"],null,[["rankedData","selectedQueue","player","showRank"],[["get",["rankedData"]],["get",["selected","queue"]],["get",["member"]],["get",["showRankTooltip"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["right","system"]],5]],"locals":[]},{"statements":[["text","          "],["append",["helper",["v2-banner-crystal"],null,[["summonerId","challengesSummary"],[["get",["member","summonerId"]],["get",["challengesSummary"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","lobby-banner-animation-container"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-lottie",[]],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-banner.json"],["static-attr","autoplay","false"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-banner ",["helper",["if"],[["get",["isLocalPlayer"]],"local"],null]," ",["helper",["if"],[["get",["isEmpty"]],"empty"],null]," ",["helper",["if"],[["get",["willAnimate"]],"hidden"],null]]]],["flush-element"],["text","\\n  "],["open-element","lol-regalia-parties-v2-element",[]],["dynamic-attr","summoner-id",["unknown",["member","summonerId"]],null],["dynamic-attr","puuid",["unknown",["member","puuid"]],null],["dynamic-attr","queue",["unknown",["queueType"]],null],["dynamic-attr","member-type",["unknown",["memberType"]],null],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-banner-contents"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","banner-highlight"],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","banner-spacer"],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","player-identity-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["lobbyChallengesEnabled"]]],null,7,6],["text","      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","player-details-spacer"],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","player-name-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLeader"]]],null,4],["text","        "],["open-element","div",[]],["static-attr","class","player-name"],["flush-element"],["append",["unknown",["member","summonerName"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","player-title-container"],["flush-element"],["text","\\n        "],["append",["unknown",["playerTitle"]],false],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-achievements-container ",["helper",["if"],[["get",["isEmpty"]],"hide"],null]]]],["flush-element"],["text","\\n"],["block",["each"],[["get",["challengesSummary","topChallenges"]]],null,3],["text","      "],["close-element"],["text","\\n"],["block",["if"],[["get",["showPositionSelector"]]],null,2],["text","      "],["append",["helper",["v2-player-party-controls"],null,[["member","isLeader","isMe"],[["get",["member"]],["get",["isLeader"]],["get",["isLocalPlayer"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["player-identity-animation-container ",["helper",["if"],[["get",["isLocalPlayer"]],"local"],null]," ",["helper",["if"],[["get",["isNotLocalPlayer"]],"member"],null]]]],["flush-element"],["text","\\n  "],["open-element","lol-uikit-video",[]],["static-attr","class","player-identity-gem-animation"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["dynamic-attr","src",["concat",[["unknown",["gemAnimVideoPath"]]]]],["static-attr","preload",""],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0);
    a(488);
    var i = a(12),
      s = a(13),
      l = a(71),
      r = n(l),
      c = a(3),
      m = n(c),
      d = a(5),
      p = n(d),
      u = a(51),
      g = n(u);
    const b = (0, m.default)('plugin:parties:footer-component:warn'),
      h = {
        QUEUE_DODGER: 'QUEUE_DODGER',
        LEAVER_BUSTER_QUEUE_DELAY: 'LEAVER_BUSTED',
        LEAVER_BUSTER_QUEUE_LOCKOUT: 'LEAVER_BUSTER_QUEUE_LOCKOUT',
      };
    e.exports = o.Ember.Component.extend(p.default, g.default, {
      layout: a(489),
      classNames: ['v2-footer-component'],
      currentPlayerCanInvite: !1,
      buttonSounds: {
        closeHover: s.SFX_URLS.SFX_LOBBY_QUIT_HOVER,
        closeClick: s.SFX_URLS.SFX_LOBBY_QUIT_CLICK,
        confirmHover: s.SFX_URLS.SFX_FIND_MATCH_HOVER,
        confirmClick: s.SFX_URLS.SFX_FIND_MATCH_CLICK,
      },
      lobbiesService: o.Ember.inject.service('lobbies'),
      gameflowService: o.Ember.inject.service('gameflow'),
      customGamesService: o.Ember.inject.service('custom-games'),
      patcherService: o.Ember.inject.service('patcher'),
      queueEligibilityService: o.Ember.inject.service('queue-eligibility'),
      matchmakingService: o.Ember.inject.service('matchmaking'),
      summonerService: o.Ember.inject.service('summoner'),
      animationLock: o.Ember.computed.alias('selected.animationLock'),
      hasRankedDivisionRestriction: o.Ember.computed.alias(
        'queueEligibilityService.hasRankedDivisionRestriction',
      ),
      currentPartyIsFull: o.Ember.computed.alias(
        'lobbiesService.currentPartyIsFull',
      ),
      isPremadeRestrictedFives: o.Ember.computed.alias(
        'lobbiesService.isPremadeRestrictedFives',
      ),
      currentPlayer: o.Ember.computed.alias('lobbiesService.currentPlayer'),
      primaryPosition: o.Ember.computed.alias(
        'currentPlayer.firstPositionPreference',
      ),
      secondaryPosition: o.Ember.computed.alias(
        'currentPlayer.secondPositionPreference',
      ),
      isInQueue: o.Ember.computed.or('isSearching', 'isMatchFound'),
      hasQueueAvailabilityWarning: o.Ember.computed.alias(
        'lobbiesService.hasQueueAvailabilityWarning',
      ),
      canStartMatchmaking: o.Ember.computed.alias(
        'lobbiesService.canStartMatchmaking',
      ),
      isCurrentPlayerPartyLeader: o.Ember.computed.alias(
        'lobbiesService.isCurrentPlayerPartyLeader',
      ),
      inLobby: o.Ember.computed.alias('lobbiesService.inLobby'),
      isMember: o.Ember.computed.alias(
        'lobbiesService.isCurrentPlayerPartyMember',
      ),
      isLeader: o.Ember.computed.alias(
        'lobbiesService.isCurrentPlayerPartyLeader',
      ),
      isNotLeader: o.Ember.computed.not('isLeader'),
      isSearching: o.Ember.computed.alias('matchmakingService.isSearching'),
      isNotSearching: o.Ember.computed.alias(
        'matchmakingService.isNotSearching',
      ),
      isMatchFound: o.Ember.computed.alias('matchmakingService.isMatchFound'),
      isMatchNotFound: o.Ember.computed.alias(
        'matchmakingService.isMatchNotFound',
      ),
      searchError: o.Ember.computed.readOnly(
        'matchmakingService.longestSearchError',
      ),
      searchErrorType: o.Ember.computed.readOnly('searchError.errorType'),
      isSearchError: o.Ember.computed.bool('searchError'),
      searchErrorHasTimeRemaining: o.Ember.computed.gt(
        'matchmakingService.longestSearchErrorPenaltyTimeRemaining',
        0,
      ),
      hasPenaltyTime: o.Ember.computed.and(
        'isSearchError',
        'searchErrorHasTimeRemaining',
      ),
      timeRemaining: o.Ember.computed.readOnly(
        'matchmakingService.longestSearchErrorPenaltyTimeRemainingFormatted',
      ),
      showPositionSelector: o.Ember.computed.alias(
        'lobbiesService.showPositionSelector',
      ),
      currentPartySize: o.Ember.computed.alias(
        'lobbiesService.currentPartySize',
      ),
      displayNotLeaderTooltip: o.Ember.computed.and(
        'inLobby',
        'isMember',
        'isNotSearching',
        'isMatchNotFound',
      ),
      searchErrorLeaverBusterQueueDelay: o.Ember.computed.equal(
        'searchErrorType',
        h.LEAVER_BUSTER_QUEUE_DELAY,
      ),
      searchErrorLeaverBusterQueueLockout: o.Ember.computed.equal(
        'searchErrorType',
        h.LEAVER_BUSTER_QUEUE_LOCKOUT,
      ),
      searchErrorPenalizedSummonerIdObserver: o.Ember.observer(
        'searchError.penalizedSummonerId',
        function () {
          const e = this.get('searchError.penalizedSummonerId');
          e &&
            this.get('summonerService')
              .getSummoner(e)
              .then((e) => {
                this.set('penalizedSummoner', e);
              });
        },
      ),
      queueErrorMessage: o.Ember.computed(
        'searchErrorType',
        'penalizedSummoner',
        'tra.ready',
        'tra.parties_queue_error_queue_dodge_myself_body',
        'tra.parties_queue_error_queue_dodge_other_body',
        'tra.parties_queue_error_generic_body',
        function () {
          const e = this.get('searchErrorType'),
            t = this.get('searchError.penalizedSummonerId'),
            a = this.get('matchmakingService.currentSummoner.summonerId');
          return e === h.QUEUE_DODGER
            ? t === a
              ? this.get('tra.parties_queue_error_queue_dodge_myself_body')
              : this.translate('parties_queue_error_queue_dodge_other_body', {
                  player: this.get('penalizedSummoner.displayName'),
                })
            : e === h.LEAVER_BUSTER_QUEUE_LOCKOUT
            ? t === a
              ? this.get(
                  'tra.parties_queue_error_leaver_buster_lockout_restriction_tooltip_myself_body',
                )
              : this.translate(
                  'parties_queue_error_leaver_buster_lockout_restriction_tooltip_other_body',
                  { player: this.get('penalizedSummoner.displayName') },
                )
            : this.get('tra.parties_queue_error_generic_body$html');
        },
      ),
      patcherDisconnected: o.Ember.computed.not('patcherService.isConnected'),
      showingPartyButNotLeader: o.Ember.computed.and(
        'showingState.isShowingParty',
        'isNotLeader',
      ),
      confirmButtonThrottled: !1,
      confirmButtonNotThrottled: o.Ember.computed.not('confirmButtonThrottled'),
      showingPartyButThrottled: o.Ember.computed.and(
        'showingState.isShowingParty',
        'isLeader',
        'confirmButtonThrottled',
      ),
      showingPartyAndInQueue: o.Ember.computed.and(
        'showingState.isShowingParty',
        'isInQueue',
      ),
      showingPartyAndPenaltyTime: o.Ember.computed(
        'showingState.isShowingParty',
        'hasPenaltyTime',
        'customGamesService.isCustomUI',
        function () {
          return (
            this.get('showingState.isShowingParty') &&
            this.get('hasPenaltyTime') &&
            !this.get('customGamesService.isCustomUI')
          );
        },
      ),
      showingPartyAndRankedDivisionRestriction: o.Ember.computed.and(
        'showingState.isShowingParty',
        'hasRankedDivisionRestriction',
      ),
      cannotStartMatchmaking: o.Ember.computed.not(
        'lobbiesService.canStartMatchmaking',
      ),
      showingPartyButCannotStartMatchmaking: o.Ember.computed.and(
        'showingState.isShowingParty',
        'isLeader',
        'cannotStartMatchmaking',
      ),
      confirmButtonDisabled: o.Ember.computed.or(
        'animationLock',
        'patcherDisconnected',
        'selected.isUpdatingSelection',
        'lobbiesService.hasLobbyRestrictions',
        'showingPartyButNotLeader',
        'showingPartyButThrottled',
        'showingPartyAndRankedDivisionRestriction',
        'showingPartyAndInQueue',
        'showingPartyAndPenaltyTime',
        'showingPartyButCannotStartMatchmaking',
        'hasQueueAvailabilityWarning',
      ),
      confirmButtonEnabled: o.Ember.computed.not('confirmButtonDisabled'),
      confirmButtonText: o.Ember.computed(
        'tra.ready',
        'hasPenaltyTime',
        'isInQueue',
        'customGamesService.isCustomUI',
        'customGameListService.confirmButtonText',
        'tra.parties_button_in_queue',
        'tra.parties_button_find_match',
        'tra.parties_button_start_game',
        function () {
          if (this.get('isInQueue'))
            return this.get('tra.parties_button_in_queue');
          if (this.get('customGamesService.isCustomUI'))
            return this.get('tra.parties_button_start_game');
          if (this.get('hasPenaltyTime')) {
            const e = this.get('tra.parties_button_blocked'),
              t = this.get('timeRemaining');
            return `${t}`;
          }
          return this.get('tra.parties_button_find_match');
        },
      ),
      confirmButtonTooltipText: o.Ember.computed(
        'displayNotLeaderTooltip',
        'hasPenaltyTime',
        'queueErrorMessage',
        'customGamesService.isCustomUI',
        'isPremadeRestrictedFives',
        'patcherService.isConnected',
        'lobbiesService.canStartMatchmaking',
        'hasQueueAvailabilityWarning',
        'hasRankedDivisionRestriction',
        'tra.metadata',
        'tra.ready',
        'tra.parties_find_match_wait_for_captain',
        'tra.parties_start_game_wait_for_captain',
        'tra.parties_position_select_members_required_tooltip',
        'tra.parties_patcher_not_connected',
        'tra.parties_premade_size_five_restriction',
        'lobbiesService.hasLobbyRestrictions',
        function () {
          let e = '';
          return (
            this.get('patcherService.isConnected') ||
              (e = this.get('tra.parties_patcher_not_connected')),
            this.get('hasRankedDivisionRestriction')
              ? (e = this.get(
                  'tra.game_select_queue_restriction_party_teamdivisionrestriction',
                ))
              : this.get('isPremadeRestrictedFives')
              ? (e = this.get('tra.parties_premade_size_five_restriction'))
              : !this.get('lobbiesService.canStartMatchmaking') &&
                (this.get('readyWarning')
                  ? (e = this.get('readyWarning'))
                  : (e = this.get(
                      'tra.parties_position_select_members_required_tooltip',
                    ))),
            this.get('displayNotLeaderTooltip')
              ? this.get('customGamesService.isCustomUI')
                ? (e = this.get('tra.parties_start_game_wait_for_captain'))
                : (e = this.get('tra.parties_find_match_wait_for_captain'))
              : this.get('hasPenaltyTime') &&
                (e = this.get('queueErrorMessage')),
            this.get('hasQueueAvailabilityWarning')
              ? this.get('queueAvailabilityWarningTooltip')
              : e.replace(/\n/, '<br>')
          );
        },
      ),
      confirmButtonShowTooltip: o.Ember.computed(
        'displayNotLeaderTooltip',
        'hasPenaltyTime',
        'searchErrorLeaverBusterQueueDelay',
        'isPremadeRestrictedFives',
        'isInQueue',
        'patcherService.isConnected',
        'hasQueueAvailabilityWarning',
        'showingState.isShowingGameSelect',
        'lobbiesService.canStartMatchmaking',
        'lobbiesService.premadeSizeAllowed',
        'lobbiesService.hasLobbyRestrictions',
        'customGamesService.isCustomUI',
        function () {
          if (
            this.get('displayNotLeaderTooltip') ||
            this.get('isPremadeRestrictedFives') ||
            !this.get('patcherService.isConnected')
          )
            return !0;
          return (
            !(
              !this.get('hasPenaltyTime') ||
              this.get('searchErrorLeaverBusterQueueDelay') ||
              this.get('showingState.isShowingGameSelect') ||
              this.get('customGamesService.isCustomUI')
            ) ||
            !(
              this.get('isInQueue') ||
              this.get('lobbiesService.canStartMatchmaking') ||
              !this.get('lobbiesService.premadeSizeAllowed')
            ) ||
            !!this.get('hasQueueAvailabilityWarning')
          );
        },
      ),
      _hasClickedCloseDuringTransition: !1,
      handleCloseDuringTransitionObserver: o.Ember.observer(
        '_hasClickedCloseDuringTransition',
        'isSearching',
        'isMatchFound',
        'hasPenaltyTime',
        function () {
          (this.get('isSearching') ||
            this.get('isMatchFound') ||
            this.get('hasPenaltyTime')) &&
            (this.set('_isTransitioningState', !1),
            this.get('_hasClickedCloseDuringTransition') &&
              (this.set('_hasClickedCloseDuringTransition', !1),
              this.cancelMatchmaking()));
        },
      ),
      lobbyAvailabilityMatchmakingObserver: o.Ember.observer(
        'hasQueueAvailabilityWarning',
        'isSearching',
        function () {
          this.get('hasQueueAvailabilityWarning') &&
            this.get('isSearching') &&
            this.get('lobbiesService').cancelMatchmakingSearch();
        },
      ),
      startMatchmaking: function () {
        this.get('confirmButtonNotThrottled') &&
          (this.set('confirmButtonThrottled', !0),
          (this.enterQueueTimer = o.Telemetry.startTimer(
            'parties-enter-queue',
          )),
          this.get('lobbiesService')
            .startMatchmakingSearch()
            .then(
              () => {
                this.set('confirmButtonThrottled', !1);
              },
              (e) => {
                r.default.sendTelemetryEvent('feature_error', {
                  id: 'PARTIES_START_MATCHMAKING_ATTEMPT_FAILED',
                  severity: 'blocker',
                  message:
                    'failed http post request to /lol-lobby/v2/lobby/matchmaking/search',
                }),
                  this.set('confirmButtonThrottled', !1),
                  this.set('_isTransitioningState', !1),
                  b(`Start matchmaking search failed: ${e}`);
              },
            ));
      },
      cancelMatchmaking: function () {
        this.get('isSearching') &&
          this.get('lobbiesService').cancelMatchmakingSearch();
      },
      confirmButtonClicked: function () {
        this.set('_isTransitioningState', !0), this.startMatchmaking();
      },
      closeButtonClicked: function () {
        this.blurCloseButton(),
          this.get('isSearching') || this.get('isMatchFound')
            ? this.cancelMatchmaking()
            : this.get('_isTransitioningState')
            ? (this.set('_hasClickedCloseDuringTransition', !0),
              this.get('lobbiesService')
                .leaveLobby()
                .catch((e) => {
                  b(`Leaving lobby failed: ${e}`),
                    this.set('_isTransitioningState', !1);
                }))
            : this.leavePartyModal();
      },
      blurCloseButton: function () {
        const e = this.element.querySelector('button.close');
        e && e.blur();
      },
      leavePartyModal: function () {
        if (1 < this.get('currentPartySize')) {
          const e = this.showModal({
            type: 'DialogConfirm',
            data: {
              contents: this.get('tra.parties_leave_confirmation_text'),
              acceptText: this.get('tra.parties_leave_confirmation_yes'),
              declineText: this.get('tra.parties_leave_confirmation_no'),
              onAccept: () => {
                this.leaveParty();
              },
            },
          });
          return void e.domNode.classList.add('parties-leave-party-modal');
        }
        this.leaveParty();
      },
      enterQueueTelemetryObserver: o.Ember.observer('isInQueue', function () {
        this.get('isInQueue') &&
          this.enterQueueTimer &&
          (o.Telemetry.stopAndRecordTimer(this.enterQueueTimer),
          delete this.enterQueueTimer);
      }),
      actions: {
        confirmButton() {
          this.confirmButtonClicked();
        },
        closeButton() {
          this.closeButtonClicked();
        },
        openOverlay(e, t) {
          this.sendAction('openOverlay', e, t);
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'Luy9rWlT',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","left-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","chat-container"],["flush-element"],["text","\\n    "],["open-element","lol-social-chat-room",[]],["static-attr","type","lobby"],["static-attr","disabled-when-connecting",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","center-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","close-button-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","close-button"],["flush-element"],["text","\\n      "],["append",["helper",["generic-button"],null,[["onClick","baseImgPath","overImgPath","downImgPath","onClickSound","onHoverSound"],[["helper",["action"],[["get",[null]],"closeButton"],null],"/fe/lol-parties/button-x.png","/fe/lol-parties/button-x-over.png","/fe/lol-parties/button-x-down.png",["get",["buttonSounds","closeClick"]],["get",["buttonSounds","closeHover"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","find-match-button-container"],["flush-element"],["text","\\n    "],["append",["helper",["generic-button"],null,[["onClick","baseImgPath","overImgPath","downImgPath","disabledImgPath","upText","overText","downText","disabledText","onClickSound","onHoverSound","disabledStyle","isEnabled"],[["helper",["action"],[["get",[null]],"confirmButton"],null],"/fe/lol-parties/button-find-match.png","/fe/lol-parties/button-find-match-over.png","/fe/lol-parties/button-find-match-down.png","/fe/lol-parties/button-find-match-disabled.png",["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["buttonSounds","confirmClick"]],["get",["buttonSounds","confirmHover"]],"color: grey",["get",["confirmButtonEnabled"]]]]],false],["text","\\n    "],["open-element","div",[]],["static-attr","class","left-wing"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","right-wing"],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["confirmButtonShowTooltip"]]],null,2],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","role-selectors-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showPositionSelector"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","right-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","invite-info-panel-container"],["flush-element"],["text","\\n    "],["append",["helper",["v2-invite-info-panel"],null,[["currentPlayerCanInvite"],[["get",["currentPlayerCanInvite"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["matchmaking-errors"],null,[["_isTransitioningState"],[["get",["_isTransitioningState"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["v2-position-selector"],null,[["primaryPosition","secondaryPosition","isInQueue","currentPartyIsFull","openOverlay"],[["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["isInQueue"]],["get",["currentPartyIsFull"]],["helper",["action"],[["get",[null]],"openOverlay"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["confirmButtonTooltipText"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],1]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(22),
      r = n(l);
    a(491);
    var c = a(12);
    const m = s.EmberAddons.EmberLifeline.RunMixin,
      d = s.UIKit.getTooltipManager(),
      p = s.UIKit.getTemplateHelper();
    e.exports = s.Ember.Component.extend(m, {
      layout: a(492),
      classNames: ['v2-footer-notifications'],
      disabledReasons: s.Ember.A(),
      lobbiesService: s.Ember.inject.service('lobbies'),
      matchmakingService: s.Ember.inject.service('matchmaking'),
      eligibilityService: s.Ember.inject.service('queue-eligibility'),
      eligibilitiesEntity: r.default,
      restrictions: s.Ember.computed.alias('eligibilitiesEntity.restrictions'),
      warnings: s.Ember.computed.alias('eligibilitiesEntity.warnings'),
      currentPlayer: s.Ember.computed.alias('lobbiesService.currentPlayer'),
      canStartMatchmaking: s.Ember.computed.alias(
        'lobbiesService.canStartMatchmaking',
      ),
      currentTeamIsFull: s.Ember.computed.alias(
        'lobbiesService.currentTeamIsFull',
      ),
      currentPartyMembers: s.Ember.computed.alias(
        'lobbiesService.currentPartyMembers',
      ),
      currentPartySize: s.Ember.computed.alias(
        'lobbiesService.currentPartySize',
      ),
      hasQueueAvailabilityWarning: s.Ember.computed.alias(
        'lobbiesService.hasQueueAvailabilityWarning',
      ),
      queueAvailabilityWarningTooltip: s.Ember.computed.alias(
        'lobbiesService.queueAvailabilityWarningTooltip',
      ),
      allowablePremadeSizes: s.Ember.computed.alias(
        'lobbiesService.allowablePremadeSizes',
      ),
      premadeSizeAllowed: s.Ember.computed.alias(
        'lobbiesService.premadeSizeAllowed',
      ),
      shouldShowPremadeSizeError: s.Ember.computed.not('premadeSizeAllowed'),
      isCurrentPlayerPartyLeader: s.Ember.computed.alias(
        'lobbiesService.isCurrentPlayerPartyLeader',
      ),
      showPositionSelector: s.Ember.computed.alias(
        'lobbiesService.showPositionSelector',
      ),
      autoFillEligible: s.Ember.computed.alias(
        'currentPlayer.autoFillEligible',
      ),
      autoFillProtectedForStreaking: s.Ember.computed.alias(
        'currentPlayer.autoFillProtectedForStreaking',
      ),
      autoFillProtectedForPromos: s.Ember.computed.alias(
        'currentPlayer.autoFillProtectedForPromos',
      ),
      autoFillProtectedForSoloing: s.Ember.computed.alias(
        'currentPlayer.autoFillProtectedForSoloing',
      ),
      autoFillProtected: s.Ember.computed.or(
        'autoFillProtectedForPromos',
        'autoFillProtectedForSoloing',
        'autoFillProtectedForStreaking',
      ),
      notDraftPick: s.Ember.computed.not('showPositionSelector'),
      notInParty: s.Ember.computed.not('inParty'),
      hideReadyWarning: s.Ember.computed.or(
        'notInParty',
        'canStartMatchmaking',
        'matchmakingService.isInQueue',
      ),
      hasLobbyRestrictions: s.Ember.computed.or(
        'eligibilitiesEntity.hasLobbyRestrictions',
        'shouldShowPremadeSizeError',
      ),
      hidePositionWarning: s.Ember.computed.or(
        'matchmakingService.isInQueue',
        'currentTeamIsFull',
        'notDraftPick',
      ),
      hideAutofillStatus: s.Ember.computed.or('matchmakingService.isInQueue'),
      allMembersHaveSelectedPositions: s.Ember.computed(
        'currentTeamIsFull',
        'currentPartyMembers.@each.firstPositionPreference',
        'currentPartyMembers.@each.secondPositionPreference',
        function () {
          const e = this.get('currentPartyMembers') || [],
            t = this.get('currentTeamIsFull'),
            a = !e.some(function (e) {
              const a = e.get('firstPositionPreference'),
                n = !a || a === c.POSITIONS.UNSELECTED;
              let o = !1;
              if (!t && a !== c.POSITIONS.FILL) {
                const t = e.get('secondPositionPreference');
                o = !t || t === c.POSITIONS.UNSELECTED;
              }
              return n || o;
            });
          return a;
        },
      ),
      positionError: s.Ember.computed(
        'matchmakingService.isInQueue',
        'canStartMatchmaking',
        'showPositionSelector',
        'tra.ready',
        'tra.game_select_queue_restriction_party_canStartMatchmaking',
        'allMembersHaveSelectedPositions',
        function () {
          return this.get('showPositionSelector') &&
            !this.get('matchmakingService.isInQueue') &&
            !this.get('canStartMatchmaking') &&
            this.get('allMembersHaveSelectedPositions')
            ? this.get(
                'tra.game_select_queue_restriction_party_canStartMatchmaking',
              )
            : '';
        },
      ),
      positionWarning: s.Ember.computed(
        'autoFillEligible',
        'autoFillProtected',
        'hidePositionWarning',
        'tra.ready',
        'tra.parties_autofill_activated',
        'tra.parties_autofill_protected',
        function () {
          if (!this.get('hidePositionWarning'))
            return this.get('autoFillEligible')
              ? this.get('tra.parties_autofill_activated')
              : this.get('autoFillProtected')
              ? this.get('tra.parties_autofill_protected')
              : void 0;
        },
      ),
      readyWarning: s.Ember.computed(
        'readyWarningTooltip',
        'tra.ready',
        'tra.parties_ready_warning',
        function () {
          const e = this.get('readyWarningTooltip');
          if (e && 0 < e.length) return this.get('tra.parties_ready_warning');
        },
      ),
      readyWarningTooltip: s.Ember.computed(
        'currentPartyMembers.[]',
        'currentPartyMembers.@each.ready',
        'hideReadyWarning',
        'tra.ready',
        'tra.parties_ready_warning_tooltip',
        function () {
          if (!this.get('hideReadyWarning')) {
            const e = [],
              t = this.get('currentPartyMembers');
            for (let a = 0; a < t.length; a++) {
              const n = t[a];
              n.ready || e.push(n.summonerName);
            }
            if (!s.lodash.isEmpty(e)) {
              const t = this.get('tra.formatString');
              return t('parties_ready_warning_tooltip', {
                notReadyMemberNames: e.join(', '),
              });
            }
          }
        },
      ),
      teamSizeRestrictionMembers: s.Ember.computed(
        'restrictions',
        'restrictions.[]',
        function () {
          const e = this.get('restrictions');
          if (e)
            for (let t = 0; t < e.length; t++)
              if (e[t].restrictionCode === 'TeamSizeRestriction')
                return e[t].summonerIds.length;
          return 0;
        },
      ),
      mmrStandardDeviationWarning: s.Ember.computed.alias(
        'tra.parties_large_skill_gap_warning',
      ),
      mmrStandardDeviationWarningTooltip: s.Ember.computed.alias(
        'tra.parties_large_skill_gap_warning_tooltip',
      ),
      hasMmrStandardDeviationWarning: s.Ember.computed(
        'warnings.[]',
        function () {
          const e = this.get('warnings');
          if (e)
            for (let t = 0; t < e.length; t++) {
              const a = e[t];
              if (a.restrictionCode === 'MmrStandardDeviationTooLarge')
                return !0;
            }
          return !1;
        },
      ),
      shouldShowAutoFillStatus: s.Ember.computed(
        'autoFillEligible',
        'autoFillProtectedForStreaking',
        'autoFillProtectedForPromos',
        'autoFillProtectedForSoloing',
        'hideAutofillStatus',
        function () {
          return (
            !this.get('hideAutofillStatus') &&
            (this.get('autoFillEligible') ||
              this.get('autoFillProtectedForStreaking') ||
              this.get('autoFillProtectedForPromos') ||
              this.get('autoFillProtectedForSoloing'))
          );
        },
      ),
      premadeSizeErrorText: s.Ember.computed(
        'premadeSizeAllowed',
        'tra.game_select_queue_restriction_party_teamsizerestriction',
        'tra.ready',
        'teamSizeRestrictionMembers',
        'tra.parties_premade_size_restriction',
        'tra.parties_premade_size_restriction_singular',
        'tra.parties_premade_size_fives',
        'allowablePremadeSizes',
        'restrictions',
        'restrictions.[]',
        'restrictions.@each.summonerIdsString',
        function () {
          const e = this.get('teamSizeRestrictionMembers'),
            t = this.get('allowablePremadeSizes');
          if (t && 1 === t.length && 5 === t[0])
            return this.get('tra.parties_premade_size_fives');
          if (1 < e) {
            return this.get('tra').formatString(
              'game_select_queue_restriction_party_teamsizerestriction',
              { teamSizeRestriction: e },
            );
          }
          if (1 === e)
            return this.get('tra.parties_premade_size_restriction_singular');
          return this.get('tra').formatString(
            'parties_premade_size_restriction',
            { num: e },
          );
        },
      ),
      shouldShowAutoFillProtection: s.Ember.computed(
        'autoFillProtectedForStreaking',
        'autoFillProtectedForPromos',
        'autoFillProtectedForSoloing',
        function () {
          return (
            this.get('autoFillProtectedForStreaking') ||
            this.get('autoFillProtectedForPromos') ||
            this.get('autoFillProtectedForSoloing')
          );
        },
      ),
      warningTooltipText: s.Ember.computed(
        'tra.parties_autofill_tooltip',
        'tra.parties_autofill_streak_protection',
        'tra.parties_autofill_promo_protection',
        'tra.parties_autofill_solo_protection',
        'autoFillEligible',
        'autoFillProtectedForStreaking',
        'autoFillProtectedForPromos',
        'autoFillProtectedForSoloing',
        function () {
          if (this.get('autoFillEligible'))
            return this.get('tra.parties_autofill_tooltip');
          return this.get('autoFillProtectedForSoloing')
            ? this.get('tra.parties_autofill_solo_protection')
            : this.get('autoFillProtectedForPromos')
            ? this.get('tra.parties_autofill_promo_protection')
            : this.get('autoFillProtectedForStreaking')
            ? this.get('tra.parties_autofill_streak_protection')
            : void 0;
        },
      ),
      tooltipConfig: {
        targetAnchor: { x: 'center', y: 'top' },
        tooltipAnchor: { x: 'center', y: 'bottom' },
        offset: { x: 0, y: 0 },
      },
      restrictionsText: s.Ember.computed(
        'shouldShowPremadeSizeError',
        'hasLobbyRestrictions',
        'teamSizeRestrictionMembers',
        'restrictions.@each.summonerIdsString',
        'tra.ready',
        'tra.game_select_queue_restriction_party_notification',
        function () {
          return this.get('shouldShowPremadeSizeError')
            ? this.get('premadeSizeErrorText')
            : 0 < this.get('teamSizeRestrictionMembers')
            ? this.get('tra.game_select_queue_restriction_party_notification')
            : '';
        },
      ),
      restrictionsTooltipTextObserver: s.Ember.on(
        'init',
        s.Ember.observer(
          'hasLobbyRestrictions',
          'restrictions.@each.restrictionCode',
          'restrictions.@each.summonerIdsString',
          'restrictions',
          'lobbiesService.currentPartyMembers.@each.summonerId',
          'lobbiesService.queueId',
          'tra.ready',
          function () {
            s.Ember.run.once(this, () => {
              this.generateRestrictionStringsForParty();
            });
          },
        ),
      ),
      generateRestrictionStringsForParty: function () {
        if (this.get('hasLobbyRestrictions')) {
          const e = this.get(
              'eligibilitiesEntity',
            ).groupMissingTokenRestrictions(this.get('restrictions')),
            t = [];
          if (e) {
            const a = this.get('lobbiesService.queueId'),
              n = this.get('eligibilityService');
            return n && n.generateRestrictionForParty
              ? (e.forEach((e) => {
                  (e.queueId = a), t.push(n.generateRestrictionForParty(e));
                }),
                i.default.all(t).then((e) => {
                  this.set('disabledReasons', s.Ember.A(e));
                }))
              : i.default.resolve();
          }
        }
        return i.default.resolve();
      },
      restrictionLeaderClass: s.Ember.computed(
        'isCurrentPlayerPartyLeader',
        function () {
          return this.get('isCurrentPlayerPartyLeader') ? 'leader' : '';
        },
      ),
      showQueueAvailabilityTooltip: s.Ember.on(
        'didInsertElement',
        s.Ember.observer('hasQueueAvailabilityWarning', function () {
          this.runTask(() => this.updateQueueAvailabilityWarningTooltip(), 250);
        }),
      ),
      updateQueueAvailabilityWarningTooltip: function () {
        const e = this.element.querySelector('.parties-queue-warning-error');
        if (this.get('hasQueueAvailabilityWarning')) {
          let t = this.get('_queueAvailabilityWarningTooltipDOM');
          if (!t) {
            (t = document.createElement('lol-uikit-tooltip')),
              t.classList.add('parties-footer-tooltip');
            const e = p.contentBlockDialogSimple(
              this.get('queueAvailabilityWarningTooltip'),
            );
            e.setAttribute('type', 'tooltip-large'),
              t.appendChild(e),
              this.set('_queueAvailabilityWarningTooltipDOM', t);
          }
          d.assign(e, t, {}, this.get('tooltipConfig')), d.show(e);
        } else d.unassign(e);
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '87GB4Vit',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-notifications-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-notifications-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-notifications-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["hasQueueAvailabilityWarning"]]],null,18,17]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["warningTooltipText"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","parties-autofill-warning-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","parties-autofill-protection-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillProtection"]]],null,2,1],["text","      "],["append",["unknown",["positionWarning"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n"],["block",["if"],[["get",["positionWarning"]]],null,3],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillStatus"]]],null,4]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["mmrStandardDeviationWarningTooltip"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-mmr-warning-icon"],["flush-element"],["close-element"],["append",["unknown",["mmrStandardDeviationWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],6],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasMmrStandardDeviationWarning"]]],null,7,5]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-error"],["flush-element"],["append",["unknown",["positionError"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["positionError"]]],null,9,8]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["readyWarningTooltip"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning parties-ready-warning"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-ready-warning-icon"],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["readyWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],11],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["readyWarning"]]],null,12,10]],"locals":[]},{"statements":[["text","            "],["open-element","li",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["reason"]]],null],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["disabledReasons"]]],null,14],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-restrictions-warning-error"],["flush-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-notification-warning-icon ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["restrictionsText"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],15],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasLobbyRestrictions"]]],null,16,13]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-queue-warning-error"],["flush-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-notification-warning-icon ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["tra","parties_roster_invite_disabled_eligibility_disabled"]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(37),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    a(494),
      (e.exports = n.Ember.Component.extend({
        layout: a(495),
        classNames: ['v2-header-component'],
        classNameBindings: ['willAnimate:hidden'],
        lobbiesService: n.Ember.inject.service('lobbies'),
        assets: n.Ember.inject.service('assets'),
        mapId: n.Ember.computed.alias('selected.mapId'),
        gameMode: n.Ember.computed.alias('selected.queue.gameMode'),
        assetMutator: n.Ember.computed.alias('selected.queue.assetMutator'),
        category: n.Ember.computed.alias('selected.queue.category'),
        pickType: n.Ember.computed.alias('selected.pickType'),
        queueId: n.Ember.computed.alias('selected.queueId'),
        currentPlayer: n.Ember.computed.alias('lobbiesService.currentPlayer'),
        isGameModeSelectionEnabled: n.Ember.computed.alias(
          'currentPlayer.isLeader',
        ),
        mapName: n.Ember.computed('mapId', 'assets.availableMaps', function () {
          const e = this.get('mapId'),
            t = this.get('assetMutator'),
            a = this.get('assets').getMap(e, this.get('gameMode'), t);
          return a.name;
        }),
        mapNameShorthand: n.Ember.computed(
          'mapId',
          'assets.availableMaps',
          function () {
            const e = this.get('mapId'),
              t = this.get('assetMutator'),
              a = this.get('assets').getMap(e, this.get('gameMode'), t);
            return a.mapStringId;
          },
        ),
        queueName: n.Ember.computed(
          'queueId',
          'queues.platformJson',
          function () {
            const e = this.get('queueId'),
              t = this.get('queues.platformJson'),
              a = e && Array.isArray(t) ? t.find((t) => t.id === e) : null;
            return a ? a.shortName : '';
          },
        ),
        pickTypeName: n.Ember.computed(
          'pickType',
          'tra.ready',
          'lobbiesService.isMap21',
          'tra.game_select_pick_type_name_blind',
          function () {
            if (this.get('lobbiesService.isMap21'))
              return this.get('tra.game_select_pick_type_name_blind');
            const e = this.get('pickType');
            return e ? this.get(`tra.game_select_pick_type_name_${e}`) : '';
          },
        ),
        mapBackgroundClass: n.Ember.computed(
          'mapId',
          'gameMode',
          'assets.availableMaps',
          'assetMutator',
          function () {
            const e = this.get('assets').getMap(
              this.get('mapId'),
              this.get('gameMode'),
              this.get('assetMutator'),
            );
            return e
              ? i.default.mapKey({ mapId: e.id, gameMode: e.gameMode })
              : '';
          },
        ),
        actions: {
          cancelFlow() {
            this.sendAction('cancelFlow');
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'zoRyEU9P',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\header-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\header-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\header-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","lobby-header-content"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","lobby-back-button-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-back-button"],["flush-element"],["text","\\n      "],["append",["helper",["generic-button"],null,[["baseImgPath","overImgPath","downImgPath","disabledImgPath","onClickSound","onHoverSound","onClick","isEnabled"],["/fe/lol-parties/button-back-arrow.png","/fe/lol-parties/button-back-arrow-over.png","/fe/lol-parties/button-back-arrow-down.png","/fe/lol-parties/button-back-arrow-disabled.png","/fe/lol-uikit/sfx-uikit-button-gold-click.ogg","/fe/lol-uikit/sfx-uikit-button-gold-hover.ogg",["helper",["action"],[["get",[null]],"cancelFlow"],null],["get",["isGameModeSelectionEnabled"]]]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-vertical-line"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","lobby-header-description"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-detail"],["flush-element"],["append",["unknown",["mapNameShorthand"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-detail"],["flush-element"],["append",["unknown",["queueName"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-detail"],["flush-element"],["append",["unknown",["pickTypeName"]],false],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","lobby-header-tooltip"],["flush-element"],["text","\\n    "],["append",["helper",["v2-point-eligibility"],null,[["selected","mapBackgroundClass","mapName","queueName","pickTypeName"],[["get",["selected"]],["get",["mapBackgroundClass"]],["get",["mapName"]],["get",["queueName"]],["get",["pickTypeName"]]]]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","lobby-header-buttons-container"],["flush-element"],["text","\\n    "],["append",["helper",["social-leaderboard-button"],null,[["selected","queueType","currentPlayer"],[["get",["selected"]],["get",["selected","queue","type"]],["get",["currentPlayer"]]]]],false],["text","\\n"],["block",["if"],[["get",["lobbiesService","isOpenPartyEnabled"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["open-party-toggle"],null,[["showingState"],[["get",["showingState"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(2),
      i = n(o),
      s = a(0),
      l = a(1),
      r = n(l),
      c = a(5),
      m = n(c);
    a(497);
    var d = a(12);
    const p = s.EmberAddons.EmberLifeline.RunMixin;
    e.exports = s.Ember.Component.extend(p, r.default, m.default, {
      layout: a(498),
      classNames: ['v2-lobby-root-component'],
      classNameBindings: ['willAnimate:hidden'],
      queues: null,
      selected: null,
      showingState: null,
      lobbiesService: s.Ember.inject.service('lobbies'),
      gameflowService: s.Ember.inject.service('gameflow'),
      chatService: s.Ember.inject.service('chat'),
      partySettings: s.Ember.inject.service('partySettings'),
      matchmakingService: s.Ember.inject.service('matchmaking'),
      partyId: s.Ember.computed.alias('lobbiesService.partyId'),
      isShowingParty: s.Ember.computed.alias('showingState.isShowingParty'),
      inParty: s.Ember.computed.and('lobbiesService.inLobby', 'isShowingParty'),
      otherPartyMembers: s.Ember.computed.alias(
        'lobbiesService.otherCurrentPartyMembers',
      ),
      currentPartyMembers: s.Ember.computed.alias(
        'lobbiesService.currentPartyMembers',
      ),
      maxTeamSize: s.Ember.computed.alias('lobbiesService.maxTeamSize'),
      canStartMatchmaking: s.Ember.computed.alias(
        'lobbiesService.canStartMatchmaking',
      ),
      isSearching: s.Ember.computed.alias('matchmakingService.isSearching'),
      isMatchFound: s.Ember.computed.alias('matchmakingService.isMatchFound'),
      isInQueue: s.Ember.computed.or('isSearching', 'isMatchFound'),
      isCurrentPlayerPartyLeader: s.Ember.computed.alias(
        'lobbiesService.isCurrentPlayerPartyLeader',
      ),
      currentPartyLeader: s.Ember.computed.alias(
        'lobbiesService.currentPartyLeader',
      ),
      chatConversationId: s.Ember.computed.alias(
        'lobbiesService.chatConversationId',
      ),
      currentPartyIsFull: s.Ember.computed.alias(
        'lobbiesService.currentPartyIsFull',
      ),
      currentPlayerCanInvite: s.Ember.computed.alias(
        'lobbiesService.currentPlayerCanInvite',
      ),
      autoFillEligible: s.Ember.computed.alias(
        'currentPlayer.autoFillEligible',
      ),
      buttonsDisabled: s.Ember.computed.or(
        'matchmakingService.isSearching',
        'matchmakingService.isMatchFound',
      ),
      buttonsEnabled: s.Ember.computed.not('buttonsDisabled'),
      currentPlayer: s.Ember.computed.alias('lobbiesService.currentPlayer'),
      currentPlayerHasInvitePrivileges: s.Ember.computed.alias(
        'currentPlayer.allowedInviteOthers',
      ),
      primaryPosition: s.Ember.computed.alias(
        'currentPlayer.firstPositionPreference',
      ),
      secondaryPosition: s.Ember.computed.alias(
        'currentPlayer.secondPositionPreference',
      ),
      challengesService: s.Ember.inject.service('challenges'),
      localPlayerChallengesData: s.Ember.computed.alias(
        'challengesService.localPlayerChallengesData',
      ),
      animationsEnabled: s.Ember.computed.alias(
        'partySettings.largeAreaAnimationsEnabled',
      ),
      willAnimate: s.Ember.computed(
        'animationsEnabled',
        'prevPartyId',
        'partyId',
        'isShowingParty',
        function () {
          const e = this.get('animationsEnabled'),
            t =
              !this.get('prevPartyId') ||
              this.get('prevPartyId') !== this.get('partyId'),
            a = this.get('isShowingParty');
          return e && t && a;
        },
      ),
      positionSelectorOverlayPrimaryVisible: !1,
      positionSelectorOverlaySecondaryVisible: !1,
      animationObserver: s.Ember.on(
        'didInsertElement',
        s.Ember.observer('willAnimate', function () {
          this.get('willAnimate') &&
            (this.set('introAnimationComplete', !1),
            this.runTask(() => {
              this._startAnimations();
            }, 100));
        }),
      ),
      _startAnimations() {
        const e = this.element.querySelectorAll(
            '.lobby-banner > lol-regalia-parties-v2-element',
          ),
          t = this.element.querySelectorAll('.lobby-banner-contents'),
          a = this.element.querySelectorAll('.invite-button-container'),
          n = this.element.querySelector('.footer-container'),
          o = this.element.querySelector(
            '.lobby-footer-notifications-container',
          ),
          i = this.element.querySelector('#lottie-intro-anim'),
          l = this.element.querySelector('#player-banner-gem-intro'),
          r = new s.gsap.TimelineMax({ paused: !0 });
        r.add('start', `+=0.1`),
          r.add(() => {
            this.set('prevPartyId', this.get('partyId'));
          }, 'start'),
          r.add(() => {
            this.set('introAnimationComplete', !0);
          }, 'start+=2.5'),
          i &&
            r.add(() => {
              i.animation.play();
            }, 'start+=0.6'),
          l &&
            r.add(() => {
              l.play();
            }, 'start+=0.3'),
          e &&
            e.forEach((e) => {
              r.add(() => {
                e.setAttribute('hide-crest', !0),
                  e.setAttribute('hide-banner', !0);
              }, 'start'),
                r.add(() => {
                  e.removeAttribute('hide-crest'),
                    e.removeAttribute('hide-banner'),
                    e.setAttribute('animations', !0),
                    e.setAttribute('show-intro', !0);
                }, 'start+=0.7');
            }),
          t &&
            t.forEach((e) => {
              r.fromTo(e, 0.2, { opacity: 0 }, { opacity: 1 }, 'start+=0.7');
            }),
          a &&
            a.forEach((e) => {
              r.fromTo(e, 0.2, { opacity: 0 }, { opacity: 1 }, 'start+=0.7');
            }),
          n && r.fromTo(n, 0.2, { opacity: 0 }, { opacity: 1 }, 'start+=1.2'),
          o && r.fromTo(o, 0.2, { opacity: 0 }, { opacity: 1 }, 'start+=1.2'),
          r.play();
      },
      partyInvitesAllowed: s.Ember.computed(
        'currentPlayerCanInvite',
        'currentPartyIsFull',
        'buttonsEnabled',
        function () {
          const e = this.get('buttonsEnabled'),
            t = this.get('currentPlayerCanInvite'),
            a = this.get('currentPartyIsFull');
          return e && t && !a;
        },
      ),
      playerPlaceholders: s.Ember.computed(
        'currentPartyMembers.[]',
        'otherPartyMembers.[]',
        'maxTeamSize',
        function () {
          const e = this.get('currentPartyMembers.length') || 0;
          if (0 === e) return s.Ember.A();
          let t = this.get('maxTeamSize');
          t || (t = 0);
          const a = this.get('otherPartyMembers.length') || 0,
            n = Math.max(t - a - 1, 0),
            o = [];
          for (let e = 0; e < n; e++)
            o.push(s.Ember.Object.create({ isPlaceholder: !0 }));
          return s.Ember.A(o);
        },
      ),
      observeInvitePrivilegesChange: s.Ember.observer(
        'currentPlayerHasInvitePrivileges',
        function () {
          s.Ember.run.once(this, this._handleInviteGrantedRevoked);
        },
      ),
      _handleInviteGrantedRevoked: function () {
        const e = this.get('currentPlayerHasInvitePrivileges'),
          t = this.get('_previousCanInvite'),
          a = this.get('isCurrentPlayerPartyLeader');
        t !== e &&
          null !== t &&
          (!e || this.get('_hasPlayedInviteGranted') || a
            ? !e &&
              this.get('_hasPlayedInviteGranted') &&
              !a &&
              (this.get('chatService').sendChatMessage(
                this.get(
                  'tra.parties_invite_privileges_chat_notification_revoked',
                ),
                this.get('chatConversationId'),
              ),
              this.playSound('/fe/lol-parties/sfx-lobby-notif-revoke.ogg'),
              this.set('_hasPlayedInviteGranted', !1))
            : (this.playSound(
                '/fe/lol-parties/sfx-lobby-notif-invite-granted.ogg',
              ),
              this.get('chatService').sendChatMessage(
                this.get(
                  'tra.parties_invite_privileges_chat_notification_granted',
                ),
                this.get('chatConversationId'),
              ),
              this.set('_hasPlayedInviteGranted', !0))),
          this.set('_previousCanInvite', e);
      },
      observePartyLeaderChange: s.Ember.observer(
        'isCurrentPlayerPartyLeader',
        function () {
          s.Ember.run.once(this, this._handlePartyLeaderGranted);
        },
      ),
      _handlePartyLeaderGranted: function () {
        const e = this.get('currentPartyLeader.summonerId'),
          t = this.get('currentPlayer.summonerId'),
          a = this.get('isCurrentPlayerPartyLeader'),
          n = this.get('_previousPartyLeaderId');
        a && n !== t && !!n && !this.get('_hasPlayedLeaderSound')
          ? (this.get('chatService').sendChatMessage(
              this.get('tra.parties_promoted_to_leader_chat_notification'),
              this.get('chatConversationId'),
            ),
            this.playSound(
              '/fe/lol-parties/sfx-lobby-notif-captain-granted.ogg',
            ),
            this.set('_hasPlayedLeaderSound', !0))
          : !a && this.set('_hasPlayedLeaderSound', !1),
          this.set('_previousPartyLeaderId', e);
      },
      initializeObservedObjects: s.Ember.on('didInsertElement', function () {
        this.get('matchmakingService.isSearching'),
          this.get('matchmakingService.isLowPriorityQueue'),
          this.get('matchmakingService.hasLowPriorityPenaltyTimeRemaining'),
          this.autoFillEligibleObserver();
      }),
      autoFillEligibleObserver: s.Ember.observer(
        'autoFillEligible',
        function () {
          s.Ember.run.once(this, function () {
            !this.get('_showingAutofillModal') &&
              this.get('autoFillEligible') &&
              (this.set('_showingAutofillModal', !0),
              this.get('partySettings')
                .shouldHideAutofillModal()
                .then((e) => {
                  e
                    ? this.set('_showingAutofillModal', !1)
                    : this.showAutoFillSettingModal();
                }));
          });
        },
      ),
      showAutoFillSettingModal: function () {
        const e = s.ComponentFactory.create('AutofillSettingComponent', {
            partySettings: this.get('partySettings'),
          }),
          t = e.domNode,
          a = this.get('ModalManager').add({
            type: 'DialogAlert',
            data: {
              contents: t,
              okText: this.get('tra.parties_autofill_settings_dialog_confirm'),
            },
          });
        return (
          a.domNode.classList.add('parties-autofill-eligible-modal'),
          a.okPromise.then(() => {
            this.get('partySettings').set('sessionHideAutofillModal', !0),
              this.set('_showingAutofillModal', !1);
          }),
          a
        );
      },
      lowPriorityNotificationObserver: s.Ember.observer(
        'matchmakingService.isSearching',
        function () {
          const e = this.get('selfLowPriorityModal');
          this.get('matchmakingService.isSearching') &&
          this.get('matchmakingService.isLowPriorityQueue')
            ? this.showLowPriorityNotification()
            : e &&
              (this.removeModal(e), this.set('selfLowPriorityModal', void 0));
        },
      ),
      lowPriorityNotificationRemovalObserver: s.Ember.observer(
        'matchmakingService.hasLowPriorityPenaltyTimeRemaining',
        function () {
          const e = this.get('selfLowPriorityModal'),
            t = this.get(
              'matchmakingService.hasLowPriorityPenaltyTimeRemaining',
            );
          e && !t && this.removeModal(e);
        },
      ),
      showLowPriorityNotification: function () {
        this.get('matchmakingService.isQueueDelay') &&
        this.get('isCurrentPlayerPartyLeader')
          ? this.showQueueDelayToast()
          : this.get('matchmakingService.isSelfInLowPriorityQueue')
          ? !this.get('selfLowPriorityModal') && this.showSelfLowPriorityModal()
          : 0 <
              this.get(
                'matchmakingService.lowPriorityData.penaltyTimeRemaining',
              ) && this.showLowPriorityToast();
      },
      showLowPriorityToast: function () {
        const e = this.get(
          'matchmakingService.lowPriorityData.penalizedSummonerIds',
        );
        if (e && !(1 > e.length)) {
          const t = e.map((e) => this.get('summonerService').getSummoner(e));
          i.default.all(t).then((e) => {
            const t = s.ComponentFactory.create(
              'LowPriorityQueueToastComponent',
              { penalizedPlayerNames: s.lodash.map(e, 'displayName') },
            );
            this.get('ToastManager').add({
              type: 'DialogToast',
              data: { contents: t.domNode },
              onRemove: () => t.onRemove(),
            });
          });
        }
      },
      showSelfLowPriorityModal: function () {
        const e = s.ComponentFactory.create('LowPriorityQueueModalComponent'),
          t = this.showModal({
            type: 'DialogAlert',
            data: {
              contents: e.domNode,
              okText: this.get('tra.low_priority_queue_modal_leave_queue'),
              onOk: () => {
                this.get('lobbiesService').cancelMatchmakingSearch(),
                  this.set('selfLowPriorityModal', void 0),
                  e.onRemove();
              },
            },
          });
        this.set('selfLowPriorityModal', t);
      },
      showQueueDelayToast: function () {
        const e = s.UIKit.getTemplateHelper(),
          t = e.contentBlockTooltip(
            this.get('tra.low_priority_queue_delay_warning_header'),
            this.get('tra.low_priority_queue_delay_warning_body'),
            'notification',
          );
        this.get('ToastManager').add({
          type: 'DialogToast',
          data: { contents: t },
        });
      },
      _setPositionPreferences(e, t) {
        const a = this.get('primaryPosition'),
          n = this.get('secondaryPosition');
        let o = e === d.POSITION_ROLES.PRIMARY ? t : a,
          i = e === d.POSITION_ROLES.SECONDARY ? t : n;
        if (o !== a || i !== n)
          return (
            (a === t || n === t) &&
              ((o = n),
              (i = n === d.POSITIONS.FILL ? d.POSITIONS.UNSELECTED : a)),
            this.get('lobbiesService').setPositionPreferences({
              firstPreference: o,
              secondPreference: i,
            })
          );
      },
      actions: {
        showInviteModal: function () {
          this.sendAction('showInviteModal');
        },
        openOverlay(e, t) {
          e === d.POSITION_ROLES.PRIMARY
            ? (this.set('positionSelectorOverlayPrimaryPosition', t),
              this.set('positionSelectorOverlayPrimaryVisible', !0))
            : e === d.POSITION_ROLES.SECONDARY &&
              (this.set('positionSelectorOverlaySecondaryPosition', t),
              this.set('positionSelectorOverlaySecondaryVisible', !0));
        },
        closeOverlay(e) {
          e === d.POSITION_ROLES.PRIMARY
            ? this.set('positionSelectorOverlayPrimaryVisible', !1)
            : e === d.POSITION_ROLES.SECONDARY &&
              this.set('positionSelectorOverlaySecondaryVisible', !1);
        },
        setPositionPreferences(e, t) {
          this._setPositionPreferences(e, t);
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'D+jdDlfF',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\parties-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\parties-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\parties-root-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["inParty"]]],null,6]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["v2-position-selector-modal"],null,[["animationsEnabled","childrenPositionStyle","selectingOrdinal","primaryPosition","secondaryPosition","openOverlay","closeOverlay","setPositionPreferences"],[["get",["animationsEnabled"]],["get",["positionSelectorOverlaySecondaryPosition"]],"SECONDARY",["get",["primaryPosition"]],["get",["secondaryPosition"]],["helper",["action"],[["get",[null]],"openOverlay"],null],["helper",["action"],[["get",[null]],"closeOverlay"],null],["helper",["action"],[["get",[null]],"setPositionPreferences"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["v2-position-selector-modal"],null,[["animationsEnabled","childrenPositionStyle","selectingOrdinal","primaryPosition","secondaryPosition","openOverlay","closeOverlay","setPositionPreferences"],[["get",["animationsEnabled"]],["get",["positionSelectorOverlayPrimaryPosition"]],"PRIMARY",["get",["primaryPosition"]],["get",["secondaryPosition"]],["helper",["action"],[["get",[null]],"openOverlay"],null],["helper",["action"],[["get",[null]],"closeOverlay"],null],["helper",["action"],[["get",[null]],"setPositionPreferences"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["v2-banner-placeholder"],null,[["placeholder","isInQueue","partyInvitesAllowed","showInviteModal"],[["get",["placeholder"]],["get",["isInQueue"]],["get",["partyInvitesAllowed"]],"showInviteModal"]]],false],["text","\\n"]],"locals":["placeholder"]},{"statements":[["text","      "],["append",["helper",["v2-banner"],null,[["selected","localPlayerChallengesData","member","puuid","willAnimate","introAnimationComplete","summonerId"],[["get",["selected"]],["get",["localPlayerChallengesData"]],["get",["member"]],["get",["member","puuid"]],["get",["willAnimate"]],["get",["introAnimationComplete"]],["get",["member","summonerId"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","      "],["append",["helper",["v2-banner"],null,[["selected","member","puuid","localPlayerChallengesData","isLocalPlayer","willAnimate","summonerId"],[["get",["selected"]],["get",["currentPlayer"]],["get",["currentPlayer","puuid"]],["get",["localPlayerChallengesData"]],true,["get",["willAnimate"]],["get",["currentPlayer","summonerId"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","party-members-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["currentPlayer"]]],null,4],["block",["each"],[["get",["otherPartyMembers"]]],null,3],["block",["each"],[["get",["playerPlaceholders"]]],null,2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","lobby-header-overlay"],["flush-element"],["close-element"],["text","\\n"],["block",["lower-section"],null,[["currentPlayer","partiesV2Enabled"],[["get",["currentPlayer"]],["get",["partiesV2Enabled"]]]],5],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["footer-container ",["helper",["if"],[["get",["willAnimate"]],"hidden"],null]]]],["flush-element"],["text","\\n    "],["append",["helper",["v2-footer"],null,[["showingState","selected","currentPlayerCanInvite","openOverlay","closeOverlay"],[["get",["showingState"]],["get",["selected"]],["get",["currentPlayerCanInvite"]],["helper",["action"],[["get",[null]],"openOverlay"],null],["helper",["action"],[["get",[null]],"closeOverlay"],null]]]],false],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","navbar-blur"],["flush-element"],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-footer-notifications-container ",["helper",["if"],[["get",["willAnimate"]],"hidden"],null]]]],["flush-element"],["text","\\n    "],["append",["unknown",["v2-footer-notifications"]],false],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","lobby-intro-animation-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-lottie",[]],["static-attr","id","lottie-intro-anim"],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-party.json"],["static-attr","autoplay","false"],["flush-element"],["close-element"],["text","\\n    "],["open-element","lol-uikit-video",[]],["static-attr","id","player-banner-gem-intro"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","src","/fe/lol-static-assets/videos/lobby-crystal-intro-player.webm"],["static-attr","preload",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["positionSelectorOverlayPrimaryVisible"]]],null,1],["block",["if"],[["get",["positionSelectorOverlaySecondaryVisible"]]],null,0]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(1),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    a(500);
    const s = n.EmberAddons.EmberLifeline.RunMixin;
    e.exports = n.Ember.Component.extend(s, i.default, {
      layout: a(501),
      classNames: ['v2-player-management-button-component'],
      tagName: 'button',
      classNameBindings: ['typeClass'],
      disabled: !1,
      disabledAfterClickDelay: 0,
      typeClass: n.Ember.computed('type', function () {
        return 'v2-player-management-button-' + this.get('type');
      }),
      onDidInsertElement: n.Ember.on('didInsertElement', function () {
        this.addHoverClickSound(
          this.element,
          '/fe/lol-uikit/sfx-uikit-button-circlegold-hover.ogg',
          '/fe/lol-parties/sfx-lobby-button-banner-click.ogg',
        );
      }),
      enableInviteButton: function (e = 0) {
        this.runTask(() => this.set('disabled', !1), e);
      },
      click: function () {
        this.get('disabled') ||
          (this.sendAction('action'),
          this.set('disabled', !0),
          this.enableInviteButton(this.get('disabledAfterClickDelay')));
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'iQLPAjpZ',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-management-button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-management-button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-management-button-component\\\\index.js\\" "],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["yield","default"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(22),
      s = n(i),
      l = a(7),
      r = a(5),
      c = n(r),
      m = a(1),
      d = n(m);
    a(503);
    const p = (0, o.emberDataBinding)({
      Ember: o.Ember,
      websocket: (0, o.getProvider)().getSocket(),
      logPrefix: 'parties:player-banner:component',
      basePaths: { summoner: '/lol-summoner', chat: '/lol-chat' },
    });
    e.exports = o.Ember.Component.extend(p, c.default, d.default, {
      layout: a(504),
      classNames: ['v2-player-party-controls'],
      classNameBindings: ['isMe:main-player-controls:other-player-controls'],
      isLeader: !1,
      isMe: !1,
      chatService: o.Ember.inject.service('chat'),
      lobbiesService: o.Ember.inject.service('lobbies'),
      matchmakingService: o.Ember.inject.service('matchmaking'),
      partySettingsService: o.Ember.inject.service('party-settings'),
      eligibilitiesEntity: s.default,
      restrictions: o.Ember.computed.alias(
        'eligibilitiesEntity.playerRestrictions',
      ),
      observedRestrictions: [],
      memberRestrictions: null,
      contextMenuManager: o.UIKit.getContextMenuManager(),
      animationsEnabled: o.Ember.computed.alias(
        'partySettingsService.bannerAnimationsEnabled',
      ),
      isPlaceholder: o.Ember.computed.not('member'),
      isNotPlaceholder: o.Ember.computed.not('isPlaceholder'),
      currentTeamIsFull: o.Ember.computed.alias(
        'lobbiesService.currentTeamIsFull',
      ),
      summonerId: o.Ember.computed.alias('member.summonerId'),
      showPartyOwnerTools: o.Ember.computed.and(
        'currentPlayerIsLeader',
        'isNotMe',
        'notQueued',
      ),
      isNotMe: o.Ember.computed.not('isMe'),
      showGhostedBanner: o.Ember.computed.alias('member.showGhostedBanner'),
      shouldShowGhostedBanner: o.Ember.computed.and(
        'isNotPlaceholder',
        'isNotMe',
        'showGhostedBanner',
      ),
      hasInvitePrivileges: o.Ember.computed.alias('member.allowedInviteOthers'),
      currentPlayerIsLeader: o.Ember.computed.alias(
        'lobbiesService.isCurrentPlayerPartyLeader',
      ),
      currentPlayerIsNotLeader: o.Ember.computed.not('currentPlayerIsLeader'),
      isMatchNotFound: o.Ember.computed.alias(
        'matchmakingService.isMatchNotFound',
      ),
      isNotSearching: o.Ember.computed.alias(
        'matchmakingService.isNotSearching',
      ),
      notQueued: o.Ember.computed.and('isMatchNotFound', 'isNotSearching'),
      showPositionSelector: o.Ember.computed(
        'member',
        'lobbiesService.showPositionSelector',
        function () {
          return (
            !!this.get('member') &&
            !!this.get('lobbiesService.showPositionSelector')
          );
        },
      ),
      groupMissingTokenRestrictions: function (e) {
        return this.get('eligibilitiesEntity').groupMissingTokenRestrictions(e);
      },
      _updateMemberRestrictions: function () {
        const e = this.get('restrictions'),
          t = this.get('member.summonerId'),
          a = o.Ember.A();
        if (o.Ember.isArray(e)) {
          const n = this.groupMissingTokenRestrictions(e);
          for (let e = 0; e < n.length; e++) {
            const o = n[e];
            -1 !== o.summonerIds.indexOf(t) && a.pushObject(o);
          }
        }
        this.set('memberRestrictions', a);
      },
      _updateRestrictionObservers: function () {
        const e = [];
        this.get('observedRestrictions').forEach((e) => {
          e.removeObserver(
            'restrictionArgs.playerMinLevelRestriction',
            this,
            this._updateMemberRestrictions,
          );
        }),
          this.get('restrictions') &&
            this.get('restrictions').forEach((t) => {
              t.addObserver(
                'restrictionArgs.playerMinLevelRestriction',
                this,
                this._updateMemberRestrictions,
              ),
                e.push(t);
            }),
          this.set('observedRestrictions', e);
      },
      observeRestrictionArgs: o.Ember.on(
        'init',
        o.Ember.observer(
          'restrictions',
          'restrictions.@each.restrictionCode',
          'restrictions.@each.summonerIds',
          'member.summonerId',
          function () {
            this._updateRestrictionObservers(),
              this._updateMemberRestrictions();
          },
        ),
      ),
      restrictionLeaderClass: o.Ember.computed(
        'currentPlayerIsLeader',
        function () {
          return this.get('currentPlayerIsLeader') ? 'leader' : '';
        },
      ),
      hasMemberRestrictions: o.Ember.computed.gt(
        'memberRestrictions.length',
        0,
      ),
      shouldShowRestrictions: o.Ember.computed.and(
        'member',
        'hasMemberRestrictions',
      ),
      restrictionToolTipText: o.Ember.computed(
        'tra.ready',
        'memberRestrictions.@each.restrictionCode',
        'isMe',
        function () {
          const e = this.get('memberRestrictions'),
            t = o.Ember.A(),
            a = this.get('isMe');
          let n = !1;
          for (let o = 0; o < e.length; o++) {
            const i = e[o],
              r = i.restrictionCode;
            let c = i.restrictionArgs;
            if (l.TENCENT_MINOR_RESTRICTIONS.includes(r))
              if (n) continue;
              else n = !0;
            let m = `game_select_queue_restriction_player_${r.toLowerCase()}`;
            if ('MissingToken' === r) {
              const e = a ? 'self' : 'player';
              m = `game_select_queue_restriction_${e}_${r.toLowerCase()}`;
            } else if ('PlayerRankSoloOnlyRestriction' === r) {
              const e = s.default.getLocInfoForPlayerRankSoloOnlyRestriction(i);
              (m = e.key), (c = e.args);
            }
            t.pushObject(this.get('tra').formatString(m, c));
          }
          return t;
        },
      ),
      tooltipConfig: {
        targetAnchor: { x: 'center', y: 'bottom' },
        tooltipAnchor: { x: 'center', y: 'top' },
      },
      observeCurrentPlayerIsLeader: o.Ember.observer(
        'currentPlayerIsLeader',
        function () {
          o.Ember.run.once(this, this._onCurrentPlayerIsLeader);
        },
      ),
      _onCurrentPlayerIsLeader: function () {
        this.set('_transferringLeadership', !1);
      },
      isFriended: o.Ember.computed(
        'member',
        'member.summonerId',
        'chatService.friends.[]',
        function () {
          return this.get('chatService').isFriend(
            this.get('member.summonerId'),
          );
        },
      ),
      contextMenuModel: o.Ember.computed(
        'showPartyOwnerTools',
        'hasInvitePrivileges',
        'isMe',
        'member',
        'isFriended',
        'tra.ready',
        'tra.context_menu_promote_to_leader',
        'tra.context_menu_kick',
        'tra.context_menu_friend_request',
        'tra.context_menu_revoke_invite_privilege',
        'tra.context_menu_grant_invite_privilege',
        function () {
          const e = this.get('isFriended'),
            t = this.get('showPartyOwnerTools') || !e;
          return !this.get('isMe') && this.get('member') && t
            ? [
                {
                  action: function () {
                    this.send('promoteToOwner');
                  },
                  class: 'promote',
                  target: this,
                  label: this.get('tra.context_menu_promote_to_leader'),
                },
                {
                  action: function () {
                    this.send('kick');
                  },
                  class: 'kick',
                  target: this,
                  label: this.get('tra.context_menu_kick'),
                },
                {
                  action: function () {
                    this.send('sendFriendRequest');
                  },
                  class: 'add-friend',
                  target: this,
                  label: this.get('tra.context_menu_friend_request'),
                  hidden: e,
                },
                {
                  action: function () {
                    this.send('toggleInvitePrivilege');
                  },
                  class: this.get('hasInvitePrivileges')
                    ? 'revoke-invite'
                    : 'grant-invite',
                  target: this,
                  label: this.get('hasInvitePrivileges')
                    ? this.get('tra.context_menu_revoke_invite_privilege')
                    : this.get('tra.context_menu_grant_invite_privilege'),
                },
              ]
            : null;
        },
      ),
      promotePlayer: function () {
        const e = this.get('member');
        if (!e || !e.summonerId)
          throw new Error('Attempting to act on invalid party member: ' + e);
        this.set('_transferringLeadership', !0),
          this.get('lobbiesService').transferLeadershipToPlayer(e.summonerId);
      },
      blockPlayer: function (e) {
        this.get('api.chat').post('/v1/blocked-players', e);
      },
      sendFriendRequest: function (e) {
        this.get('api.chat').post('/v1/friend-requests', e);
      },
      actions: {
        openCaptainMenu: function () {
          this.get('contextMenuModel') &&
            (this.contextMenuManager.setMenuItems(this.get('contextMenuModel')),
            this.contextMenuManager.openAtEvent(event));
        },
        sendFriendRequest: function () {
          if (this.get('member')) {
            const e = {
              direction: 'out',
              name: this.get('member.summonerName'),
            };
            this.sendFriendRequest(e), this.set('isFriended', !0);
            const t = this.get('tra').formatString(
              'context_menu_friend_request_sent_to',
              { summonerName: this.get('member.summonerName') },
            );
            this.showToast(t);
          }
        },
        kick: function () {
          if (!this.get('member'))
            throw new ReferenceError(
              'game-select-lobby-panel-teams-player component must have a member',
            );
          const e = this.get('tra').formatString(
              'lobby_kick_confirmation_text',
              { summonerName: this.get('member.summonerName') },
            ),
            t = this.$(`<lol-uikit-content-block type="dialog-small">
          <p>${e}</p>
        </lol-uikit-content-block>`),
            a = this.get('member.summonerId');
          if (
            this.get('currentPlayerIsLeader') &&
            !this.get('_transferringLeadership')
          ) {
            const e = this.showModal({
              type: 'DialogConfirm',
              data: {
                contents: t,
                acceptText: this.get('tra.parties_button_kick'),
                declineText: this.get('tra.parties_button_cancel'),
                onAccept: () => {
                  this.get('lobbiesService').removePlayerFromParty(a);
                },
              },
            });
            e.domNode.classList.add('parties-kick-player-modal');
          }
        },
        toggleInvitePrivilege: function () {
          const e = this.get('member'),
            t = this.get('currentPlayerIsLeader');
          if (
            !this.get('_transferringLeadership') &&
            t &&
            e &&
            !this.get('isMe')
          ) {
            const t = e.allowedInviteOthers ? 'revoke-invite' : 'grant-invite',
              a = this.get('member.summonerId');
            this.get('lobbiesService').sendInvitePrivilegeAction(a, t);
          }
        },
        promoteToOwner: function () {
          this.get('member') && this.promotePlayer();
        },
        block: function () {
          if (this.get('member')) {
            const e = { summonerId: this.get('member.summonerId') };
            this.blockPlayer(e);
          }
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'W8wxfmPJ',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-party-controls-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-party-controls-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-party-controls-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isNotMe"]]],null,6],["text","\\n"],["open-element","div",[]],["static-attr","class","lol-not-ready-loader"],["flush-element"],["text","\\n"],["block",["if"],[["get",["shouldShowGhostedBanner"]]],null,3],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldShowRestrictions"]]],null,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["open-element","p",[]],["flush-element"],["append",["get",["restriction"]],false],["close-element"],["text","\\n"]],"locals":["restriction"]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n"],["block",["each"],[["get",["restrictionToolTipText"]]],null,0],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-lobby-restrictions ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],1],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","captain_controls_tooltip"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["v2-player-management-button"],null,[["type","action"],["options","openCaptainMenu"]],4]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","player-party-tools"],["flush-element"],["text","\\n    "],["comment"," options menu button is for party owners only "],["text","\\n"],["block",["if"],[["get",["showPartyOwnerTools"]]],null,5],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(6),
      s = n(i),
      l = a(1),
      r = n(l);
    a(506),
      (e.exports = o.Ember.Component.extend(r.default, {
        layout: a(507),
        classNames: ['v2-point-eligibility-component'],
        classNameBindings: ['isCustomGame:parties-point-eligibility-custom'],
        platformConfig: s.default,
        platformEternalsEnabled: o.Ember.computed.alias(
          'platformConfig.eternalsEnabled',
        ),
        lobbyChallengesEnabled: o.Ember.computed.alias(
          'platformConfig.lobbyChallengesEnabled',
        ),
        eternalsService: o.Ember.inject.service('eternals'),
        challengesService: o.Ember.inject.service('challenges'),
        isCustomGame: !1,
        tooltipConfig: o.Ember.computed(
          'isCustomGame',
          'tooltipConfigCustom',
          'tooltipConfigParties',
          function () {
            return this.get('isCustomGame')
              ? this.get('tooltipConfigCustom')
              : this.get('tooltipConfigParties');
          },
        ),
        tooltipConfigParties: {
          targetAnchor: { x: 'center', y: 'bottom' },
          tooltipAnchor: { x: 'center', y: 'top' },
          offset: { x: 0, y: 5 },
        },
        tooltipConfigCustom: {
          targetAnchor: { x: 'right', y: 'center' },
          tooltipAnchor: { x: 'left', y: 'center' },
          offset: { x: 5, y: 0 },
        },
        teamSize: o.Ember.computed('selected.maxPlaying', function () {
          const e = this.get('selected.maxPlaying');
          return this.get('tra').formatString('game_select_team_size', {
            size: e,
          });
        }),
        xpEnabled: o.Ember.computed.alias(
          'selected.queue.queueRewards.isXpEnabled',
        ),
        xpDisabledClass: o.Ember.computed('xpEnabled', function () {
          const e = this.get('xpEnabled');
          return e ? '' : 'disabled';
        }),
        championMasteryEnabled: o.Ember.computed.alias(
          'selected.queue.queueRewards.isChampionPointsEnabled',
        ),
        championMasteryDisabledClass: o.Ember.computed(
          'championMasteryEnabled',
          function () {
            const e = this.get('championMasteryEnabled');
            return e ? '' : 'disabled';
          },
        ),
        eternalsEnabledForQueue: o.Ember.computed(
          'eternalsService.enabledQueues',
          'selected.queue.id',
          function () {
            const e = this.get('selected.queue.id'),
              t = this.get('eternalsService.enabledQueues');
            return !!(t && null !== t) && t.includes(e);
          },
        ),
        eternalsDisabledClass: o.Ember.computed(
          'eternalsEnabledForQueue',
          function () {
            const e = this.get('eternalsEnabledForQueue');
            return e ? '' : 'disabled';
          },
        ),
        challengesEnabledForQueue: o.Ember.computed(
          'challengesService.enabledQueues',
          'selected.queue.id',
          function () {
            const e = this.get('selected.queue.id'),
              t = this.get('challengesService.enabledQueues');
            return !!t && t.includes(e);
          },
        ),
        challengesDisabledClass: o.Ember.computed(
          'challengesEnabledForQueue',
          function () {
            const e = this.get('challengesEnabledForQueue');
            return e ? '' : 'disabled';
          },
        ),
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'uACrns1T',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\point-eligibility-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\point-eligibility-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\point-eligibility-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-content"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","point-eligibility-icon"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],2],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-challenges ",["unknown",["challengesDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-challenges-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","challenges_point_eligibility_tooltip_challenges"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-eternals ",["unknown",["eternalsDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-eternals-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_eternals"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","lol-uikit-content-block",[]],["static-attr","padding","medium"],["static-attr","class","lobby-point-eligibility-tooltip-content"],["flush-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header"],["flush-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header-title"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header-map"],["flush-element"],["append",["unknown",["mapName"]],false],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header-mode"],["flush-element"],["append",["unknown",["queueName"]],false],["text"," "],["append",["unknown",["pickTypeName"]],false],["text"," ("],["append",["unknown",["teamSize"]],false],["text",")"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-divider-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-divider"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","h6",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-title"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","parties_point_eligibility_tooltip_title"]],false],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","ul",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-list"],["flush-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-experience ",["unknown",["xpDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-experience-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_experience"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-mastery ",["unknown",["championMasteryDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-mastery-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_masteries"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["platformEternalsEnabled"]]],null,1],["text","\\n"],["block",["if"],[["get",["lobbyChallengesEnabled"]]],null,0],["text","    "],["close-element"],["text","\\n\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(12);
    a(509);
    e.exports = n.Ember.Component.extend({
      layout: a(510),
      classNames: ['v2-position-selector-component'],
      isInQueue: !1,
      lobbiesService: n.Ember.inject.service('lobbies'),
      partySettingsService: n.Ember.inject.service('party-settings'),
      currentTeamIsFull: n.Ember.computed.alias(
        'lobbiesService.currentTeamIsFull',
      ),
      currentPartyMembers: n.Ember.computed.alias(
        'lobbiesService.currentPartyMembers',
      ),
      currentPartySize: n.Ember.computed.alias(
        'lobbiesService.currentPartySize',
      ),
      getPositionStyles(e) {
        const t = this.element.querySelector(`.position-selector-button.${e}`);
        if (!t) return '';
        const a = t.getBoundingClientRect(),
          n = a.top - 102,
          o = a.left + a.width / 2 - 356 / 2;
        return `position: absolute; top: ${n}px; left: ${o}px;`;
      },
      hideSecondaryPositionSelectorButton: n.Ember.computed(
        'currentTeamIsFull',
        'primaryPosition',
        'currentPartyMembers.[]',
        'currentPartySize',
        function () {
          const e = this.get('primaryPosition') === o.POSITIONS.FILL;
          return e || this.get('currentTeamIsFull');
        },
      ),
      isPrimaryDisabled: n.Ember.computed('isInQueue', function () {
        return this.get('isInQueue');
      }),
      isSecondaryDisabled: n.Ember.computed(
        'primaryPosition',
        'secondaryPosition',
        'isInQueue',
        function () {
          const e = this.get('primaryPosition'),
            t = this.get('secondaryPosition');
          return (
            (e === o.POSITIONS.UNSELECTED && t === o.POSITIONS.UNSELECTED) ||
            this.get('isInQueue')
          );
        },
      ),
      actions: {
        openOverlay(e) {
          const t = this.getPositionStyles(e);
          this.sendAction('openOverlay', e, t);
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'UtX+X2rQ',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","position-selector-buttons-container"],["flush-element"],["text","\\n  "],["append",["helper",["v2-position-selector-button"],null,[["ordinal","position","disabled","handleClick"],["PRIMARY",["get",["primaryPosition"]],["get",["isPrimaryDisabled"]],["helper",["action"],[["get",[null]],"openOverlay"],null]]]],false],["text","\\n  "],["append",["helper",["v2-position-selector-button"],null,[["ordinal","position","disabled","hidden","handleClick"],["SECONDARY",["get",["secondaryPosition"]],["get",["isSecondaryDisabled"]],["get",["hideSecondaryPositionSelectorButton"]],["helper",["action"],[["get",[null]],"openOverlay"],null]]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(512);
    var o = a(12);
    const i = [
      o.POSITIONS.TOP,
      o.POSITIONS.JUNGLE,
      o.POSITIONS.MIDDLE,
      o.POSITIONS.BOTTOM,
      o.POSITIONS.UTILITY,
    ];
    e.exports = n.Ember.Component.extend({
      layout: a(513),
      classNames: ['horizontal-options-showcase'],
      init() {
        this._super(...arguments),
          this.set(
            'positionOptions',
            i.map((e) => ({ position: e })),
          );
      },
      selectedPosition: n.Ember.computed(
        'selectingOrdinal',
        'primaryPosition',
        'secondaryPosition',
        function () {
          const e = this.get('selectingOrdinal');
          if (e === o.POSITION_ROLES.PRIMARY)
            return this.get('primaryPosition');
          return e === o.POSITION_ROLES.SECONDARY
            ? this.get('secondaryPosition')
            : null;
        },
      ),
      isPrimaryCentered: n.Ember.computed(
        'selectingOrdinal',
        'primaryPosition',
        'currentPartyIsFull',
        function () {
          return (
            this.get('currentPartyIsFull') ||
            (this.get('selectingOrdinal') === o.POSITION_ROLES.PRIMARY &&
              this.get('primaryPosition') === o.POSITIONS.FILL)
          );
        },
      ),
      isAnimatingIntroObserver: n.Ember.on(
        'didInsertElement',
        n.Ember.observer('isAnimatingIntro', function () {
          this.get('isAnimatingIntro') && this._startIntroAnimation();
        }),
      ),
      isAnimatingOutroObserver: n.Ember.on(
        'didInsertElement',
        n.Ember.observer('isAnimatingOutro', function () {
          this.get('isAnimatingOutro') && this._startOutroAnimation();
        }),
      ),
      _initIntroAnimation() {
        const e = this.element.querySelector('#lottie-intro-animation'),
          t = this.element.querySelectorAll(
            '.position-selector-option-container',
          ),
          a = this.element.querySelector(
            '.horizontal-options-showcase-content',
          ),
          o = new n.gsap.TimelineMax({ paused: !0 });
        o.add('start', `+=0`),
          e &&
            (o.add(() => {
              e.play();
            }, 'start'),
            o.fromTo(e, 0.1, { opacity: 0 }, { opacity: 1 }, 'start'),
            o.fromTo(e, 0.5, { opacity: 1 }, { opacity: 0 }, 'start+=0.1'),
            o.add(() => {
              e.stop();
            }, 'start+=0.7')),
          a && o.add(() => a.classList.add('no-overflow'), 'start');
        for (let e = 0; e < t.length; e++) {
          const a = t[e];
          o.fromTo(a, 0.12, { y: 25 }, { y: 0 }, `start+=${0.0175 * e + 0.03}`);
        }
        o.add(() => {
          this.sendAction('completeIntroAnimation');
        }, 'start+=0.7'),
          o.eventCallback('onComplete', () => {
            a.classList.remove('no-overflow');
          }),
          this.set('introAnimation', o);
      },
      _initOutroAnimation() {
        const e = this.element.querySelector('#outro-base'),
          t = this.element.querySelector('#outro-magic'),
          a = this.element.querySelector(
            '.horizontal-options-showcase-content',
          ),
          o = this.element.querySelector(
            '.horizontal-options-showcase-background',
          ),
          i = new n.gsap.TimelineMax({ paused: !0 });
        i.add('start', `+=0`),
          e &&
            i.add(() => {
              e.play();
            }, 'start'),
          t &&
            i.add(() => {
              t.play();
            }, 'start'),
          a && i.to(a, 0.2, { opacity: 0 }, 'start'),
          o && i.to(o, 0.2, { opacity: 0 }, 'start'),
          i.add(() => {
            e.pause(), t.pause(), this.sendAction('completeOutroAnimation');
          }, 'start+=0.5'),
          i.eventCallback('onComplete', () => {
            a.removeAttribute('style'), o.removeAttribute('style');
          }),
          this.set('outroAnimation', i);
      },
      _startIntroAnimation() {
        this.get('introAnimation') || this._initIntroAnimation();
        const e = this.get('introAnimation');
        e && e.restart();
      },
      _startOutroAnimation() {
        this.get('outroAnimation') || this._initOutroAnimation();
        const e = this.get('outroAnimation');
        e && e.restart();
      },
      actions: {
        selectPosition(e, t) {
          this.sendAction('selectPosition', e, t);
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'vfqcTcq5',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-horizontal-options-showcase\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-horizontal-options-showcase\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-horizontal-options-showcase\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","horizontal-options-showcase-background"],["flush-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","horizontal-options-showcase-content"],["flush-element"],["text","\\n"],["block",["each"],[["get",["positionOptions"]]],null,0],["text","  "],["open-element","div",[]],["static-attr","class","horizontal-options-showcase-vertical-divider"],["flush-element"],["close-element"],["text","\\n  "],["append",["helper",["v2-position-selector-option"],null,[["position","primaryPosition","secondaryPosition","ordinal","selectPosition","useGenerousHitbox"],["FILL",["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["selectingOrdinal"]],["helper",["action"],[["get",[null]],"selectPosition"],null],true]]],false],["text","\\n"],["close-element"],["text","\\n\\n"],["comment"," animation elements "],["text","\\n"],["open-element","div",[]],["static-attr","class","animations-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","animation-intro-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-lottie",[]],["static-attr","id","lottie-intro-animation"],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-role-selector.json"],["static-attr","autoplay","false"],["static-attr","loop","true"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","animation-outro-base-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-video",[]],["static-attr","class","animation-outro"],["static-attr","id","outro-base"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","preload",""],["static-attr","src","/fe/lol-parties/parties-v2/outro-role-selector.webm"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["animation-outro-magic-container ",["helper",["if"],[["get",["isPrimaryCentered"]],"centered"],null]]]],["flush-element"],["text","\\n    "],["open-element","lol-uikit-video",[]],["static-attr","class","animation-outro"],["static-attr","id","outro-magic"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","preload",""],["static-attr","src","/fe/lol-parties/parties-v2/outro-role-selector-magic.webm"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","animation-button-icon"],["flush-element"],["text","\\n    "],["append",["helper",["v2-position-selector-button"],null,[["ordinal","position"],["PRIMARY",["get",["selectedPosition"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["v2-position-selector-option"],null,[["position","inDemand","primaryPosition","secondaryPosition","ordinal","selectPosition","useGenerousHitbox"],[["get",["positionOption","position"]],["get",["positionOption","inDemand"]],["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["selectingOrdinal"]],["helper",["action"],[["get",[null]],"selectPosition"],null],true]]],false],["text","\\n"]],"locals":["positionOption"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(515),
      (e.exports = n.Ember.Component.extend({
        layout: a(516),
        classNames: ['v2-position-icon-component'],
        classNameBindings: ['position', 'selected', 'hovered'],
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'C6xcS21V',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-icon\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-icon\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-icon\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["position-image-container ",["unknown",["size"]]]]],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","position-image"],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","position-image-glow"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(518),
      (e.exports = n.Ember.Component.extend({
        layout: a(519),
        classNames: ['v2-banner-position-icon-component'],
        isPrimary: !1,
        positionImagePath: n.Ember.computed(
          'position',
          'isPrimary',
          function () {
            const e = (this.get('position') || '').toLowerCase(),
              t = this.get('isPrimary') ? 'primary' : 'secondary';
            return `/fe/lol-parties/icon-position-banner-${t}-${e}.png`;
          },
        ),
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'oUo4GY+k',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-banner-position-icon\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-banner-position-icon\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-banner-position-icon\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","position-image-container"],["flush-element"],["text","\\n  "],["open-element","img",[]],["static-attr","class","position-image"],["dynamic-attr","src",["unknown",["positionImagePath"]],null],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(1),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o),
      s = a(13);
    a(521);
    var l = a(12);
    const r = n.EmberAddons.EmberLifeline.RunMixin;
    e.exports = n.Ember.Component.extend(r, i.default, {
      layout: a(522),
      classNames: ['position-selector-button'],
      classNameBindings: [
        'ordinal',
        'position',
        'disabled:disabled',
        'hidden:hidden',
      ],
      disabled: !1,
      hidden: !1,
      isHintAnimationVisible: n.Ember.computed(
        'position',
        'disabled',
        function () {
          return (
            this.get('position') === l.POSITIONS.UNSELECTED &&
            !this.get('disabled')
          );
        },
      ),
      didInsertElement() {
        this._super(...arguments),
          this.runTask(() => {
            const e = this.element.querySelector('#lottie-intro-animation');
            e && e.play();
          }, 100);
      },
      positionImagePath: n.Ember.computed('position', function () {
        const e = (this.get('position') || '').toLowerCase();
        return `/fe/lol-parties/icon-position-button-${e}.png`;
      }),
      actions: {
        openOverlay: function (e) {
          this.get('handleClick')(e),
            this.playSound(s.SFX_URLS.SFX_RADIALMENU_OPEN);
        },
        onHover() {
          this.playSound(s.SFX_URLS.SFX_GOLD_HOVER);
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'tBl78aU2',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-button\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-button\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-button\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","position-selector-button-background"],["dynamic-attr","onmousedown",["helper",["action"],[["get",[null]],"openOverlay",["get",["ordinal"]]],null],null],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onHover"],null],null],["flush-element"],["text","\\n  "],["open-element","img",[]],["static-attr","class","position-image"],["dynamic-attr","src",["unknown",["positionImagePath"]],null],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["position-selector-button-animation-container ",["helper",["if"],[["get",["isHintAnimationVisible"]],"visible"],null]]]],["flush-element"],["text","\\n  "],["open-element","lol-uikit-lottie",[]],["static-attr","id","lottie-intro-animation"],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-role-selector-button.json"],["static-attr","autoplay","false"],["static-attr","loop","true"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(524);
    var o = a(1),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o),
      s = a(13),
      l = a(12);
    e.exports = n.Ember.Component.extend(i.default, {
      layout: a(525),
      classNames: ['v2-position-selector-option'],
      classNameBindings: [
        'position',
        'isPositionAlreadySelected:already-selected',
        'inDemand',
        'hovered',
        'isFill:fill',
      ],
      useGenerousHitbox: !1,
      hovered: !1,
      isFill: n.Ember.computed.equal('position', l.POSITIONS.FILL),
      isPositionAlreadySelected: n.Ember.computed(
        'primaryPosition',
        'secondaryPosition',
        'position',
        function () {
          const e = this.get('position');
          return (
            this.get('primaryPosition') === e ||
            this.get('secondaryPosition') === e
          );
        },
      ),
      positionText: n.Ember.computed('tra', 'position', function () {
        const e = this.get('position');
        return e ? this.get(`tra.parties_position_${e.toLowerCase()}`) : '';
      }),
      actions: {
        handlePositionSelected: function (e, t) {
          this.get('selectPosition')(e, t),
            this.playSound(s.SFX_URLS.SFX_RADIALMENU_ROLE_SELECT);
        },
        onHoverIn() {
          this.playSound(s.SFX_URLS.SFX_RADIALMENU_ROLE_HOVER),
            this.set('hovered', !0);
        },
        onHoverOut() {
          this.set('hovered', !1);
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '07VKwJeJ',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-option\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-option\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-option\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","position-selector-option-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","position-selector-text position"],["flush-element"],["text","\\n    "],["append",["unknown",["positionText"]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","position-selector-text in-demand"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","challenges_in_demand_text"]],false],["text","\\n  "],["close-element"],["text","\\n  "],["append",["helper",["v2-position-icon"],null,[["position","selected","hovered"],[["get",["position"]],["get",["isPositionAlreadySelected"]],["get",["hovered"]]]]],false],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["position-selector-wrapper ",["helper",["if"],[["get",["useGenerousHitbox"]],"visible"],null]]]],["modifier",["action"],[["get",[null]],"handlePositionSelected",["get",["ordinal"]],["get",["position"]]],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"onHoverIn"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"onHoverOut"],[["on"],["mouseLeave"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(527),
      (e.exports = n.Ember.Component.extend({
        layout: a(528),
        classNames: ['selection-modal'],
        classNameBindings: ['isAnimatingOutro:is-closing'],
        selectingOrdinal: null,
        childrenPositionStyle: null,
        didInsertElement() {
          this._super(...arguments),
            this.get('animationsEnabled') && this.set('isAnimatingIntro', !0);
        },
        _closeSelectionModal() {
          if (!this.get('isAnimatingOutro')) {
            this.set('isAnimatingIntro', !1), this.set('isAnimatingOutro', !1);
            const e = this.get('selectingOrdinal');
            this.sendAction('closeOverlay', e);
          }
        },
        actions: {
          selectPosition(e, t) {
            this.sendAction('setPositionPreferences', e, t),
              this.get('animationsEnabled')
                ? this.set('isAnimatingOutro', !0)
                : this.sendAction('closeOverlay', e);
          },
          handleClick() {
            this._closeSelectionModal();
          },
          onIntroAnimationComplete() {
            this.set('isAnimatingIntro', !1);
          },
          onOutroAnimationComplete() {
            this.set('isAnimatingOutro', !1), this._closeSelectionModal();
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'J7CmhPq2',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-modal\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-modal\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-modal\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","selection-modal-wrapper"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"handleClick"],null],null],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","selection-modal-content"],["dynamic-attr","style",["unknown",["childrenPositionStyle"]],null],["flush-element"],["text","\\n  "],["append",["helper",["v2-horizontal-options-showcase"],null,[["isAnimatingIntro","isAnimatingOutro","completeIntroAnimation","completeOutroAnimation","selectingOrdinal","primaryPosition","secondaryPosition","currentPartyIsFull","selectPosition"],[["get",["isAnimatingIntro"]],["get",["isAnimatingOutro"]],["helper",["action"],[["get",[null]],"onIntroAnimationComplete"],null],["helper",["action"],[["get",[null]],"onOutroAnimationComplete"],null],["get",["selectingOrdinal"]],["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["currentPartyIsFull"]],"selectPosition"]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(1),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o),
      s = a(40);
    a(530);
    const l = 4;
    e.exports = n.Ember.Component.extend(i.default, {
      layout: a(531),
      classNames: ['v2-parties-invite-info-panel'],
      currentPlayerCanInvite: !1,
      isCustom: !1,
      isTFT: !1,
      isNotTFT: n.Ember.computed.not('isTFT'),
      lobbiesService: n.Ember.inject.service('lobbies'),
      tftService: n.Ember.inject.service('tft'),
      activeMilestonesProgress: n.Ember.computed.alias(
        'tftService.activeMilestonesProgress',
      ),
      invitedPlayerIds: n.Ember.computed.alias(
        'lobbiesService.invitedPlayerIds',
      ),
      invites: n.Ember.computed.alias('lobbiesService.invites'),
      hasInvites: n.Ember.computed.gt('invites.length', 0),
      isNotCustom: n.Ember.computed.not('isCustom'),
      _tryingToViewProgression: !0,
      viewingProgression: n.Ember.computed.and(
        '_tryingToViewProgression',
        'progressionEnabled',
        'isTFT',
        'showingState.isInViewport',
      ),
      progressionEnabled: !0,
      _tryingToViewSuggested: !0,
      viewingSuggested: n.Ember.computed.and(
        '_tryingToViewSuggested',
        'suggestedEnabled',
        'isNotTFT',
      ),
      suggestedPlayers: n.Ember.computed.alias(
        'lobbiesService.currentPartySuggestedPlayers',
      ),
      panelIsCollapsed: !1,
      suggestedInvites: n.Ember.computed(
        'suggestedPlayers.[]',
        'suggestedPlayers.@each.summonerId',
        'invitedPlayerIds.[]',
        function () {
          const e = this.get('suggestedPlayers') || [],
            t = this.get('invitedPlayerIds');
          let a = n.Ember.A(),
            o = n.Ember.A();
          return (
            e.forEach((e) => {
              const n = e.get('summonerId');
              (t && 0 <= t.indexOf(n)) ||
                (e.get('reason') === s.SUGGESTED_TYPES.FRIEND
                  ? a.push(e)
                  : o.push(e));
            }),
            (a = a.sortBy('summonerName')),
            (o = o.sortBy('summonerName')),
            o.forEach((e) => {
              a.push(e);
            }),
            this.get('isTFT') && a.length > l && (a = a.slice(0, l - 1)),
            a
          );
        },
      ),
      noSuggestedInvites: n.Ember.computed.equal('suggestedInvites.length', 0),
      currentPlayerCannotInvite: n.Ember.computed.not('currentPlayerCanInvite'),
      suggestedDisabled: n.Ember.computed.or(
        'noSuggestedInvites',
        'currentPlayerCannotInvite',
        'isCustom',
      ),
      suggestedEnabled: n.Ember.computed.not('suggestedDisabled'),
      actions: {
        viewSuggested() {
          ((this.get('suggestedDisabled') ||
            this.get('_tryingToViewSuggested')) &&
            !this.get('viewingProgression')) ||
            (this.set('_tryingToViewSuggested', !0),
            this.set('_tryingToViewProgression', !1),
            this.playSound('/fe/lol-uikit/sfx-uikit-text-click-small.ogg'));
        },
        viewInvited() {
          (this.get('_tryingToViewSuggested') ||
            this.get('viewingProgression')) &&
            (this.set('_tryingToViewSuggested', !1),
            this.set('_tryingToViewProgression', !1),
            this.playSound('/fe/lol-uikit/sfx-uikit-text-click-small.ogg'));
        },
        viewProgression() {
          this.set('_tryingToViewSuggested', !1),
            this.set('_tryingToViewProgression', !0),
            this.playSound('/fe/lol-uikit/sfx-uikit-text-click-small.ogg');
        },
        toggleCollapsed() {
          this.toggleProperty('panelIsCollapsed'),
            this.get('element').classList.toggle('collapsed'),
            this.playSound('/fe/lol-uikit/sfx-uikit-text-click-small.ogg');
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '4C2Ts/fH',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isTFT"]]],null,14,13],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-body ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["flush-element"],["text","\\n  "],["open-element","ul",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-list\\n  ",["helper",["if"],[["get",["viewingSuggested"]],"viewing-suggested"],null],"\\n  ",["helper",["if"],[["get",["isCustom"]],"parties-invite-info-is-custom"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["viewingSuggested"]]],null,10,8],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","parties-invite-info-empty"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","parties-invite-info-empty-text"],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_invited_panel_no_invites"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","invitedPlayer","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["invite"]],false]]],false],["text","\\n"]],"locals":["invite"]},{"statements":[["block",["each"],[["get",["invites"]]],null,1]],"locals":[]},{"statements":[["text","            "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,3]],"locals":[]},{"statements":[["block",["unless"],[["get",["suggestedDisabled"]]],null,4]],"locals":[]},{"statements":[["block",["if"],[["get",["isTFT"]]],null,5],["block",["if"],[["get",["hasInvites"]]],null,2,0],["text","    "]],"locals":[]},{"statements":[["text","      "],["append",["helper",["invite-info-panel-tft-progression"],null,[["class","activeMilestonesProgress"],["tft-progression",["get",["activeMilestonesProgress"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["viewingProgression"]]],null,7,6]],"locals":[]},{"statements":[["text","        "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,9]],"locals":[]},{"statements":[["text","  "],["comment"," Do not show tabbed header with suggested if invite info only "],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-invite-header"],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","custom-invite-header-text"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","custom_game_invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingSuggested"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-suggested"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingSuggested"]],"active"],null],"\\n        ",["helper",["if"],[["get",["suggestedDisabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewSuggested"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","suggested_panel_lobby_title"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingSuggested"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isNotCustom"]]],null,12,11]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingProgression"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-progression"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingProgression"]],"active"],null],"\\n        ",["helper",["unless"],[["get",["progressionEnabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewProgression"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","tft_progression_panel_title"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingProgression"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(1),
      s = n(i),
      l = a(5),
      r = n(l);
    a(533);
    const c = (0, o.emberDataBinding)({
      Ember: o.Ember,
      websocket: (0, o.getProvider)().getSocket(),
      logPrefix: 'parties:invite-info-panel-player:component',
      basePaths: { lobby: '/lol-lobby' },
    });
    e.exports = o.Ember.Component.extend(c, s.default, r.default, {
      tagName: 'li',
      classNames: 'v2-parties-invite-info-panel-player',
      classNameBindings: [
        'isSuggested:parties-suggested-player',
        'showPendingIndicator:parties-pending-invite',
        'isKicked:parties-kicked-invite',
        'isDeclined:parties-declined-invite',
        'isAccepted:parties-accepted-invite',
        'isError:parties-error-invite',
        'currentPlayerCanInvite:enabled:disabled',
      ],
      attributeBindings: ['summonerId'],
      customGamesService: o.Ember.inject.service('custom-games'),
      lobbiesService: o.Ember.inject.service('lobbies'),
      invitesService: o.Ember.inject.service('invites'),
      disabled: !1,
      _invitedFromSuggested: !1,
      _previousSummonerId: null,
      isSuggested: null,
      player: null,
      invitedPlayer: null,
      summonerId: o.Ember.computed(
        'player.summonerId',
        'invitedPlayer.toSummonerId',
        function () {
          return (
            this.get('invitedPlayer.toSummonerId') ||
            this.get('player.summonerId')
          );
        },
      ),
      recycle: o.Ember.computed('summonerId', function () {
        const e = this.get('summonerId');
        e &&
          e !== this.get('_previousSummonerId') &&
          (this.set('_invitedFromSuggested', !1),
          this.set('_previousSummonerId', e));
      }),
      layout: a(534),
      name: o.Ember.computed(
        'player.summonerName',
        'invitedPlayer.toSummonerName',
        function () {
          return (
            this.get('player.summonerName') ||
            this.get('invitedPlayer.toSummonerName') ||
            ''
          );
        },
      ),
      isPending: o.Ember.computed.equal('invitedPlayer.state', 'Pending'),
      isAccepted: o.Ember.computed.equal('invitedPlayer.state', 'Accepted'),
      isDeclined: o.Ember.computed.equal('invitedPlayer.state', 'Declined'),
      isKicked: o.Ember.computed.equal('invitedPlayer.state', 'Kicked'),
      isError: o.Ember.computed.equal('invitedPlayer.state', 'Error'),
      showPendingIndicator: o.Ember.computed.or('isPending', 'isRequested'),
      errorObserver: o.Ember.computed('isError', 'name', function () {
        this.get('isError') &&
          this.get('customGamesService.isCustomUI') &&
          this.get('name') &&
          this._showCustomBannedToast();
      }),
      _showCustomBannedToast: function () {
        const e = this.get('lobbiesService.invitations') || [],
          t = this.get('summonerId');
        for (let a = 0; a < e.length; a++) {
          const n = e[a];
          if (
            n.get('toSummonerId').toString() !== t.toString() ||
            !n.get('errorType').match(/NotInvitableException/)
          )
            continue;
          const o = this.get('name'),
            i = this.get('tra.formatString'),
            s = i('custom_game_invite_banned_error', { summonerName: o });
          this.showToast(s);
          break;
        }
      },
      actions: {
        remove: function () {
          this.get('lobbiesService').removeSuggestedPlayer(
            this.get('player.summonerId'),
          );
        },
      },
      click: function () {
        if (
          this.get('isSuggested') &&
          this.get('currentPlayerCanInvite') &&
          !this.get('disabled') &&
          !this.get('_invitedFromSuggested')
        ) {
          this.set('_invitedFromSuggested', !0),
            this.playSound('/fe/lol-uikit/sfx-uikit-generic-click-small.ogg');
          const e = this.get('summonerId');
          this.get('lobbiesService').removeSuggestedPlayer(e);
          const t = this.get('name');
          this.get('invitesService').invitePlayer(e, t);
        }
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'J/BF/8Tg',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\player-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\player-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\player-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showPendingIndicator"]]],null,1],["open-element","span",[]],["static-attr","class","invite-info-name"],["flush-element"],["append",["unknown",["name"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isSuggested"]]],null,0],["comment"," Work around for Ember.computed to act like an observer. "],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["recycle"]],false],["text"," "],["append",["unknown",["errorObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","button",[]],["static-attr","class","parties-remove-suggested-player"],["modifier",["action"],[["get",[null]],"remove"],[["bubbles"],[false]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","lol-pending-loader"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(536);
    const o = n.EmberAddons.EmberLifeline.RunMixin;
    e.exports = n.Ember.Component.extend(o, {
      layout: a(537),
      classNames: ['v2-parties-invite-panel-tft-progression'],
      tftService: n.Ember.inject.service('tft'),
      previousMilestone: n.Ember.computed(
        'activeMilestonesProgress.0.{isPaid,isLocked,pointsEarnedForMilestone,missionId,status,state}',
        function () {
          return n.Ember.copy(this.get('activeMilestonesProgress.0'));
        },
      ),
      nextMilestone: n.Ember.computed(
        'activeMilestonesProgress.1.{isPaid,isLocked,pointsEarnedForMilestone,missionId,status,state}',
        function () {
          return n.Ember.copy(this.get('activeMilestonesProgress.1'));
        },
      ),
      actions: {
        navigateToTft() {
          n.Navigation.setActive({ id: 'tft' }, !0);
        },
        claim(e) {
          if (!this.get('loadingTimeoutId')) {
            if ('REWARDABLE' !== e.state || 'DUMMY' === e.status)
              return void this.send('navigateToTft');
            const t = this.runTask(() => {
              this.set('loadingTimeoutId', null);
            }, 5e3);
            this.set('loadingTimeoutId', t);
            const a = this.get('tftService');
            n.Telemetry.sendEvent(
              'tft-claim-reward-button-clicked',
              e.missionInternalName,
            ),
              a.claimRewards(e);
          }
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'VnmkcJ6V',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\tft-progression-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\tft-progression-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\tft-progression-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["nextMilestone"]]],null,2,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-complete"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-title"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_title"]],false],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-body"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_body"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n                "],["open-element","p",[]],["flush-element"],["text","\\n                  "],["append",["unknown",["tra","tft_progression_description"]],false],["text","\\n                "],["close-element"],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-milestone-container"],["flush-element"],["text","\\n        "],["open-element","lol-tft-battlepass-milestone",[]],["static-attr","size","small"],["static-attr","class","progression-milestone"],["dynamic-attr","milestone",["unknown",["previousMilestone"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"claim",["get",["previousMilestone"]]],null],null],["static-attr","is-smooth-progress","true"],["flush-element"],["close-element"],["text","\\n        "],["open-element","lol-tft-battlepass-milestone",[]],["static-attr","size","small"],["static-attr","isSelected","false"],["static-attr","class","progression-milestone"],["dynamic-attr","milestone",["unknown",["nextMilestone"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"navigateToTft"],null],null],["static-attr","is-smooth-progress","true"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-container"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","small"]],1],["text","            "],["open-element","div",[]],["static-attr","class","reward-label"],["flush-element"],["append",["unknown",["tra","tft_progression_next"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","reward-title"],["flush-element"],["append",["unknown",["nextMilestone","title"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","progress-container"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-current"],["flush-element"],["append",["unknown",["nextMilestone","pointsEarnedForMilestone"]],false],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-divider"],["flush-element"],["text","/"],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-total"],["flush-element"],["append",["unknown",["nextMilestone","pointsNeededForMilestone"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(539),
      (e.exports = n.Ember.Component.extend({
        layout: a(540),
        classNames: ['banner-crystal-component'],
        challengeSummary: null,
        summonerId: null,
        overallChallengeLevel: n.Ember.computed.alias(
          'challengesSummary.overallChallengeLevel',
        ),
        crystalImagePath: n.Ember.computed(
          'overallChallengeLevel',
          function () {
            const e = this.get('overallChallengeLevel');
            return e
              ? `/fe/lol-static-assets/images/challenges-shared/crystal_${e.toLowerCase()}.png`
              : '';
          },
        ),
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'fGY8vwCL',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-component\\\\index.js\\" "],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["right","system"]],1],["open-element","div",[]],["static-attr","class","banner-crystal-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["crystalImagePath"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","img",[]],["static-attr","class","banner-crystal"],["dynamic-attr","src",["concat",[["unknown",["crystalImagePath"]]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["v2-banner-crystal-tooltip"],null,[["challengesSummary","crystalImagePath"],[["get",["challengesSummary"]],["get",["crystalImagePath"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(542);
    const o = 'NONE';
    e.exports = n.Ember.Component.extend({
      layout: a(543),
      classNames: ['banner-crystal-tooltip-component'],
      challengesSummary: null,
      crystalImagePath: '',
      categoryProgress: n.Ember.computed.alias(
        'challengesSummary.categoryProgress',
      ),
      positionPercentile: n.Ember.computed.alias(
        'challengesSummary.positionPercentile',
      ),
      overallChallengeLevel: n.Ember.computed.alias(
        'challengesSummary.overallChallengeLevel',
      ),
      totalChallengeScore: n.Ember.computed.alias(
        'challengesSummary.totalChallengeScore',
      ),
      pointsUntilNextRank: n.Ember.computed.alias(
        'challengesSummary.pointsUntilNextRank',
      ),
      progressTowardsNextChallengeLevel: n.Ember.computed(
        'totalChallengeScore',
        'pointsUntilNextRank',
        function () {
          return (
            this.get('totalChallengeScore') / this.get('pointsUntilNextRank')
          );
        },
      ),
      localizedChallengeLevel: n.Ember.computed(
        'tra',
        'overallChallengeLevel',
        function () {
          const e = this.get('overallChallengeLevel') || o;
          return this.get(`tra.challenge_level_${e.toLowerCase()}`);
        },
      ),
      topPercentileText: n.Ember.computed(
        'tra.challenge_percentile_players',
        'positionPercentile',
        function () {
          const e = this.get('positionPercentile');
          return e ? e.toFixed(2) : '';
        },
      ),
      categories: n.Ember.computed('categoryProgress.[]', function () {
        return (this.get('categoryProgress') || [])
          .filter((e) => e.category !== 'LEGACY')
          .map((e) => {
            const t = e.level || o;
            return {
              category: e.category,
              level: t,
              percentage: e.percentage,
              localizedCategory: this.get(
                `tra.challenge_category_${e.category}`,
              ),
              localizedLevel: this.get(`tra.challenge_level_${t}`),
            };
          });
      }),
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'BVfbPUt/',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-tooltip-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-tooltip-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-tooltip-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","overall-progress-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","overall-challenge-level-image-container"],["flush-element"],["text","\\n    "],["open-element","img",[]],["static-attr","class","overall-challenge-level-image"],["dynamic-attr","src",["concat",[["unknown",["crystalImagePath"]]]]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","overall-challenge-details-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","overall-header-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","overall-title"],["flush-element"],["append",["unknown",["localizedChallengeLevel"]],false],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","overall-header-separator"],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","overall-percentile"],["flush-element"],["append",["unknown",["topPercentileText"]],false],["text","%"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","per-category-progress-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["categories"]]],null,0],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","category-progress-radial-container"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","category-progress-border"],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["dynamic-attr","class",["concat",["category-icon ",["unknown",["categoryProgress","category"]]," color-",["unknown",["categoryProgress","level"]]]]],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["categoryProgress"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(15),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    a(545),
      (e.exports = n.Ember.Component.extend({
        layout: a(546),
        classNames: ['v2-banner-placeholder'],
        lobbiesService: n.Ember.inject.service('lobbies'),
        partySettingsService: n.Ember.inject.service('party-settings'),
        animationsEnabled: n.Ember.computed.alias(
          'partySettingsService.bannerAnimationsEnabled',
        ),
        pendingInvites: n.Ember.computed.alias('lobbiesService.pendingInvites'),
        partiesViewport: i.default,
        partiesViewportIsShowing: n.Ember.computed.alias(
          'partiesViewport.isShowing',
        ),
        placeholder: null,
        isInQueue: !1,
        partyInvitesAllowed: !1,
        invitedVideoSrc: '/fe/lol-parties/parties-v2/invited-banner.webm',
        videoPausedObserver: n.Ember.on(
          'init',
          n.Ember.observer('partiesViewportIsShowing', function () {
            if (
              this.element &&
              this.get('isInvitedBanner') &&
              this.get('animationsEnabled')
            ) {
              const e = this.element.querySelector(
                '.placeholder-invited-video',
              );
              if (e) {
                const t = this.get('partiesViewportIsShowing');
                e.paused && t && e.play();
              }
            }
          }),
        ),
        isInvitedBanner: n.Ember.computed(
          'isInQueue',
          'placeholder',
          'pendingInvites.[]',
          function () {
            if (this.get('isInQueue')) return !0;
            const e = this.get('placeholder') || 0;
            return this.get('pendingInvites').length > e;
          },
        ),
        actions: {
          showInviteModal: function () {
            this.get('partyInvitesAllowed') &&
              this.sendAction('showInviteModal');
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'JBvXfWZa',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-placeholder-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-placeholder-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-placeholder-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isInvitedBanner"]]],null,3],["text","\\n"],["block",["if"],[["get",["partyInvitesAllowed"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","invite-button-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","invite-button"],["flush-element"],["text","\\n      "],["append",["helper",["generic-button"],null,[["baseImgPath","overImgPath","downImgPath","onClick"],["/fe/lol-parties/banner-invite.png","/fe/lol-parties/banner-invite-hover.png","/fe/lol-parties/banner-invite-click.png",["helper",["action"],[["get",[null]],"showInviteModal"],null]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","placeholder-invited-image"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","video",[]],["static-attr","class","placeholder-invited-video"],["static-attr","autoplay","true"],["static-attr","preload","auto"],["static-attr","loop","true"],["dynamic-attr","src",["unknown",["invitedVideoSrc"]],null],["flush-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","placeholder-invited-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["animationsEnabled"]]],null,2,1],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(548),
      (e.exports = n.Ember.Component.extend({
        layout: a(549),
        classNames: ['identity-tooltip-component'],
        rankedData: null,
        selectedQueue: null,
        player: null,
        showRank: !1,
        summonerIconId: n.Ember.computed.alias('player.summonerIconId'),
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'oI28ETkK',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showRank"]]],null,0],["text","\\n"],["open-element","div",[]],["static-attr","class","identity-tooltip-divider"],["flush-element"],["close-element"],["text","\\n\\n"],["append",["helper",["summoner-icon-identity-tooltip"],null,[["player"],[["get",["player"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["rank-identity-tooltip"],null,[["rankedData","selectedQueue","player"],[["get",["rankedData"]],["get",["selectedQueue"]],["get",["player"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(551),
      (e.exports = n.Ember.Component.extend({
        layout: a(552),
        classNames: ['rank-identity-tooltip-component'],
        rankedData: null,
        selectedQueue: null,
        player: null,
        useRankFromQueue: n.Ember.computed.alias('selectedQueue.isRanked'),
        highestRankTier: n.Ember.computed.alias(
          'rankedData.highestRankedEntrySR.tier',
        ),
        highestRankDivision: n.Ember.computed.alias(
          'rankedData.highestRankedEntrySR.division',
        ),
        highestRankLeaguePoints: n.Ember.computed.alias(
          'rankedData.highestRankedEntrySR.leaguePoints',
        ),
        highestRankTierUnranked: n.Ember.computed.equal(
          'highestRankTier',
          'NONE',
        ),
        highestRankTierDivisionText: n.Ember.computed(
          'highestRankTier',
          'highestRankDivision',
          'selectedQueue',
          'tra.ready',
          function () {
            const e = this.get('highestRankTier'),
              t = this.get('highestRankDivision'),
              a = this.get('selectedQueue'),
              o = n.LeagueTierNames.getFullTierDivisionName(e, t);
            if (a && a.isProvisional) {
              const e = this.get('tra.formatString');
              return e('parties_provisional_rank', { tierDivisionLoc: o });
            }
            return o;
          },
        ),
        highestRankLeaguePointsText: n.Ember.computed(
          'highestRankLeaguePoints',
          'tra.ready',
          function () {
            return this.formatLeaguePointsText(
              this.get('highestRankLeaguePoints'),
            );
          },
        ),
        rankedQueue: n.Ember.computed(
          'rankedData.queueMap',
          'selectedQueue.type',
          function () {
            const e = this.get('rankedData.queueMap'),
              t = this.get('selectedQueue');
            if (!t || !e) return null;
            const a = e[t.type];
            return a || null;
          },
        ),
        rankedQueueTierDivisionText: n.Ember.computed(
          'rankedQueue.tier',
          'rankedQueue.division',
          function () {
            const e = this.get('rankedQueue.tier'),
              t = this.get('rankedQueue.division');
            return n.LeagueTierNames.getFullTierDivisionName(e, t);
          },
        ),
        rankedQueueDivision: n.Ember.computed.alias('rankedQueue.division'),
        rankedQueueLeaguePointsText: n.Ember.computed(
          'rankedQueue.leaguePoints',
          'tra.ready',
          function () {
            return this.formatLeaguePointsText(
              this.get('rankedQueue.leaguePoints'),
            );
          },
        ),
        pastRankTierUnranked: n.Ember.computed.equal(
          'rankedData.highestPreviousSeasonAchievedTier',
          'NONE',
        ),
        hasPastRank: n.Ember.computed.not('pastRankTierUnranked'),
        pastMiniRegaliaIconPath: n.Ember.computed(
          'rankedData.highestPreviousSeasonAchievedTier',
          function () {
            const e = this.get('rankedData.highestPreviousSeasonAchievedTier');
            return n.LeagueTierNames.getRankedMiniRegalia(e);
          },
        ),
        pastRankedTierText: n.Ember.computed(
          'rankedData.highestPreviousSeasonAchievedTier',
          'tra.ready',
          function () {
            const e = this.get('rankedData.highestPreviousSeasonAchievedTier'),
              t = this.get('tra.formatString'),
              a = n.LeagueTierNames.getTierName(e);
            return t('parties_past_rank', { rankedTier: a });
          },
        ),
        formatLeaguePointsText: function (e) {
          const t = this.get('tra.formatString');
          return t('ranked_lp', { num_points: e });
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'R4tiylZ0',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\rank\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\rank\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\rank\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["rankedData"]]],null,3]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-past-rank"],["flush-element"],["text","\\n        "],["open-element","img",[]],["static-attr","class","rank-identity-tooltip-past-rank-icon"],["dynamic-attr","src",["concat",[["unknown",["pastMiniRegaliaIconPath"]]]]],["flush-element"],["close-element"],["text","\\n        "],["append",["unknown",["pastRankedTierText"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-rank"],["flush-element"],["append",["unknown",["highestRankTierDivisionText"]],false],["open-element","span",[]],["flush-element"],["text"," - "],["append",["unknown",["highestRankLeaguePointsText"]],false],["close-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-rank"],["flush-element"],["append",["unknown",["rankedQueueTierDivisionText"]],false],["open-element","span",[]],["flush-element"],["text"," - "],["append",["unknown",["rankedQueueLeaguePointsText"]],false],["close-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","lol-regalia-emblem-element",[]],["static-attr","class","rank-identity-tooltip-rank-icon"],["dynamic-attr","ranked-tier",["concat",[["helper",["if"],[["get",["useRankFromQueue"]],["get",["rankedQueue","tier"]],["get",["highestRankTier"]]],null]]]],["flush-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-details"],["flush-element"],["text","\\n"],["block",["if"],[["get",["useRankFromQueue"]]],null,2,1],["block",["if"],[["get",["hasPastRank"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(554);
    const o = {
      1: {
        traKey: 'tra.parties_tooltip_icon_rare',
        gemIcon: '/fe/lol-parties/summoner-icon-rare.png',
      },
      2: {
        traKey: 'tra.parties_tooltip_icon_epic',
        gemIcon: '/lol-game-data/assets/v1/rarity-gem-icons/epic.png',
      },
      3: {
        traKey: 'tra.parties_tooltip_icon_legendary',
        gemIcon: '/lol-game-data/assets/v1/rarity-gem-icons/legendary.png',
      },
      4: {
        traKey: 'tra.parties_tooltip_icon_mythic',
        gemIcon: '/lol-game-data/assets/v1/rarity-gem-icons/mythic.png',
      },
      5: {
        traKey: 'tra.parties_tooltip_icon_ultimate',
        gemIcon: '/lol-game-data/assets/v1/rarity-gem-icons/ultimate.png',
      },
    };
    e.exports = n.Ember.Component.extend({
      layout: a(555),
      classNames: ['icon-identity-tooltip-component'],
      assets: n.Ember.inject.service(),
      player: null,
      regionLocale: n.Ember.computed.alias('assets.regionLocale'),
      summonerIcons: n.Ember.computed.alias('assets.summonerIcons'),
      summonerIconId: n.Ember.computed.alias('player.summonerIconId'),
      summonerIcon: n.Ember.computed(
        'summonerIcons',
        'summonerIconId',
        function () {
          const e = this.get('summonerIcons'),
            t = this.get('summonerIconId'),
            a = e && 0 < e.length;
          return a && (t || 0 === t) ? e.findBy('id', t) : {};
        },
      ),
      iconRarity: n.Ember.computed(
        'regionLocale',
        'summonerIcon.rarities.[]',
        function () {
          const e = this.get('regionLocale'),
            t = this.get('summonerIcon.rarities') || [];
          let a = 0;
          if (Array.isArray(t)) {
            let n = t.find((t) => t.region === e);
            n
              ? (a = n.rarity)
              : ((n = t.find((e) => 'riot' === e.region)),
                (a = n ? n.rarity : 0));
          }
          return o[a];
        },
      ),
      iconRarityText: n.Ember.computed('tra.ready', 'iconRarity', function () {
        const e = this.get('iconRarity');
        return e ? this.get(e.traKey) : '';
      }),
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'fd94p/p+',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\summoner-icon\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\summoner-icon\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\summoner-icon\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["summonerIcon"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-desc"],["flush-element"],["text","\\n          "],["open-element","img",[]],["static-attr","class","icon-identity-tooltip-rarity-icon"],["dynamic-attr","src",["concat",[["unknown",["iconRarity","gemIcon"]]]]],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-rarity-desc"],["flush-element"],["append",["unknown",["iconRarityText"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","lol-social-avatar-icon",[]],["static-attr","class","icon-identity-tooltip-icon"],["dynamic-attr","icon-id",["unknown",["summonerIcon","id"]],null],["static-attr","availability","online"],["flush-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-details"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-name"],["flush-element"],["append",["unknown",["summonerIcon","title"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["iconRarity"]]],null,0],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(557);
    a(558);
    const i = 'sfx-ui',
      s = n.Ember.Component.extend({
        classNames: ['generic-button'],
        classNameBindings: [
          'matchHeight:match-h',
          'matchWidth:match-w',
          'isImgFlippedX:flip-x',
          'isImgFlippedY:flip-y',
        ],
        layout: a(559),
        canBeSelected: !1,
        triggerSelected: !1,
        selectionGroup: null,
        isEnabled: !0,
        text: null,
        baseBgPath: null,
        upBgPath: null,
        overBgPath: null,
        downBgPath: null,
        disabledBgPath: null,
        baseImgPath: null,
        upImgPath: null,
        overImgPath: null,
        downImgPath: null,
        disabledImgPath: null,
        noDisabledBg: !1,
        isImgFlippedX: !1,
        isImgFlippedY: !1,
        useCustomContent: !1,
        iconSizeModifier: 1,
        matchHeight: !0,
        matchWidth: !0,
        tooltipText: null,
        tooltipPosition: 'bottom',
        tooltipType: 'system',
        disabledTooltipText: null,
        disabledTooltipPosition: 'bottom',
        disabledTooltipType: 'system',
        onHoverSound: null,
        onClickSound: null,
        onClickReleaseSound: null,
        currentState: null,
        isClickTarget: !1,
        isSelected: !1,
        onInit: n.Ember.on('init', function () {
          this._changeState(o.ButtonState.UP);
        }),
        upBgPathInternal: n.Ember.computed.or('upBgPath', 'baseBgPath'),
        overBgPathInternal: n.Ember.computed.or('overBgPath', 'baseBgPath'),
        downBgPathInternal: n.Ember.computed.or('downBgPath', 'baseBgPath'),
        disabledBgPathInternal: n.Ember.computed(
          'disabledBgPath',
          'baseBgPath',
          'noDisabledBg',
          function () {
            return this.get('noDisabledBg')
              ? ''
              : this.get('disabledBgPath') || this.get('baseBgPath');
          },
        ),
        upImgPathInternal: n.Ember.computed.or('upImgPath', 'baseImgPath'),
        overImgPathInternal: n.Ember.computed.or('overImgPath', 'baseImgPath'),
        downImgPathInternal: n.Ember.computed.or('downImgPath', 'baseImgPath'),
        disabledImgPathInternal: n.Ember.computed.or(
          'disabledImgPath',
          'baseImgPath',
        ),
        customContentUp: { isUp: !0, isAny: !0 },
        customContentOver: { isOver: !0, isAny: !0 },
        customContentDown: { isDown: !0, isAny: !0 },
        customContentDisabled: { isDisabled: !0, isAny: !0 },
        iconSizeModifierStyle: n.Ember.computed(
          'iconSizeModifier',
          function () {
            const e = this.get('iconSizeModifier');
            if (1 === e) return null;
            const t = 100 * Math.max(e, 0),
              a = this.get('matchHeight'),
              n = this.get('matchWidth');
            let o = '';
            return n && (o += `width: ${t}%;`), a && (o += `height: ${t}%`), o;
          },
        ),
        triggerSelectedObserver: n.Ember.computed(
          'triggerSelected',
          function () {
            this.get('triggerSelected') &&
              (this._setSelected(!0),
              n.Ember.run.next(() => {
                this.set('triggerSelected', !1);
              }));
          },
        ),
        isEnabledObserver: n.Ember.computed('isEnabled', function () {
          const e = this.get('currentState') !== o.ButtonState.DISABLED,
            t = this.get('isEnabled');
          e && !t
            ? this._changeState(o.ButtonState.DISABLED)
            : !e && t && this._changeState(o.ButtonState.UP);
        }),
        _changeState(e) {
          const t = this.get('currentState'),
            a = this.get('isClickTarget');
          e === o.ButtonState.OVER &&
            (this.get('onHoverSound') &&
              n.Audio.getChannel(i).playSound(this.get('onHoverSound')),
            a && (e = o.ButtonState.DOWN)),
            this.set('isState_' + t, !1),
            this.set('isState_' + e, !0),
            this.set('currentState', e);
        },
        _processClick() {
          this.attrs.onClick && this.attrs.onClick();
          const e = this.get('selectionGroup'),
            t = this.get('isSelected');
          (e && t) || this._setSelected(!t);
        },
        _setSelected(e) {
          const t = this.get('canBeSelected');
          if (t) {
            const t = this.get('isSelected');
            if (t !== e) {
              if (e) {
                const e = this.get('selectionGroup');
                s.setSelection(e, this);
              }
              t && this.attrs.onDeselected
                ? this.attrs.onDeselected()
                : e && this.attrs.onSelected && this.attrs.onSelected(),
                this.set('isSelected', e);
            }
          }
        },
        actions: {
          changeState(e) {
            const t = this.get('currentState');
            t === o.ButtonState.DISABLED || this._changeState(e);
          },
          beginClick() {
            const e = this.get('currentState');
            if (e === o.ButtonState.DISABLED) return;
            this.get('onClickSound') &&
              n.Audio.getChannel(i).playSound(this.get('onClickSound')),
              this._changeState(o.ButtonState.DOWN),
              this.set('isClickTarget', !0);
            const t = () => {
              this.set('isClickTarget', !1),
                document.removeEventListener('mouseup', t);
            };
            document.addEventListener('mouseup', t);
          },
          endClick() {
            const e = this.get('currentState');
            if (e !== o.ButtonState.DISABLED) {
              const e = this.get('isClickTarget');
              e &&
                (this.get('onClickReleaseSound') &&
                  n.Audio.getChannel(i).playSound(
                    this.get('onClickReleaseSound'),
                  ),
                this._processClick(),
                this.set('isClickTarget', !1),
                this._changeState(o.ButtonState.OVER));
            }
          },
          onHover() {
            const e = this.get('currentState');
            e === o.ButtonState.DISABLED ||
              (this._changeState(o.ButtonState.OVER),
              this.attrs.onHover && this.attrs.onHover());
          },
          onHoverLeave() {
            const e = this.get('currentState');
            e === o.ButtonState.DISABLED ||
              (this._changeState(o.ButtonState.UP),
              this.attrs.onHoverLeave && this.attrs.onHoverLeave());
          },
        },
      });
    s.reopenClass({
      currentSelectionMap: {},
      setSelection(e, t) {
        if (e && t && t.get('canBeSelected')) {
          const a = s.currentSelectionMap[e];
          a && a._setSelected(!1), (s.currentSelectionMap[e] = t);
        }
      },
    }),
      (e.exports = s);
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 }),
      (t.ButtonState = void 0);
    var n = a(68),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n);
    t.ButtonState = (0, o.default)({
      UP: 'up',
      OVER: 'over',
      DOWN: 'down',
      DISABLED: 'disabled',
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'P2BKi5eS',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\generic-button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\generic-button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\generic-button-component\\\\index.js\\" "],["text","\\n"],["append",["unknown",["isEnabledObserver"]],false],["text","\\n"],["append",["unknown",["triggerSelectedObserver"]],false],["text","\\n"],["open-element","div",[]],["static-attr","class","generic-button-root"],["modifier",["action"],[["get",[null]],"onHoverLeave"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"onHover"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"beginClick"],[["on"],["mouseDown"]]],["modifier",["action"],[["get",[null]],"endClick"],[["on"],["mouseUp"]]],["flush-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state up ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_up"]],"active"],null]]]],["dynamic-attr","style",["unknown",["upStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["upBgPathInternal"]]],null,27],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["upBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["upImgPathInternal"]]],null,26],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,25,24],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,22],["text","\\n  "],["close-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state over ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_over"]],"active"],null]]]],["dynamic-attr","style",["unknown",["overStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["overBgPathInternal"]]],null,21],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["overBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["overImgPathInternal"]]],null,20],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,19,18],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,16],["text","\\n"],["block",["if"],[["get",["tooltipText"]]],null,15],["text","  "],["close-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state down ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_down"]],"active"],null]]]],["dynamic-attr","style",["unknown",["downStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["downBgPathInternal"]]],null,13],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["downBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["downImgPathInternal"]]],null,12],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,11,10],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,8],["text","\\n  "],["close-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state disabled ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_disabled"]],"active"],null]]]],["dynamic-attr","style",["unknown",["disabledStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["disabledBgPathInternal"]]],null,7],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["disabledBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["disabledImgPathInternal"]]],null,6],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,5,4],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,2],["text","\\n"],["block",["if"],[["get",["disabledTooltipText"]]],null,1],["text","  "],["close-element"],["text","\\n\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["disabledTooltipText"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],[["get",["disabledTooltipPosition"]],["get",["disabledTooltipType"]]]],0]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentDisabled"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["disabledText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["disabledText"]]],null,3]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["disabledImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["disabledBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentDown"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["downText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["downText"]]],null,9]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["downImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["downBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["tooltipText"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],[["get",["tooltipPosition"]],["get",["tooltipType"]]]],14]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentOver"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["overText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["overText"]]],null,17]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["overImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["overBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentUp"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["upText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["upText"]]],null,23]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["upImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["upBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    var n = a(0);
    a(561);
    const o = n.UIKit.getVignetteCelebrationManager();
    t.default = n.Ember.Component.extend({
      classNames: ['rcp-fe-lol-parties-reward-celebration'],
      layout: a(562),
      selectedReward: null,
      softSelectionMade: !1,
      didDestroyElement() {
        null !== this.get('selectedReward') && this.set('selectedReward', null);
      },
      actions: {
        selectReward(e, t) {
          t.target.disabled ||
            (null !== this.get('selectedReward') &&
              this.set('selectedReward.isSelected', !1),
            this.set('selectedReward', e),
            this.set('selectedReward.isSelected', !0),
            this.set('softSelectionMade', !0),
            o.update({ id: this.id, data: { nextButtonEnabled: !0 } }));
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'j0wZ0qb4',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-reward-celebration-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-reward-celebration-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-reward-celebration-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","rewards-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["rewards"]]],null,2],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","reward"],["flush-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["reward-icon ",["unknown",["reward","rewardType"]]]]],["flush-element"],["text","\\n          "],["open-element","img",[]],["dynamic-attr","src",["unknown",["reward","iconUrl"]],null],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-description-wrapper"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","reward-description"],["flush-element"],["append",["unknown",["reward","description"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectReward",["get",["reward"]]],null],null],["dynamic-attr","class",["concat",["reward selectable \\n          ",["helper",["if"],[["get",["reward","isSelected"]],"selected"],null]," \\n          ",["helper",["if"],[["get",["softSelectionMade"]],"selection-made"],null]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","brightener-bg"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","dimmer-bg"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","radial-glow"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["reward-icon ",["unknown",["reward","rewardType"]]]]],["flush-element"],["text","\\n          "],["open-element","img",[]],["dynamic-attr","src",["unknown",["reward","iconUrl"]],null],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-description-wrapper"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","reward-description"],["flush-element"],["append",["unknown",["reward","description"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["selectable"]]],null,1,0]],"locals":["reward"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(38);
    const i = n.Ember.Component.extend({
      layout: a(564),
      classNames: ['parties-queue-error-dialog'],
      lobbiesService: n.Ember.inject.service('lobbies'),
      currentPlayer: n.Ember.computed.alias('lobbiesService.currentPlayer'),
      showError: n.Ember.computed.notEmpty('dialogSubComponent'),
      dialogSubComponent: n.Ember.computed('errorType', function () {
        switch (this.get('errorType')) {
          case o.SEARCH_ERROR_TYPES.QUEUE_DODGER:
            return 'party-queue-error-dialog-queue-dodge';
          case o.SEARCH_ERROR_TYPES.LEAVER_BUSTER_QUEUE_DELAY:
            return 'party-queue-error-dialog-leaver-busted';
          case o.SEARCH_ERROR_TYPES.LEAVER_BUSTER_QUEUE_LOCKOUT:
            return 'party-queue-error-dialog-leaver-buster-lockout';
          case o.SEARCH_ERROR_TYPES.LEAVER_BUSTER_TAINTED_WARNING:
            return this.get('currentPlayer.summonerId') ===
              this.get('errorData.penalizedSummonerId')
              ? ''
              : 'party-queue-error-dialog-leaver-buster-tainted-warning';
          case o.SEARCH_ERROR_TYPES.RANKED_MIN_LEVEL:
            return 'party-queue-error-dialog-min-level';
          case o.SEARCH_ERROR_TYPES.PREREQUISITE_QUEUES_NOT_PLAYED:
            return 'party-queue-error-dialog-prerequisite-queues-not-played';
          default:
            return 'party-queue-error-dialog-generic';
        }
      }),
    });
    e.exports = i;
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '3gzapiCa',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showError"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-queue-error-content"],["flush-element"],["text","\\n    "],["append",["helper",["component"],[["get",["dialogSubComponent"]]],[["errorData"],[["get",["errorData"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    e.exports = n.Ember.Component.extend({ layout: a(566) });
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'cSYpdd4i',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\generic\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\generic\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_generic_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["tra","parties_queue_error_generic_body$html"]]],null],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    e.exports = n.Ember.Component.extend({ layout: a(568) });
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'dXd9AkYV',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\min-level\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\min-level\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_min_level_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_min_level_body"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    e.exports = n.Ember.Component.extend({ layout: a(570) });
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '5AyISQ0A',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-busted\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-busted\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_busted_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_busted_body"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(25),
      o = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(n),
      i = a(0);
    const s = a(50);
    a(572),
      (e.exports = i.Ember.Component.extend({
        layout: a(573),
        classNames: ['leaver-buster-lockout-error-dialog'],
        init: function () {
          this._super(...arguments),
            (this.binding = i.dataBinding.bindTo(
              (0, i.getProvider)().getSocket(),
            )),
            this.binding.observe(
              '/lol-matchmaking/v1/search',
              this,
              this.handleMatchMakingSearch,
            );
        },
        willDestroyElement: function () {
          this.binding.unobserve('/lol-matchmaking/v1/search', this);
        },
        handleMatchMakingSearch: function (e) {
          const t = this.getLeaverBusterErrors(e),
            a = t.map((e) => e.penalizedSummonerId);
          0 < t.length &&
            this.binding
              .get('/lol-matchmaking/v1/search')
              .then(() =>
                this.binding.get(
                  `/lol-summoner/v2/summoner-names?ids=${(0, o.default)(a)}`,
                ),
              )
              .then((e) => {
                const a = e.map((e) => {
                  const a = t.find(
                    (t) => e.summonerId === t.penalizedSummonerId,
                  );
                  return {
                    displayName: e.displayName,
                    penaltyTimeRemaining: s.formatThreeLargestUnits(
                      a.penaltyTimeRemaining,
                    ),
                  };
                });
                this.set('punishedPlayers', a);
              });
        },
        getLeaverBusterErrors: function (e) {
          const t = e.errors,
            a = (t || []).filter(
              (e) => 'LEAVER_BUSTER_QUEUE_LOCKOUT' === e.errorType,
            );
          return a.sort(function (e, t) {
            return e.penaltyTimeRemaining === t.penaltyTimeRemaining
              ? e.penalizedSummonerId < t.penalizedSummonerId
                ? 1
                : -1
              : e.penaltyTimeRemaining < t.penaltyTimeRemaining
              ? 1
              : -1;
          });
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '7Pm+heVt',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-lockout\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-lockout\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-lockout\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","leaver-buster-lockout-modal"],["flush-element"],["text","\\n    "],["open-element","h3",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_buster_lockout_header"]],false],["close-element"],["text","\\n    "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lockout-error-body"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["tra","parties_queue_error_leaver_buster_lockout_general_body"]]],null],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lockout-queue-lockout-timer"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","\\n      "],["open-element","h5",[]],["static-attr","class","lockout-timer-label subhead"],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_buster_lockout_timer"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lockout-player-table"],["flush-element"],["text","\\n"],["block",["each"],[["get",["punishedPlayers"]]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","lockout-player-row"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","lockout-player-name"],["flush-element"],["text","\\n            "],["append",["unknown",["punishedPlayer","displayName"]],false],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","lockout-player-punishment-timer"],["flush-element"],["text","\\n            "],["append",["unknown",["punishedPlayer","penaltyTimeRemaining"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["punishedPlayer"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    const o = (0, n.emberDataBinding)({
      Ember: n.Ember,
      websocket: (0, n.getProvider)().getSocket(),
      boundProperties: {
        penalizedSummoner:
          '/lol-summoner/v1/summoners/{{errorData.penalizedSummonerId}}',
      },
    });
    e.exports = n.Ember.Component.extend(o, {
      layout: a(575),
      summonerService: n.Ember.inject.service('summoner'),
      leaverBusterWarningTextHeader: n.Ember.computed(function () {
        return this.get('tra').formatString(
          'parties_queue_error_leaver_buster_party_has_member_warning_not_accepted_header',
        );
      }),
      leaverBusterWarningTextBody: n.Ember.computed(
        'penalizedSummoner',
        function () {
          return this.get('tra').formatString(
            'parties_queue_error_leaver_buster_party_has_member_warning_not_accepted_body',
            {
              penalizedSummonerName: this.get('penalizedSummoner.displayName'),
            },
          );
        },
      ),
    });
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'HojGUoV2',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-tainted-warning\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-tainted-warning\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["leaverBusterWarningTextHeader"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["leaverBusterWarningTextBody"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    const o = a(50);
    a(577);
    const i = (0, n.emberDataBinding)({
      Ember: n.Ember,
      websocket: (0, n.getProvider)().getSocket(),
      logPrefix: 'party:queue-error-dialog:queue-dodge:component',
      basePaths: { matchmaking: '/lol-matchmaking', summoner: '/lol-summoner' },
      boundProperties: {
        currentSummoner: { api: 'summoner', path: '/v1/current-summoner' },
        search: { api: 'matchmaking', path: '/v1/search' },
      },
    });
    e.exports = n.Ember.Component.extend(i, {
      layout: a(578),
      classNames: ['queue-dodge-error-dialog'],
      searchError: n.Ember.computed(
        'search.errors',
        'search.errors.[].penaltyTimeRemaining',
        function () {
          const e = this.get('search.errors');
          if (!e) return null;
          const t = e.find(function (e) {
            return 'QUEUE_DODGER' === e.errorType;
          }, this);
          return t ? t : e[0];
        },
      ),
      timeRemaining: n.Ember.computed.readOnly(
        'searchError.penaltyTimeRemaining',
      ),
      hasTimeRemaining: n.Ember.computed.gt('timeRemaining', 0),
      timeRemainingFormatted: n.Ember.computed('timeRemaining', function () {
        return o.formatSeconds(this.get('timeRemaining'));
      }),
      onSearchErrorPenalizedSummonerIdChange: n.Ember.observer(
        'searchError.penalizedSummonerId',
        function () {
          const e = this.get('searchError.penalizedSummonerId');
          this.dataBindProperty(
            'summoner',
            '/v1/summoners/' + e,
            'penalizedSummoner',
          );
        },
      ),
      penalizedSummonerIsMe: n.Ember.computed(
        'searchError.penalizedSummonerId',
        'currentSummoner.summonerId',
        function () {
          return (
            this.get('searchError.penalizedSummonerId') ===
            this.get('currentSummoner.summonerId')
          );
        },
      ),
      queueErrorMessage: n.Ember.computed(
        'penalizedSummoner.displayName',
        'penalizedSummonerIsMe',
        'tra.ready',
        'tra.parties_queue_error_queue_dodge_myself_body',
        'tra.parties_queue_error_queue_dodge_other_body',
        function () {
          if (this.get('penalizedSummonerIsMe'))
            return this.get('tra.parties_queue_error_queue_dodge_myself_body');
          return this.get('penalizedSummoner')
            ? this.get('tra').formatString(
                'parties_queue_error_queue_dodge_other_body',
                { player: this.get('penalizedSummoner.displayName') },
              )
            : this.get('tra.parties_queue_error_generic_body$html');
        },
      ),
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'mTDGjqst',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\queue-dodge\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\queue-dodge\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\queue-dodge\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_queue_dodge_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-queue-error-body"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["queueErrorMessage"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["queue-dodge-timer ",["helper",["if"],[["get",["hasTimeRemaining"]],"","hidden"],null]]]],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","\\n        "],["open-element","h6",[]],["static-attr","class","queue-dodge-time-remaining-label subhead"],["flush-element"],["append",["unknown",["tra","parties_queue_dodge_timer"]],false],["close-element"],["text","\\n        "],["open-element","h6",[]],["static-attr","class","queue-dodge-time-remaining subhead"],["flush-element"],["append",["unknown",["timeRemainingFormatted"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    e.exports = n.Ember.Component.extend({ layout: a(580) });
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '14H4mbP8',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\prerequisite-queues-not-played\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\prerequisite-queues-not-played\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_prerequisite_queues_not_played_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_prerequisite_queues_not_played_body"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0);
    a(582);
    var i = a(3),
      s = n(i),
      l = a(114),
      r = n(l),
      c = a(26),
      m = n(c),
      d = a(5),
      p = n(d),
      u = a(1),
      g = n(u),
      b = a(583);
    const h = o.EmberAddons.EmberLifeline.RunMixin,
      f = (0, s.default)('plugin:parties:invite-dialog-component');
    e.exports = o.Ember.Component.extend(h, p.default, g.default, m.default, {
      layout: a(584),
      classNames: ['parties-invite-dialog'],
      lobbiesService: o.Ember.inject.service('lobbies'),
      customGamesService: o.Ember.inject.service('custom-games'),
      invitesService: o.Ember.inject.service('invites'),
      currentPartyMemberIds: o.Ember.computed.alias(
        'lobbiesService.currentPartyMemberIds',
      ),
      isCurrentPlayerPartyLeader: o.Ember.computed.alias(
        'lobbiesService.isCurrentPlayerPartyLeader',
      ),
      currentPartyIsFull: o.Ember.computed.alias(
        'lobbiesService.currentPartyIsFull',
      ),
      chatService: o.Ember.inject.service('chat'),
      summonerService: o.Ember.inject.service('summoner'),
      me: o.Ember.computed.alias('chatService.me'),
      friends: o.Ember.computed.alias('chatService.friends'),
      searchError: !1,
      hasNoSearchString: o.Ember.computed.empty('searchString'),
      onDidInsertElement: o.Ember.on('didInsertElement', function () {
        this.element.addEventListener('sendInvitesClicked', () => {
          this.send('sendInvites');
        }),
          this.element.addEventListener('destroyComponent', () => {
            this.send('destroyApplication');
          }),
          this.element.addEventListener('initInviteDialog', () => {
            this.send('initDialog');
          });
        const e = this.element.querySelector('input.search-box-input');
        e &&
          this.runTask(function () {
            e.focus();
          }, 1),
          this._super();
      }),
      inviteHeaderText: o.Ember.computed('tra.ready', function () {
        return this.get('tra.invite_dialog_header');
      }),
      inviteableFriends: o.Ember.computed(
        'me',
        'friends.@each.{canBeInvited,platformId,product}',
        'currentPartyMembersIds.[]',
        function () {
          const e = this.get('me'),
            t = this.get('friends');
          if (!t) return o.Ember.A();
          const a = o.Ember.A(t.filter((t) => t.canBeInvitedBy(e))),
            n = this.get('currentPartyMemberIds') || o.Ember.A(),
            i = a.reject(function (e) {
              return -1 !== n.indexOf(e.summonerId);
            });
          return o.Ember.A(i);
        },
      ),
      selectedInviteableFriends: o.Ember.computed.filterBy(
        'inviteableFriends',
        'checked',
        !0,
      ),
      inviteableSummoners: o.Ember.A(),
      selectedSummoners: o.Ember.computed.filterBy(
        'inviteableSummoners',
        'checked',
        !0,
      ),
      haveSelectedFriends: o.Ember.computed.gt(
        'selectedInviteableFriends.length',
        0,
      ),
      haveSelectedSummoners: o.Ember.computed.gt('selectedSummoners.length', 0),
      haveSomebodySelected: o.Ember.computed.or(
        'haveSelectedFriends',
        'haveSelectedSummoners',
      ),
      haveNobodySelected: o.Ember.computed.not('haveSomebodySelected'),
      haveNobodySelectedObserver: o.Ember.on(
        'didInsertElement',
        o.Ember.observer('haveNobodySelected', function () {
          o.Ember.run.once(this, function () {
            const e = this.get('haveNobodySelected')
              ? 'disableacceptbutton'
              : 'enableacceptbutton';
            this.element.dispatchEvent(new Event(e, { bubbles: !0 }));
          });
        }),
      ),
      inviteableIds: o.Ember.computed(
        'inviteableFriends.@each.id',
        'inviteableSummoners.@each.id',
        function () {
          const e = o.Ember.A(
              this.get('inviteableFriends').filterBy('summonerId'),
            ).mapBy('summonerId'),
            t = o.Ember.A(
              this.get('inviteableSummoners').filterBy('summonerId'),
            ).mapBy('summonerId');
          return o.Ember.A(e.concat(t));
        },
      ),
      friendGroups: o.Ember.computed(
        'inviteableFriends.[]',
        'inviteableFriends.@each.displayGroupId',
        function () {
          return o.lodash.groupBy(
            this.get('inviteableFriends'),
            'displayGroupId',
          );
        },
      ),
      searchStringArray: o.Ember.computed('searchString', function () {
        const e = this.get('searchString') || '';
        return e.split(' ');
      }),
      inviteByNameGroup: o.Ember.computed(
        'inviteableSummoners.[]',
        'searchStringArray',
        function () {
          return o.Ember.Object.create({
            friends: this._filterFriendListBySearchString(
              this.get('inviteableSummoners'),
            ),
          });
        },
      ),
      groups: o.Ember.computed(
        'friendGroups',
        'chatService.groups.@each.id',
        'searchStringArray',
        function () {
          const e = o.lodash.map(this.get('chatService.groups'), (e) => {
              const t = this.get('friendGroups')[e.get('id')];
              return (
                e.set('friends', this._filterFriendListBySearchString(t)), e
              );
            }),
            t = o.Ember.A([b.FRIEND_GROUPS.OFFLINE, b.FRIEND_GROUPS.MOBILE]),
            a = this.filterFriendGroupsByName(e, t);
          return (
            a.sort(function (e, t) {
              return e.priority === t.priority
                ? 0
                : e.priority < t.priority
                ? 1
                : -1;
            }),
            o.Ember.A(a)
          );
        },
      ),
      filterFriendGroupsByName: function (e, t) {
        return o.lodash.filter(e, (e) => -1 === t.indexOf(e.get('name')));
      },
      partyFull: function () {
        this.get('currentPartyIsFull') &&
          this.element.dispatchEvent(
            new Event('closeinvitemodal', { bubbles: !0 }),
          );
      },
      partyFullObserver: o.Ember.observer('currentPartyIsFull', function () {
        this.partyFull();
      }),
      _filterFriendListBySearchString: function (e) {
        return o.Ember.A(
          o.lodash.filter(
            e,
            (e) => {
              const t = (
                e.get('name') +
                (e.get('gameName') || '') +
                '#' +
                (e.get('gameTag') || '')
              )
                .toLowerCase()
                .replace(/\s/g, '');
              return o.lodash.every(this.get('searchStringArray'), (e) =>
                o.lodash.includes(t, e.toLowerCase()),
              );
            },
            this,
          ),
        );
      },
      _shakeSearchBoxContainer: function () {
        const e = this.$('.search-box-container');
        e.addClass('not-found').on('animationend', function () {
          e.removeClass('not-found');
        });
      },
      _parseNames: function (e) {
        e = -1 === e.indexOf(',') ? [e] : e.split(',');
        const t = [];
        for (let a = 0, n; a < e.length; a++) {
          if (((n = e[a]), -1 < n.indexOf('#'))) {
            const e = n.split('#', 2),
              t = e[0].trim(),
              a = e[1].trim(),
              i = o.Ember.A(this.get('friends')),
              s = i.find((e) => e.gameName === t && e.gameTag === a);
            (n = ''), s && s.name && (n = s.name);
          }
          (n = n.trim()), n && t.push(n);
        }
        return t;
      },
      _lookupSummonerByName: function () {
        const e = this.get('searchString');
        if (e) {
          const t = this._parseNames(e);
          1 === t.length
            ? this.get('summonerService')
                .getSummonerByName(t[0])
                .then(
                  (e) =>
                    e && e.summonerId
                      ? void this._addToInviteList(e)
                      : (this.set(
                          'searchError',
                          this.get('tra.invite_dialog_search_error_not_found'),
                        ),
                        void this._shakeSearchBoxContainer()),
                  () => {
                    this._shakeSearchBoxContainer();
                  },
                )
            : 1 < t.length
            ? this.get('summonerService')
                .getSummonersByNames(t)
                .then(
                  (e) => {
                    if (!e || 0 === e.length)
                      return (
                        this.set(
                          'searchError',
                          this.get('tra.invite_dialog_search_error_not_found'),
                        ),
                        void this._shakeSearchBoxContainer()
                      );
                    for (let t = 0; t < e.length; t++)
                      this._addToInviteList(e[t]);
                  },
                  () => {
                    this._shakeSearchBoxContainer();
                  },
                )
            : this._shakeSearchBoxContainer();
        }
      },
      _canAddToInviteList: function (e) {
        if (!e) return !1;
        const t = -1 < this.get('currentPartyMemberIds').indexOf(e);
        if (t) return !1;
        const a = o.Ember.A(this.get('friends')),
          n = this.get('me'),
          i = a.findBy('summonerId', e);
        if (i) {
          if (!i.canBeInvitedBy(n)) return !1;
          i.set('checked', !0);
        }
        return !0;
      },
      _addToInviteList: function (e) {
        const t = e ? e.summonerId : void 0;
        return this._canAddToInviteList(t)
          ? void (!this.get('inviteableIds').includes(t) &&
              this.get('inviteableSummoners').insertAt(
                0,
                r.default.create({
                  summonerId: t,
                  name: e.displayName,
                  checked: !0,
                }),
              ),
            this.set('searchString', ''))
          : (this.set(
              'searchError',
              this.get('tra.invite_dialog_search_error_not_available'),
            ),
            void this._shakeSearchBoxContainer());
      },
      aggregateSelectedPlayers: function () {
        const e = this.get('selectedInviteableFriends'),
          t = this.get('selectedSummoners');
        return o.Ember.A(e.concat(t));
      },
      actions: {
        inputChanged: function (t, a) {
          const e = a.keyCode || !1;
          if (13 === e) {
            const e = this.get('searchString');
            e && a.stopPropagation();
          } else this.set('searchError', !1);
        },
        addToInviteList: function () {
          this._lookupSummonerByName();
        },
        sendInvites: function () {
          const e = this.aggregateSelectedPlayers(),
            t = e.mapBy('summonerId');
          t.length &&
            this.get('lobbiesService')
              .invitePlayers(t)
              .catch((e) => {
                f('Unable to invite summoners', e);
              });
        },
        destroyApplication: function () {
          this.componentFactoryApp.destroy();
        },
        initDialog: function () {
          this.get('searchError') && this.set('searchError', ''),
            this.get('inviteableSummoners.length') &&
              this.set('inviteableSummoners', o.Ember.A());
          const e = this.get('friends');
          e &&
            e.forEach((e) => {
              e.get('checked') && e.set('checked', !1);
            });
        },
      },
    });
  },
  function () {},
  function (e, t) {
    'use strict';
    Object.defineProperty(t, '__esModule', { value: !0 });
    t.FRIEND_GROUPS = { OFFLINE: 'OFFLINE', MOBILE: 'MOBILE' };
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'd1CTrjup',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-scrollable",[]],["static-attr","class","parties-invite-dialog-container"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","search-box-container"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-flat-input",[]],["static-attr","class","search-box"],["flush-element"],["text","\\n        "],["append",["helper",["input"],null,[["maxlength","class","enter","type","value","placeholder","key-down"],["209","search-box-input","addToInviteList","text",["get",["searchString"]],["get",["tra","invite_dialog_search_placeholder"]],"inputChanged"]]],false],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","button",[]],["static-attr","class","search"],["dynamic-attr","disabled",["unknown",["hasNoSearchString"]],null],["modifier",["action"],[["get",[null]],"addToInviteList"]],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","search-error"],["flush-element"],["text","\\n"],["block",["if"],[["get",["searchError"]]],null,1],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","available-players"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","invite_dialog_available_players"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","groups"],["flush-element"],["text","\\n      "],["append",["helper",["invite-dialog-group"],null,[["group","selectedPlayers","inviteByName"],[["get",["inviteByNameGroup"]],["get",["selectedPlayers"]],true]]],false],["text","\\n\\n"],["block",["each"],[["get",["groups"]]],null,0],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["text","\\n  "],["comment"," here are some computeds we need in a template somewhere, so they update "],["text","\\n  "],["append",["unknown",["lobbiesService","notInLobbyObserver"]],false],["text","\\n  "],["append",["unknown",["lobbiesService","invitationsObserver"]],false],["text","\\n  "],["append",["unknown",["customGamesService","isCustomUI"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["invite-dialog-group"],null,[["group","selectedPlayers"],[["get",["group"]],["get",["selectedPlayers"]]]]],false],["text","\\n"]],"locals":["group"]},{"statements":[["text","        "],["append",["unknown",["searchError"]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(586);
    e.exports = n.Ember.Component.extend({
      layout: a(587),
      classNames: ['invite-dialog-group'],
      classNameBindings: ['isExpanded:expanded'],
      isExpanded: !0,
      inviteByName: !1,
      checkDisabled: !1,
      groupName: n.Ember.computed('group.name', 'tra.ready', function () {
        const e = this.get('group.name');
        return e === '**Default'
          ? this.get('tra.social_group_label_default')
          : this.get('inviteByName')
          ? this.get('tra.social_group_label_invite_by_name')
          : e;
      }),
      actions: {
        toggleExpanded: function () {
          this.toggleProperty('isExpanded');
        },
      },
    });
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'BxBiCGjc',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\group\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\group\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\group\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","header"],["modifier",["action"],[["get",[null]],"toggleExpanded"]],["flush-element"],["append",["unknown",["groupName"]],false],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","list-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["group","friends"]]],null,1],["text","  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","                "],["open-element","span",[]],["static-attr","class","invite-dialog-friend-gnt"],["flush-element"],["append",["unknown",["friend","gameName"]],false],["text"," #"],["append",["unknown",["friend","gameTag"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","invite-dialog-friend"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","invite-dialog-friend-checkbox"],["flush-element"],["text","\\n          "],["append",["helper",["input"],null,[["slot","type","id","checked","name"],["input","checkbox",["get",["friend","checkboxId"]],["get",["friend","checked"]],["get",["friend","checkboxId"]]]]],false],["text","\\n          "],["open-element","label",[]],["static-attr","slot","label"],["dynamic-attr","for",["unknown",["friend","checkboxId"]],null],["flush-element"],["open-element","span",[]],["static-attr","class","flat-checkbox-span"],["flush-element"],["close-element"],["text","\\n            "],["open-element","span",[]],["static-attr","class","invite-dialog-friend-name"],["flush-element"],["text","\\n              "],["open-element","span",[]],["flush-element"],["append",["unknown",["friend","name"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["friend","gameName"]]],null,0],["text","            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":["friend"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(12),
      i = a(1),
      s = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(i);
    a(589),
      (e.exports = n.Ember.Component.extend(s.default, {
        layout: a(590),
        classNames: ['parties-position-selector-component'],
        classNameBindings: ['isMap21'],
        attributeBindings: ['primaryPosition', 'secondaryPosition'],
        playerPositionData: null,
        selectorId: n.Ember.computed.alias('playerPositionData.selectorId'),
        targetElement: n.Ember.computed.alias(
          'playerPositionData.targetElement',
        ),
        selectedCallback: n.Ember.computed.alias(
          'playerPositionData.selectedCallback',
        ),
        currentPosition: n.Ember.computed.alias(
          'playerPositionData.currentPosition',
        ),
        primaryPosition: n.Ember.computed.alias(
          'playerPositionData.primaryPosition',
        ),
        secondaryPosition: n.Ember.computed.alias(
          'playerPositionData.secondaryPosition',
        ),
        isMap21: n.Ember.computed.alias('playerPositionData.isMap21'),
        currentlyHoveredPosition: null,
        previouslyHoveredPosition: null,
        currentlySelectedPosition: null,
        map21ExpectedJunglerCount: n.tra.numeral(2).format(),
        map21ExpectedLanerCount: n.tra.numeral(3).format(),
        onDidInsertElement: n.Ember.on('didInsertElement', function () {
          this.resetSelector();
        }),
        onTargetElementChanged: n.Ember.observer(
          'playerPositionData.targetElementUpdated',
          function () {
            n.Ember.run.once(this, this.resetSelector);
          },
        ),
        resetSelector: function () {
          this.set(
            'previouslyHoveredPosition',
            this.get('currentlyHoveredPosition'),
          ),
            this.playSound('/fe/lol-parties/sfx-radialmenu-open.ogg'),
            this.updateLocation(),
            this.updatePositionText(o.POSITIONS.UNSELECTED),
            this.updateCurrentPositionIcon(),
            this.updatePointer(o.POSITIONS.UNSELECTED),
            this.updateIcon(o.POSITIONS.UNSELECTED),
            this.element.classList.remove('moving');
        },
        updateLocation: function () {
          const e = this.get('targetElement');
          if (!e) return !1;
          const t = e.getBoundingClientRect(),
            a = t.width / 2,
            n = t.height / 2,
            o = this.positionSelector();
          if (!o) return !1;
          const i = o.getBoundingClientRect(),
            s = i.width / 2,
            l = i.height / 2;
          let r = t.top - l;
          (r += n), (o.style.top = `${r}px`);
          let c = t.left - s;
          return (c += a), (o.style.left = `${c}px`), !0;
        },
        updateCurrentPositionIcon: function () {
          const e = this.get('currentPosition'),
            t = this.element.querySelector('.parties-current-position-icon');
          if (t) {
            const a = e ? 'icon-' + e.toLowerCase() : '';
            t.className = 'parties-current-position-icon ' + a;
          }
        },
        selectPosition: function (e) {
          this.playSound('/fe/lol-parties/sfx-radialmenu-role-select.ogg');
          const t = this.get('playerPositionData');
          this.set('currentlySelectedPosition', e);
          const a = t.get('selectedCallback');
          a(this.get('selectorId'), e.toLowerCase());
        },
        handleHoverIn: function (e) {
          this.set(
            'previouslyHoveredPosition',
            this.get('currentlyHoveredPosition'),
          ),
            this.set('currentlyHoveredPosition', e),
            this.get('previouslyHoveredPosition') !==
              this.get('currentlyHoveredPosition') &&
              this.playSound('/fe/lol-parties/sfx-radialmenu-role-hover.ogg'),
            this.updatePointer(e),
            this.updateIcon(e),
            this.updatePositionText(e);
        },
        handleHoverOut: function (e) {
          const t = e || o.POSITIONS.UNSELECTED,
            a = this.positionPointer(t),
            n = this.positionPointer(o.POSITIONS.UNSELECTED);
          n && n.classList.remove('hidden'), a && a.classList.add('hidden');
          const i = this.positionIcon(e);
          i && i.classList.remove('active');
        },
        updatePositionText: function (e) {
          const t = this.get('previouslyHoveredPosition');
          t &&
            t !== o.POSITIONS.UNSELECTED &&
            this.positionText(t).classList.add('hidden');
          const a = this.positionText(e);
          e !== o.POSITIONS.UNSELECTED && a.classList.remove('hidden');
        },
        updatePointer: function (e) {
          const t = e || o.POSITIONS.UNSELECTED,
            a = this.get('previouslyHoveredPosition') || o.POSITIONS.UNSELECTED,
            n = this.positionPointer(t),
            i = this.positionPointer(a),
            s = this.positionPointer(o.POSITIONS.UNSELECTED);
          a && i.classList.add('hidden'),
            n && n.classList.remove('hidden'),
            t !== o.POSITIONS.UNSELECTED && s.classList.add('hidden');
        },
        updateIcon: function (e) {
          const t =
              this.get('previouslyHoveredPosition') || o.POSITIONS.UNSELECTED,
            a = this.positionIcon(t);
          a && a.classList.remove('active');
          const n = this.positionIcon(e);
          n && n.classList.add('active');
        },
        positionSelector: function () {
          return this.element.querySelector('.parties-position-selector');
        },
        positionPointer: function (e) {
          const t = '.parties-position-pointer-' + e.toLowerCase();
          return this.element.querySelector(t);
        },
        positionIcon: function (e) {
          const t = '.parties-position-icon-' + e.toLowerCase();
          return this.element.querySelector(t);
        },
        positionText: function (e) {
          const t = '.position-text-' + e.toLowerCase();
          return this.element.querySelector(t);
        },
        actions: {
          positionHoverIn: function (e) {
            const t = e.toUpperCase();
            this.handleHoverIn(o.POSITIONS[t]);
          },
          positionHoverOut: function (e) {
            const t = e.toUpperCase();
            this.handleHoverOut(o.POSITIONS[t]);
          },
          positionSelected: function (e) {
            'unselected' === e && (e = this.get('currentPosition')),
              'none' === e && (e = 'unselected');
            const t = e.toUpperCase();
            this.selectPosition(o.POSITIONS[t]);
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'WLBY0lEH',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\position-selector-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\position-selector-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\position-selector-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-full-page-backdrop",[]],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-position-selector"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-position-selector-small-backdrop"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","parties-position-selector-hextech-dashed-ring"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","position-selection-icons"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-icon parties-position-icon-utility"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","parties-position-text position-text-utility hidden"],["flush-element"],["text","\\n              "],["append",["unknown",["tra","parties_position_utility"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-icon parties-position-icon-middle"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","parties-position-text position-text-middle hidden"],["flush-element"],["text","\\n              "],["append",["unknown",["tra","parties_position_middle"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-icon parties-position-icon-jungle"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","parties-position-text position-text-jungle hidden"],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","sr-text"],["flush-element"],["append",["unknown",["tra","parties_position_jungle"]],false],["close-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","map21-text"],["flush-element"],["append",["unknown",["tra","parties_position_jungle"]],false],["open-element","div",[]],["static-attr","class","map21-position-count"],["flush-element"],["text","("],["append",["unknown",["map21ExpectedJunglerCount"]],false],["text",")"],["close-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-icon parties-position-icon-bottom"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","parties-position-text position-text-bottom hidden"],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","sr-text"],["flush-element"],["append",["unknown",["tra","parties_position_bottom"]],false],["close-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","map21-text"],["flush-element"],["append",["unknown",["tra","parties_position_lane"]],false],["open-element","div",[]],["static-attr","class","map21-position-count"],["flush-element"],["text","("],["append",["unknown",["map21ExpectedLanerCount"]],false],["text",")"],["close-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-icon parties-position-icon-fill"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","parties-position-text position-text-fill hidden"],["flush-element"],["text","\\n              "],["append",["unknown",["tra","parties_position_fill"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-icon parties-position-icon-top"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","parties-position-text position-text-top hidden"],["flush-element"],["text","\\n              "],["append",["unknown",["tra","parties_position_top"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n\\n        "],["open-element","div",[]],["static-attr","class","position-selection-pointers"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-pointer parties-position-pointer-unselected"],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-pointer parties-position-pointer-utility hidden"],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-pointer parties-position-pointer-middle hidden"],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-pointer parties-position-pointer-jungle hidden"],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-pointer parties-position-pointer-bottom hidden"],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-pointer parties-position-pointer-fill hidden"],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","position-selection-pointer parties-position-pointer-top hidden"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n\\n        "],["open-element","ul",[]],["static-attr","class","parties-position-selector-pie"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isMap21"]]],null,1,0],["text","        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-current-position-icon"],["modifier",["action"],[["get",[null]],"positionSelected","unselected"]],["modifier",["action"],[["get",[null]],"positionHoverIn","unselected"],[["on"],["mouseEnter"]]],["flush-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","li",[]],["static-attr","class","position-selection position-jungle"],["modifier",["action"],[["get",[null]],"positionHoverIn","jungle"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"positionHoverOut","jungle"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"positionSelected","jungle"],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"positionSelected","jungle"]],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","position-selection-proxy"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","li",[]],["static-attr","class","position-selection position-middle"],["modifier",["action"],[["get",[null]],"positionHoverIn","middle"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"positionHoverOut","middle"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"positionSelected","middle"],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"positionSelected","middle"]],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","position-selection-proxy"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","li",[]],["static-attr","class","position-selection position-bottom"],["modifier",["action"],[["get",[null]],"positionHoverIn","bottom"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"positionHoverOut","bottom"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"positionSelected","bottom"],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"positionSelected","bottom"]],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","position-selection-proxy"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","li",[]],["static-attr","class","position-selection position-utility"],["modifier",["action"],[["get",[null]],"positionHoverIn","utility"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"positionHoverOut","utility"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"positionSelected","utility"],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"positionSelected","utility"]],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","position-selection-proxy"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","li",[]],["static-attr","class","position-selection position-fill"],["modifier",["action"],[["get",[null]],"positionHoverIn","fill"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"positionHoverOut","fill"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"positionSelected","fill"],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"positionSelected","fill"]],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","position-selection-proxy"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","li",[]],["static-attr","class","position-selection position-fill"],["modifier",["action"],[["get",[null]],"positionHoverIn","fill"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"positionHoverOut","fill"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"positionSelected","fill"],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"positionSelected","fill"]],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","position-selection-proxy"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","li",[]],["static-attr","class","position-selection position-fill"],["modifier",["action"],[["get",[null]],"positionHoverIn","fill"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"positionHoverOut","fill"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"positionSelected","fill"],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"positionSelected","fill"]],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","position-selection-proxy"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","li",[]],["static-attr","class","position-selection position-top"],["modifier",["action"],[["get",[null]],"positionHoverIn","top"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"positionHoverOut","top"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"positionSelected","top"],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"positionSelected","top"]],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","position-selection-proxy"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","li",[]],["static-attr","class","position-selection position-jungle"],["modifier",["action"],[["get",[null]],"positionHoverIn","jungle"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"positionHoverOut","jungle"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"positionSelected","jungle"],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"positionSelected","jungle"]],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","position-selection-proxy"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","li",[]],["static-attr","class","position-selection position-bottom"],["modifier",["action"],[["get",[null]],"positionHoverIn","bottom"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"positionHoverOut","bottom"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"positionSelected","bottom"],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"positionSelected","bottom"]],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","position-selection-proxy"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","li",[]],["static-attr","class","position-selection position-fill"],["modifier",["action"],[["get",[null]],"positionHoverIn","fill"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"positionHoverOut","fill"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"positionSelected","fill"],[["on"],["mouseUp"]]],["modifier",["action"],[["get",[null]],"positionSelected","fill"]],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","position-selection-proxy"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(592), (e.exports = n.Ember.Component.extend({ layout: a(593) }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '62TSzej3',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-toast-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-toast-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-toast-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","notification"],["flush-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","low_priority_queue_notification_body"]],false],["close-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","low-priority-player-list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["penalizedPlayerNames"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","li",[]],["static-attr","class","low-priority-player-name"],["flush-element"],["append",["get",["name"]],false],["close-element"],["text","  \\n"]],"locals":["name"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(50),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    const s = (0, n.emberDataBinding)({
      Ember: n.Ember,
      websocket: (0, n.getProvider)().getSocket(),
      logPrefix: 'party:self-low-priority-dialog',
      basePaths: { matchmaking: '/lol-matchmaking' },
      boundProperties: { search: { api: 'matchmaking', path: '/v1/search' } },
    });
    e.exports = n.Ember.Component.extend(s, {
      layout: a(595),
      classNames: ['low-priority-dialog'],
      lowPrioritytimeRemaining: n.Ember.computed.readOnly(
        'search.lowPriorityData.penaltyTimeRemaining',
      ),
      timeRemainingFormatted: n.Ember.computed(
        'lowPrioritytimeRemaining',
        function () {
          return i.default.formatSeconds(this.get('lowPrioritytimeRemaining'));
        },
      ),
    });
  },
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '4TT0kWHp',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-modal-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-modal-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","low_priority_queue_modal_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","parties-queue-error-body"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","low_priority_queue_modal_self_body"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["text","\\n      "],["open-element","h6",[]],["static-attr","class","low-priority-dialog-time-remaining-label subhead"],["flush-element"],["append",["unknown",["tra","low_priority_queue_modal_timer_label"]],false],["close-element"],["text","\\n      "],["open-element","h6",[]],["static-attr","class","low-priority-dialog-time-remaining subhead"],["flush-element"],["append",["unknown",["timeRemainingFormatted"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(597),
      (e.exports = n.Ember.Component.extend({
        layout: a(598),
        partySettings: null,
        hideAutofillModal: !1,
        checkboxObserver: n.Ember.on(
          'DidInsertElement',
          n.Ember.observer('hideAutofillModal', function () {
            n.Ember.run.once(this, function () {
              this.updateAutofillSetting();
            });
          }),
        ),
        updateAutofillSetting: function () {
          this.set(
            'partySettings.permanentHideAutofillModal',
            this.get('hideAutofillModal'),
          );
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'BMLlx8mh',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\autofill-setting-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\autofill-setting-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\autofill-setting-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","autofill-settings"],["flush-element"],["text","\\n  "],["append",["unknown",["tra","parties_autofill_settings_dialog_text"]],false],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","\\n      "],["open-element","lol-uikit-flat-checkbox",[]],["flush-element"],["text","\\n        "],["append",["helper",["input"],null,[["slot","type","name","checked"],["input","checkbox","permanentHideAutofillModal",["get",["hideAutofillModal"]]]]],false],["text","\\n        "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","permanentHideAutofillModal"],["flush-element"],["append",["unknown",["tra","parties_permanentHideAutofillModal"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var o = a(0),
      i = a(1),
      s = n(i),
      l = a(26),
      r = n(l),
      c = a(13);
    a(600),
      (e.exports = o.Ember.Component.extend(r.default, s.default, {
        layout: a(601),
        classNames: ['game-mode-tutorial'],
        currentIndex: null,
        tutorialCards: [],
        carouselSfxUrl: c.SFX_URLS.SFX_UIKIT_CLICK_AND_SLIDE,
        tutorialItems: o.Ember.computed('tutorialCards.[]', function () {
          const e = this.get('tutorialCards');
          if (!e || 0 === e.length) return o.Ember.A([]);
          const t = e.map((e, t) =>
            o.Ember.Object.create(e, { step: o.tra.numeral(t + 1).format() }),
          );
          return o.Ember.A(t);
        }),
        leftArrowDisabled: o.Ember.computed.equal('currentIndex', 0),
        isViewingLastItem: o.Ember.computed(
          'currentIndex',
          'tutorialItems.[]',
          function () {
            return (
              this.get('currentIndex') >= this.get('tutorialItems.length') - 1
            );
          },
        ),
        rightArrowDisabled: o.Ember.computed.alias('isViewingLastItem'),
        didInsertElement: function () {
          this._super(...arguments),
            this.get('tutorialItems') && this.handleSelectItem(0);
        },
        _setSelectedClass: function (e, t) {
          for (let a = 0; a < t.length; ++a)
            a === e
              ? t[a].classList.add('selected')
              : t[a].classList.remove('selected');
        },
        handleSelectItem: function (e) {
          if (
            !(
              0 >= this.get('tutorialItems.length') ||
              0 > e ||
              e > this.get('tutorialItems.length') ||
              e === this.get('currentIndex')
            )
          ) {
            const t = this.element.querySelector(
                '.game-mode-tutorial-carousel',
              ),
              a = t.children,
              n = a[e],
              o = n.offsetLeft,
              i = (t.offsetWidth - n.offsetWidth) / 2;
            (t.style.transform = `translateX(${i - o}px)`),
              this._setSelectedClass(e, a);
            const s = this.element.querySelectorAll('.navigation-pip');
            this._setSelectedClass(e, s), this.set('currentIndex', e);
          }
        },
        actions: {
          selectItem: function (e) {
            this.playSound(this.carouselSfxUrl), this.handleSelectItem(e);
          },
          advanceItem: function (e) {
            this.handleSelectItem(this.get('currentIndex') + e);
          },
          confirmClicked: function () {
            if (this.get('isViewingLastItem')) {
              const e = o.Navigation.getFullPageModalManager();
              e.close();
            } else this.send('advanceItem', 1);
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'pfbh0Pre',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-tutorial-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-tutorial-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-tutorial-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-backdrop-magic",[]],["static-attr","class","game-mode-tutorial-background"],["flush-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","game-mode-tutorial-content"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-carousel"],["flush-element"],["text","\\n"],["block",["each"],[["get",["tutorialItems"]]],null,1],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-navigation"],["flush-element"],["text","\\n"],["block",["each"],[["get",["tutorialItems"]]],null,0],["text","  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-button",[]],["static-attr","class","game-mode-tutorial-confirm-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"confirmClicked"],null],null],["flush-element"],["text","\\n    "],["append",["helper",["if"],[["get",["isViewingLastItem"]],["get",["tra","tutorial_confirm_button_text"]],["get",["tra","tutorial_next_button_text"]]],null],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-arrow-button",[]],["static-attr","class","game-mode-tutorial-carousel-arrow left-arrow"],["static-attr","direction","left"],["dynamic-attr","disabled",["unknown",["leftArrowDisabled"]],null],["dynamic-attr","click-sfx-src",["unknown",["carouselSfxUrl"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"advanceItem",-1],null],null],["flush-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-arrow-button",[]],["static-attr","class","game-mode-tutorial-carousel-arrow right-arrow"],["static-attr","direction","right"],["dynamic-attr","disabled",["unknown",["rightArrowDisabled"]],null],["dynamic-attr","click-sfx-src",["unknown",["carouselSfxUrl"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"advanceItem",1],null],null],["flush-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","navigation-pip"],["modifier",["action"],[["get",[null]],"selectItem",["get",["index"]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":["tutorialItem","index"]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-carousel-item"],["dynamic-attr","class",["unknown",["tutorialItem","className"]],null],["modifier",["action"],[["get",[null]],"selectItem",["get",["index"]]]],["flush-element"],["text","\\n        "],["open-element","lol-uikit-dialog-frame",[]],["static-attr","appearance",""],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-carousel-item-content"],["dynamic-attr","style",["concat",["background-image:url(\'",["unknown",["tutorialItem","imagePath"]],"\')"]]],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","top-block"],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","step-block"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","step"],["flush-element"],["append",["unknown",["tutorialItem","step"]],false],["close-element"],["text","\\n              "],["close-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","text-block"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["tutorialItem","header"]],false],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","description"],["flush-element"],["append",["unknown",["tutorialItem","description"]],false],["close-element"],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","footer"],["flush-element"],["text","\\n              "],["append",["unknown",["tutorialItem","footer"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":["tutorialItem","index"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(603),
      (e.exports = n.Ember.Component.extend({
        layout: a(604),
        classNames: ['game-mode-one-page-tutorial'],
        title: null,
        subheader: null,
        tutorialCards: [],
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'CbSwILim',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-one-page-tutorial-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-one-page-tutorial-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-one-page-tutorial-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","header-group"],["flush-element"],["text","\\n\\t"],["open-element","div",[]],["static-attr","class","header"],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n\\t"],["open-element","div",[]],["static-attr","class","sub-header"],["flush-element"],["append",["unknown",["subheader"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","cards"],["flush-element"],["text","\\n"],["block",["each"],[["get",["tutorialCards"]]],null,1],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","\\t\\t"],["open-element","div",[]],["static-attr","class","arrow"],["flush-element"],["text","\\n\\t\\t\\t"],["comment"," Waiting on design to fill this in "],["text","\\n\\t\\t"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["index"]]],null,0],["text","\\t"],["open-element","div",[]],["static-attr","class","card"],["flush-element"],["text","\\n\\t\\t"],["open-element","div",[]],["static-attr","class","card-header-img"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["card","imagePath"]],")"]]],["flush-element"],["close-element"],["text","\\n\\t\\t"],["open-element","div",[]],["static-attr","class","card-title"],["flush-element"],["append",["helper",["sanitize"],[["get",["card","header"]]],null],false],["close-element"],["text","\\n\\t\\t"],["open-element","div",[]],["static-attr","class","card-body"],["flush-element"],["append",["helper",["sanitize"],[["get",["card","description"]]],null],false],["close-element"],["text","\\n\\t"],["close-element"],["text","\\n"]],"locals":["card","index"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(119);
    a(606),
      (e.exports = n.Ember.Component.extend({
        classNames: ['social-leaderboard-feature-flyout'],
        layout: a(607),
        lobbiesService: n.Ember.inject.service('lobbies'),
        socialLeaderboardService: n.Ember.inject.service('socialLeaderboard'),
        leaderboardData: [],
        filteredData: [],
        nextUpdateTime: 0,
        isLoading: !1,
        currentPlayerCanInvite: n.Ember.computed.alias(
          'lobbiesService.currentPlayerCanInvite',
        ),
        isFriendsFound: n.Ember.computed('filteredData', function () {
          const e = this.get('filteredData');
          return 0 < e.length;
        }),
        hasEnoughFriends: n.Ember.computed(
          'minFriendCount',
          'numFriends',
          function () {
            return this.get('numFriends') >= this.get('minFriendCount');
          },
        ),
        didReceiveAttrs: function () {
          this._super(...arguments),
            this.get('hasEnoughFriends') && this.querySocialLeaderboardData();
        },
        didInsertElement() {
          this._super(...arguments), this.get('currentPlayerCanInvite');
        },
        init: function () {
          this._super(...arguments),
            (this._chatBinding = (0, n.dataBinding)(
              '/lol-chat',
              (0, n.getProvider)().getSocket(),
            )),
            this._chatBinding.observe(
              '/v1/friends',
              this,
              this.onFriendsChange,
            );
        },
        querySocialLeaderboardData: function () {
          const e = this.get('selected.queue.type');
          if (!e) return void this.set('hasError', !0);
          this.set('isLoading', !0), this.set('hasError', !1);
          const t = this.get('socialLeaderboardService');
          t.getSocialLeaderboardData(e)
            .then((e) => {
              const t = e.rowData,
                a = this.get('onResetNextUpdateTime'),
                n = 1e3 * e.nextUpdateTime;
              this.set('leaderboardData', [].concat(t).reverse()),
                this.set('nextUpdateTime', n),
                a && a(n),
                this.set('isLoading', !1);
            })
            .catch(() => {
              this.set('isLoading', !1),
                this.set('hasError', !0),
                n.Telemetry.sendEvent(
                  'social-leaderboard-data-acquisition-failure',
                );
            });
        },
        onFriendsChange: function (e) {
          if (e) {
            const t = (0, o.friendsWithSummonerNamesCount)(e);
            this.set('numFriends', t);
          }
        },
        actions: {
          refreshLeaderboard() {
            this.querySocialLeaderboardData();
          },
          updateFilteredData(e) {
            this.set('filteredData', e);
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '6MIHrxj8',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\feature-flyout-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\feature-flyout-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\feature-flyout-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLoading"]]],null,7,6],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["unknown",["social-leaderboard-friend-not-found"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["social-leaderboard-table"],null,[["leaderboardData","currentSummonerName","closeSocialLeaderboard"],[["get",["filteredData"]],["get",["currentSummonerName"]],["get",["closeSocialLeaderboard"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["social-leaderboard-header"],null,[["selected","nextUpdateTime","onRefresh"],[["get",["selected"]],["get",["nextUpdateTime"]],["helper",["action"],[["get",[null]],"refreshLeaderboard"],null]]]],false],["text","\\n      "],["append",["helper",["social-leaderboard-friend-filter"],null,[["leaderboardData","updateFilteredData"],[["get",["leaderboardData"]],["helper",["action"],[["get",[null]],"updateFilteredData"],null]]]],false],["text","\\n"],["block",["if"],[["get",["isFriendsFound"]]],null,1,0]],"locals":[]},{"statements":[["text","      "],["append",["helper",["social-leaderboard-not-enough-friends"],null,[["onAddFriends"],[["helper",["action"],[["get",[null]],"openFriendFinder"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["unless"],[["get",["hasEnoughFriends"]]],null,3,2],["text","  "]],"locals":[]},{"statements":[["text","    "],["append",["unknown",["social-leaderboard-error-state"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasError"]]],null,5,4]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","social-leaderboard-loading-animation-container"],["flush-element"],["text","\\n      "],["append",["unknown",["hextech-loading-animation"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(79),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o),
      s = a(80),
      l = a(7);
    a(609),
      (e.exports = n.Ember.Component.extend(i.default, {
        classNames: ['social-leaderboard-header'],
        layout: a(610),
        countdownLabel: n.Ember.computed.alias(
          'tra.social_leaderboard_next_ladder_update_countdown_label',
        ),
        socialLeaderboardQueueText: n.Ember.computed(
          'tra',
          'selected.queue.name',
          function () {
            const e = this.get('selected.queue.type'),
              t = this.get('tra');
            return e === l.QUEUE_TYPE.RANKED_FLEX_SR
              ? t.get('social_leaderboard_ranked_flex_sr_text')
              : t.get('social_leaderboard_ranked_solo_5x5_text');
          },
        ),
        actions: {},
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '5FcFL9KI',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\header-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\header-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\header-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-header-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-header-icon"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-header-text-container"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-flat-textarea",[]],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","social-leaderboard-header-text"],["flush-element"],["text","\\n                "],["append",["unknown",["tra","social_leaderboard_ranked_title"]],false],["text","\\n            "],["close-element"],["text","\\n            "],["append",["helper",["social-leaderboard-countdown-timer"],null,[["countdownLabel","countdownToTime","onRefresh"],[["get",["countdownLabel"]],["get",["nextUpdateTime"]],["get",["onRefresh"]]]]],false],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-queue-container"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","social-leaderboard-queue-visual"],["flush-element"],["text","\\n            "],["append",["unknown",["socialLeaderboardQueueText"]],false],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    function n(e) {
      return 10 > e ? '0' + e : e;
    }
    var o = a(0),
      i = a(80);
    a(612),
      (e.exports = o.Ember.Component.extend({
        classNames: ['social-leaderboard-countdown-timer'],
        layout: a(613),
        totalTime: 0,
        elapsedTime: 0,
        countdownToTime: 0,
        prevCountdownToTime: 0,
        remainingTime: o.Ember.computed(
          'elapsedTime',
          'totalTime',
          function () {
            const e = this.get('totalTime') - this.get('elapsedTime');
            return 0 < e ? e : 0;
          },
        ),
        countdownTimeLeft: o.Ember.computed('remainingTime', function () {
          const e = this.get('remainingTime'),
            t = o.moment.duration(e);
          return `${n(t.hours())}:${n(t.minutes())}:${n(t.seconds())}`;
        }),
        hasFinished: o.Ember.computed('remainingTime', function () {
          return 0 === this.get('remainingTime');
        }),
        didReceiveAttrs() {
          this._super(...arguments);
          const e = this.get('countdownToTime');
          e !== this.prevCountdownToTime &&
            (this.stop(),
            this.reset(),
            this.set('totalTime', e - Date.now()),
            this.notifyPropertyChange('totalTime'),
            this.start(),
            (this.prevCountdownToTime = e));
        },
        willDestroyElement: function () {
          this._super(...arguments), o.Ember.run.cancel(this.get('timer'));
        },
        reset() {
          this.set('elapsedTime', 0), this.set('currentTime', Date.now());
        },
        start() {
          this.stop(), this.set('currentTime', Date.now()), this.tick();
        },
        stop() {
          const e = this.get('timer');
          e && (o.Ember.run.cancel(e), this.set('timer', null));
        },
        tick() {
          if (this.get('hasFinished')) {
            this.stop();
            const e = this.get('onRefresh');
            return void e();
          }
          const e = this.get('currentTime'),
            t = this.get('elapsedTime'),
            a = Date.now();
          this.set('elapsedTime', t + (a - e)),
            this.set('currentTime', a),
            this.set(
              'timer',
              o.Ember.run.later(this, this.tick, i.COUNTDOWN_INTERVAL_MS),
            );
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'NN5LIYBA',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\countdown-timer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\countdown-timer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\countdown-timer-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","countdown-timer-component"],["flush-element"],["text","\\n  "],["append",["unknown",["countdownLabel"]],false],["text","\\n  "],["open-element","div",[]],["static-attr","class","countdown-time-left"],["flush-element"],["text","\\n    "],["append",["unknown",["countdownTimeLeft"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(615),
      (e.exports = n.Ember.Component.extend({
        classNames: ['social-leaderboard-table'],
        layout: a(616),
        actions: {},
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '/WDDoBPI',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\table-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\table-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\table-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-table-container"],["flush-element"],["text","\\n  "],["open-element","table",[]],["static-attr","class","social-leaderboard-table"],["flush-element"],["text","\\n    "],["open-element","thead",[]],["flush-element"],["text","\\n      "],["open-element","tr",[]],["static-attr","class","social-leaderboard-table-header"],["flush-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_position_column_header"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_rank_column_header"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_summoners_column_header"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_wins_column_header"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","body",[]],["static-attr","class","social-leaderboard-table-body"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-scrollable",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["leaderboardData"]]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["append",["helper",["social-leaderboard-row"],null,[["leaderboardPosition","leaderboardRowIndex","division","tier","leaguePoints","summonerName","summonerId","puuid","wins","profileIconId","playerAvailability","isGiftable","currentSummonerName","closeSocialLeaderboard"],[["get",["leaderboardRowData","leaderboardPosition"]],["get",["index"]],["get",["leaderboardRowData","division"]],["get",["leaderboardRowData","tier"]],["get",["leaderboardRowData","leaguePoints"]],["get",["leaderboardRowData","summonerName"]],["get",["leaderboardRowData","summonerId"]],["get",["leaderboardRowData","puuid"]],["get",["leaderboardRowData","wins"]],["get",["leaderboardRowData","profileIconId"]],["get",["leaderboardRowData","availability"]],["get",["leaderboardRowData","isGiftable"]],["get",["currentSummonerName"]],["get",["closeSocialLeaderboard"]]]]],false],["text","\\n"]],"locals":["leaderboardRowData","index"]}],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(80);
    a(618),
      (e.exports = n.Ember.Component.extend({
        classNames: ['social-leaderboard-row'],
        classNameBindings: ['isPlayerRow'],
        layout: a(619),
        invitesService: n.Ember.inject.service('invites'),
        contextMenuManager: n.UIKit.getContextMenuManager(),
        didInsertElement() {
          this._super(...arguments), this.centerLeaderboardOnPlayerRow();
        },
        isPlayerRow: n.Ember.computed(
          'currentSummonerName',
          'summonerName',
          function () {
            return this.get('currentSummonerName') === this.get('summonerName');
          },
        ),
        rankedColumnText: n.Ember.computed(
          'tier',
          'division',
          'leaguePoints',
          function () {
            const e = this.get('tier'),
              t = this.get('tra');
            if (e === o.OTHER_TIERS.NONE)
              return this.get('tra.social_leaderboard_unranked_tier');
            const a = this.get('division'),
              i = this.get('leaguePoints');
            return n.LeagueTierNames.getTierDivisionLpLoc(e, a, i);
          },
        ),
        rankedMiniRegaliaPath: n.Ember.computed('tier', function () {
          const e = this.get('tier');
          return n.LeagueTierNames.getRankedMiniRegalia(
            e === o.OTHER_TIERS.NONE ? o.OTHER_TIERS.UNRANKED : e,
          );
        }),
        centerLeaderboardOnPlayerRow() {
          if (this.get('isPlayerRow')) {
            const e = this.element.getBoundingClientRect().height,
              t =
                e * this.get('leaderboardRowIndex') -
                e * o.NUM_OF_ROWS_TO_CENTER;
            this.element.parentElement.scroll({ top: t, behavior: 'smooth' });
          }
        },
        closeSocialLeaderboardHelper() {
          const e = this.get('closeSocialLeaderboard');
          e && e();
        },
        isPlayerInvitable: n.Ember.computed(
          'invitesService.canInvitePlayer',
          function () {
            if ('offline' === this.get('playerAvailability')) return !1;
            const e = this.get('invitesService');
            return e.canInvitePlayer(this.get('summonerId'));
          },
        ),
        invitePlayer: function () {
          n.Telemetry.sendEvent(
            'social-leaderboard-invite-player',
            this.get('puuid'),
          );
          const e = this.get('invitesService');
          e.invitePlayer(this.get('summonerId'), this.get('summonerName'));
        },
        viewProfile: function () {
          n.Telemetry.sendEvent(
            'social-leaderboard-view-profile',
            this.get('puuid'),
          ),
            (0, n.getProvider)()
              .getProxiedContract('rcp-fe-lol-profiles')
              .then((e) => {
                this.closeSocialLeaderboardHelper(),
                  e.showOverlay({ summonerId: this.get('summonerId') });
              });
        },
        openConversation: function () {
          (0, n.getProvider)()
            .getProxiedContract('rcp-fe-lol-social')
            .then((e) => {
              this.closeSocialLeaderboardHelper(),
                n.Telemetry.sendEvent(
                  'social-leaderboard-open-conversation',
                  this.get('puuid'),
                ),
                e.openConversation(this.get('puuid'));
            });
        },
        giveGift: function () {
          n.Telemetry.sendEvent(
            'social-leaderboard-give-gift',
            this.get('puuid'),
          ),
            this.closeSocialLeaderboardHelper(),
            n.Router.navigateTo('rcp-fe-lol-store', {
              page: 'gifting',
              recipientSummonerId: this.get('summonerId'),
            });
        },
        contextMenu: function (e) {
          this.get('summonerName') !== this.get('currentSummonerName') &&
            (this.contextMenuManager.setMenuItems([
              {
                label: this.get(
                  'tra.social_leaderboard_row_context_invite_to_game',
                ),
                action: 'invitePlayer',
                target: this,
                disabled: !this.get('isPlayerInvitable'),
              },
              {
                label: this.get(
                  'tra.social_leaderboard_row_context_send_message',
                ),
                action: 'openConversation',
                target: this,
              },
              {
                label: this.get(
                  'tra.social_leaderboard_row_context_view_profile',
                ),
                action: 'viewProfile',
                target: this,
              },
              {
                label: this.get('tra.social_leaderboard_row_context_give_gift'),
                action: 'giveGift',
                target: this,
                disabled: !this.get('isGiftable'),
              },
            ]),
            this.contextMenuManager.openAtEvent(e));
        },
        actions: {
          onPlayerRowClick() {
            this.centerLeaderboardOnPlayerRow();
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '5QS1vRbA',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\row-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\row-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\row-component\\\\index.js\\" "],["text","\\n"],["open-element","tr",[]],["static-attr","class","social-leaderboard-table-row"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"onPlayerRowClick"],null],null],["flush-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["append",["unknown",["leaderboardPosition"]],false],["close-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-cell"],["flush-element"],["text","\\n      "],["open-element","img",[]],["static-attr","class","social-leaderboard-rank-image"],["dynamic-attr","src",["unknown",["rankedMiniRegaliaPath"]],null],["flush-element"],["close-element"],["text","\\n      "],["append",["unknown",["rankedColumnText"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-cell"],["flush-element"],["text","\\n      "],["open-element","lol-social-avatar-icon",[]],["static-attr","class","social-leaderboard-avatar"],["dynamic-attr","icon-id",["unknown",["profileIconId"]],null],["dynamic-attr","availability",["unknown",["playerAvailability"]],null],["static-attr","show-availability","true"],["flush-element"],["text","\\n        "],["append",["helper",["hovercard-component"],null,[["summonerId"],[["get",["summonerId"]]]]],false],["text","\\n      "],["close-element"],["text","\\n      "],["append",["unknown",["summonerName"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["append",["unknown",["wins"]],false],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(621),
      (e.exports = n.Ember.Component.extend({
        classNames: ['social-leaderboard-friend-filter'],
        layout: a(622),
        nameFilter: '',
        didReceiveAttrs: function () {
          this._super(...arguments), this.filter();
        },
        filter() {
          const e = this.get('updateFilteredData'),
            t = document.documentElement.lang || 'en',
            a = this.get('nameFilter').toLocaleLowerCase(t),
            n = this.get('leaderboardData');
          '' === a && e(n);
          const o = n.filter((e) =>
            e.summonerName.toLocaleLowerCase(t).includes(a),
          );
          e(o);
        },
        actions: {
          onInput() {
            this.filter();
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'BrD1WO0v',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-filter-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-filter-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-filter-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-flat-input",[]],["static-attr","class","social-leaderboard-filter-input"],["flush-element"],["text","\\n  "],["append",["helper",["input"],null,[["type","maxlength","value","placeholder","input"],["search","40",["get",["nameFilter"]],["get",["tra","social_leaderbaord_filter_placeholder"]],["helper",["action"],[["get",[null]],"onInput"],null]]]],false],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(624),
      (e.exports = n.Ember.Component.extend({
        classNames: ['social-leaderboard-friend-not-found'],
        layout: a(625),
        actions: {},
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'G66rWO+b',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-not-found-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-not-found-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-not-found-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-friend-not-found-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","friend-not-found-image"],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","social-leaderboard-friend-not-found-text"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_friend_not_found"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0),
      o = a(79),
      i = (function (e) {
        return e && e.__esModule ? e : { default: e };
      })(o);
    a(627),
      (e.exports = n.Ember.Component.extend(i.default, {
        classNames: ['not-enough-friends'],
        layout: a(628),
        notEnoughFriendsDescription: n.Ember.computed(
          'tra.social_leaderboard_add_friends_description',
          'minFriendCount',
          function () {
            const e = this.get('tra');
            return e.formatString(
              'social_leaderboard_add_friends_description',
              { minFriendCount: this.get('minFriendCount') },
            );
          },
        ),
        actions: {
          openFriendFinderModal() {
            (0, n.getProvider)()
              .getProxiedContract('rcp-fe-lol-social')
              .then(function (e) {
                e.openFriendFinderModal();
              });
          },
        },
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: '+DJ8odcJ',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\not-enough-friends-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\not-enough-friends-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\not-enough-friends-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-not-enough-friends-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","not-enough-friends-image"],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","social-leaderboard-add-friends-text"],["flush-element"],["text","\\n    "],["append",["unknown",["notEnoughFriendsDescription"]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-button",[]],["static-attr","class","social-leaderboard-add-friend-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"openFriendFinderModal"],null],null],["flush-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_add_friends_button"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
  function (e, t, a) {
    'use strict';
    var n = a(0);
    a(630),
      (e.exports = n.Ember.Component.extend({
        classNames: ['social-leaderboard-error-state'],
        layout: a(631),
      }));
  },
  function () {},
  function (e, t, a) {
    const n = a(0),
      o = n.Ember;
    e.exports = o.HTMLBars.template({
      id: 'cMGUR8F2',
      block:
        '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\error-state-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\error-state-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_12_1\\\\LeagueClientContent_Release\\\\15685\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\error-state-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-error-state-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","error-state-image"],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","social-leaderboard-error-state-text"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_oops"]],false],["text","\\n    "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_error_message"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {},
    });
  },
]);
